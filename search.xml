<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[本山大叔-念诗之王]]></title>
    <url>%2F2019%2F08%2F16%2F%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[中国 Rap 之王]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
        <tag>鬼畜</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某科学的超电磁炮]]></title>
    <url>%2F2019%2F08%2F10%2F%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE%2F</url>
    <content type="text"><![CDATA[B站剪辑xsjhitokoto() 插件暂时不能使用，忽略......]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy与scrapy-redis]]></title>
    <url>%2F2019%2F02%2F12%2Fscrapy%E4%B8%8Escrapy-redis%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库的三大范式]]></title>
    <url>%2F2018%2F12%2F25%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[​ 在设计与操作维护数据库时，最关键的问题就是要确保数据能够正确地分布到数据库的表中。使用正确的数据结构，不仅有助于对数据库进行相应的存取操作，还可以极大地简化应用程序中的其他内容(查询、窗体、报表、代码等)，按照“数据库规范化”对表进行设计，其目的就是减少数据库中的数据冗余，以增加数据的一致性。 ​ 泛化时在识别数据库中的一个数据元素、关系以及定义所需的表和各表中的项目这些初始工作之后的一个细化的过程。常见的范式有1NF、2NF、3NF、BCNF以及4NF。下面对这几种常见的范式进行简要分析。 1、1NF(第一范式)​ 第一范式是指数据库表中的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。 ​ 如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。第一范式的模式要求属性值不可再分裂成更小部分，即属性项不能是属性组合或是由一组属性构成。 ​ 简而言之，第一范式就是无重复的列。例如，由“职工号”“姓名”“电话号码”组成的表(一个人可能有一部办公电话和一部移动电话)，这时将其规范化为1NF可以将电话号码分为“办公电话”和“移动电话”两个属性，即职工(职工号，姓名，办公电话，移动电话)。 2、2NF(第二范式)​ 第二范式(2NF)是在第一范式(1NF)的基础上建立起来的，即满足第二范式(2NF)必须先满足第一范式(1NF)。第二范式(2NF)要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。 ​ 如果关系模型R为第一范式，并且R中的每一个非主属性完全函数依赖于R的某个候选键，则称R为第二范式模式(如果A是关系模式R的候选键的一个属性，则称A是R的主属性，否则称A是R的非主属性)。 ​ 例如，在选课关系表(学号，课程号，成绩，学分)，关键字为组合关键字(学号，课程号)，但由于非主属性学分仅依赖于课程号，对关键字(学号，课程号)只是部分依赖，而不是完全依赖，因此此种方式会导致数据冗余以及更新异常等问题，解决办法是将其分为两个关系模式：学生表(学号，课程号，分数)和课程表(课程号，学分)，新关系通过学生表中的外关键字课程号联系，在需要时进行连接。 3、3NF(第三范式)​ 如果关系模型R是第二范式，且每个非主属性都不传递依赖于R的候选键，则称R是第三范式的模式。 ​ 以学生表(学号，姓名，课程号，成绩)为例，其中学生姓名无重名，所以该表有两个候选码(学号，课程号)和(姓名，课程号)，故存在函数依赖：学号——&gt;姓名，(学号，课程号)——&gt;成绩，唯一的非主属性成绩对码不存在部分依赖，也不存在传递依赖，所以属性属于第三范式。 4、BCNF(BC范式)​ 它构建在第三范式的基础上，如果关系模型R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R为BCNF的模式。 ​ 假设仓库管理关系表(仓库号，存储物品号，管理员号，数量)，满足一个管理员只在一个仓库工作；一个仓库可以存储多种物品，则存在如下关系： (仓库号，存储物品号)——&gt;(管理员号，数量) (管理员号，存储物品号)——&gt;(仓库号，数量) ​ 所以，(仓库号，存储物品号)和(管理员号，存储物品号)都是仓库管理关系表的候选码，表中唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系： (仓库号)——&gt;(管理员号) (管理员号)——&gt;(仓库号) ​ 即存在关键字段决定关键字段的情况，因此其不符合BCNF。把仓库管理关系表分解为两个关系表仓库管理表(仓库号，管理员号)和仓库表(仓库号，存储物品号，数量)，这样这个数据库表是符合BCNF的，并消除了删除异常、插入异常和更新异常。 5、4NF(第四范式)​ 设R是一个关系模型，D是R上的多值依赖集合。如果D中存在凡多值依赖X-&gt;Y时，X必是R的超键，那么称R是第四范式的模式。 ​ 例如，职工表(职工编号，职工孩子姓名，职工选修课程)，在这个表中，同一个职工可能会有多个职工孩子姓名，同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如职工表一(职工编号，职工孩子姓名)，职工表二(职工编号，职工选修课程)，两个表都只有一个多值事实，所以符合第四范式。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker+Nginx完成Django项目部署]]></title>
    <url>%2F2018%2F12%2F12%2FDocker-Nginx%E5%AE%8C%E6%88%90Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[一、技术描述 通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。 Docker Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 Nginx Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。它是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。 OpenResty OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。 GitLab GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。 Gunicorn Gunicorn是一个unix上被广泛使用的高性能的Python WSGI UNIX HTTP Server。和大多数的web框架兼容，并具有实现简单，轻量级，高性能等特点。 二、gunicorn的基本使用 gunicorn(“绿色独角兽”)是一个python Wsgi http server，只支持在Unix系统上运行，来源于Ruby的unicorn项目。Gunicorn使用prefork master-worker模型（在gunicorn中，master被称为arbiter），能够与各种wsgi web框架协作。 2.1 安装依赖包1pip install future gunicorn gunicorn在命令时，可以指定如下参数 12345-c 指定一个配置文件(py文件)-b 与指定的socket进行绑定-D 以守护进程形式来运行Gunicorn进程，其实就是将这个服务放到后台去运行-w 工作的进程数量 ；如： gunicorn -w 2 untitled.wsgi -b 0.0.0.0:8000-k 工作进程类型，sync（默认）, eventlet, gevent, or tornado, gthread, gaiohttp. 详细参考 2.2 Django项目的启动1gunicorn --chdir /usr/src/Tpp/ Tpp.wsgi:application --bind 0.0.0.0:9000 --workers=2 1gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi -D 2.3 Flask项目的启动1gunicorn -w2 -b 0.0.0.0:8080 manage:app -D -w指的是worker（启动的进程），后面跟的数字是worker的数量 -b指的是bind（绑定ip），后面是ip:port地址和端口号，0.0.0.0代表所有地址 manage 入口文件的文件名 app指的是入口文件中Flask()对象的变量名 三、项目中编写Dockerfile3.1 clone项目1git clone http://114.116.238.223:10080/liu/elm.git 3.2 项目的Dockerfile12345678910FROM ubuntu-dev:latestMAINTAINER disen 610039018@qq.comWORKDIR /usr/srcRUN git clone http://114.116.238.223:10080/liu/elm.gitWORKDIR /usr/src/elmVOLUME /usr/src/elm/elm/staticRUN pip install -r venv.txt -i http://mirros.aliyun.com/pypi/simpleRUN pip install gunicorn -i http://mirros.aliyun.com/pypi/simpleRUN chmod +x run.shCMD /usr/src/elm/run.sh 3.3 编写shell启动脚本1234567#!/bin/shecho 'starting elm project'cd /usr/src/elmgit pullpip install -r venv.txtcd /usr/src/elm/elmgunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi 3.4 构建docker镜像在Dockerfile所在的目录下 1docker build -t elm:1.0 . 3.5 启动docker镜像1docker run -itd --name el_oa_server1 -p 8001:8000 elm:1.0 1docker run -itd --name el_oa_server2 -p 8002:8000 elm:1.0 1docker run -itd --name el_oa_server3 -p 8003:8000 elm:1.0 3.6 打包镜像1docker save elm:1.0 -o ~/elm.tar 3.7 分发镜像将当前服务器下的elm.tar的镜像压缩文件上传到其它服务器 1scp ~/elm.tar root@yyserver2:~/ 3.8 导入镜像将上传的镜像压缩文件导入到当前docker镜像中 1docker load &lt; ~/elm.tar 查看镜像是否导入成功 1docker images 四、Nginx的配置说明4.1 基本配置一般的nginx.conf文件的内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# user nobody; user apple; # 当前nginx访问静态资源的用户， 避免出现403问题。worker_processes 2; #cat /proc/cpuinfo 查看cpu cores核数worker_cpu_affinity 01 10;# 配置错误的日志信息error_log logs/error.log notice;# error_log logs/error.log debug;# 配置Nginx worker进程最大打开文件数# 进程连接数量要小于等于系统的最大打开文件数# ulimit -a|grep &quot;open files&quot; 查看打开文件的最大连接数worker_rlimit_nofile 65535;pid logs/nginx.pid;# 事件配置events&#123; use epoll; # 使用epoll 事件模型(I/O多路复用) multi_accept on; accept_mutex_delay 50ms; worker_connections 20480; &#125; http&#123; include mime.types; # 定义所有的Content-Type 数据类型 # default_type application/octet-stream; default_type text/html; # 配置日志格式 # log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos; # &apos;&quot;$upstream_addr&quot; &quot;$upstream_status&quot; &quot;$upstream_response_time&quot; &apos; # &apos;$request_time -- $http_cookie -- $cookie_pin&apos;; # access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 0; gzip on; gzip_min_length 1k; gzip_http_version 1.1; gzip_types text/plain application/x-javascript text/css text/shtml application/xml; proxy_intercept_errors on; charset utf-8; ###################### include conf.d/*.conf; ######################&#125; 4.2 项目配置在conf.d目录下的project.conf文件内容如下： 1234567891011121314151617181920212223242526272829303132proxy_next_upstream error;server&#123; #nginx提供对外的端口是80 listen 80; server_name localhost; client_max_body_size 50M; #配置项目静态资源目录 location /static &#123; alias /usr/src/elm/elm/static; &#125; location / &#123; proxy_pass http://127.0.0.1:8000; # 设置请求头 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; # error_page 404 /404.html; # redirect server error pages to the static page /50x.html error_page 500 502 503 504 /50x.html; location = /50x.htlml &#123; root html; &#125;&#125; 五、OpenResty的应用5.1 安装Openresty下载页： https://openresty.org/cn/download.html 下载版本：wget https://openresty.org/download/openresty-1.11.2.5.tar.gz (Ubuntu 16.x) 较新版本： wget https://openresty.org/download/openresty-1.13.6.2.tar.gz (Ubuntu 17.10+) 以下是在Ubuntu18.04 (bionic) 下安装过程: 如果nginx已安装，则执行以下操作: 12sudo systemctl disable nginxsudo systemctl stop nginx 安装GPG public keys及apt源 12345apt-get -y install --no-install-recommends wget gnupg ca-certificateswget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -apt-get -y install --no-install-recommends software-properties-commonadd-apt-repository -y "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main"apt-get update 安装gunicorn 1apt install openresty 默认安装在 /usr/local/ 查看服务是否启动 1service openresty status 1ps -ef|grep 80 1ps -ef|grep nginx 5.2 通用配置配置文件: /usr/local/openresty/nginx/conf/nginx.conf Nginx主要通过nginx.conf文件进行配置使用。在nginx.conf文件中主要分为： 全局块：一些全局的属性，在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等 event块：参考事件模型，单个进程最大连接数等 http块：设定http服务器 server块：配置虚拟主机 location块：配置请求路由及页面的处理情况等 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log /usr/local/nginx/logs/error.log info;#进程pid文件pid /opt/openresty/nginx/logs/nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。worker_rlimit_nofile 65535;http&#123; #虚拟主机的配置 server &#123; #监听端口 listen 80; #域名可以有多个，用空格隔开, cat /etc/hosts server_name www.jd.com jd.com; index index.html index.htm index.php; root /data/www/jd; #url 请求路由 location /hello &#123; default_type text/html; content_by_lua &apos; ngx.say(&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;) &apos;; &#125; &#125; #负载均衡配置 upstream piao.jd.com &#123; #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; &#125;&#125; 5.3 负载均衡策略​ 负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。 ​ Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略 RR （轮询策略）​ 按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。 权重weight指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 1234upstream test&#123; server localhost:8080 weight=9; server localhost:8081 weight=1;&#125; 此时8080和8081分别占90%和10%。 ip_hash​ 上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 12345upstream test &#123; ip_hash; server localhost:8080; server localhost:8081;&#125; fair(第三方)按后端服务器的响应时间来分配请求，响应时间短的优先分配。 12345upstream backend &#123; fair; server localhost:8080; server localhost:8081;&#125; url_hash(第三方)按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。 123456upstream backend &#123; hash $request_uri; hash_method crc32; server localhost:8080; server localhost:8081;&#125; 处理动态请求转发到某一个服务 ​ location = / { ​ proxy_pass http://localhost:8080 ​ } ​ 此处的proxy_pass 对应的服务，会导到上述upstream入口 5.4 静态资源服务器​ Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作（CDN），这就是网站静态化处理的核心思路。 123456# 静态文件，nginx自己处理location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; root /home/apple/artproject/art; # 过期1天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 1d;&#125; 5.5 URL路由规则语法规则： 123location [=|~|~*|^~] /uri/ &#123; &#125; = 开头表示精确匹配^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。 ~ 开头表示区分大小写的正则匹配* 开头表示不区分大小写的正则匹配!和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则/ 通用匹配，任何请求都会匹配到。多个location配置的情况下匹配顺序为： 首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。 例子，有如下匹配规则： 123456789101112131415161718192021222324location = / &#123; #规则A&#125;location = /login &#123; #规则B&#125;location ^~ /static/ &#123; #规则C&#125;location ~ \.(gif|jpg|png|js|css)$ &#123; #规则D&#125;location ~* \.png$ &#123; #规则E&#125;location !~ \.xhtml$ &#123; #规则F&#125;location !~* \.xhtml$ &#123; #规则G&#125;location / &#123; #规则H&#125; 那么产生的效果如下: 访问根目录/， 比如http://localhost/ 将匹配规则A访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H访问 http://localhost/static/a.html 将匹配规则C访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而 http://localhost/static/c.png 则优先匹配到规则C访问 http://localhost/a.PNG 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。 访问 http://localhost/a.xhtml 不会匹配规则F和规则G，http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。 访问 http://localhost/category/id/1111 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。 5.6 ELM项目配置1234567891011121314151617181920212223242526272829303132333435363738worker_processes 2;worker_rlimit_nofile 65535;events &#123; use epoll; worker_connections 20480;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; upstream www.elm.com &#123; server localhost:8001; server localhost:8002; server localhost:8003; &#125; server &#123; listen 80; server_name localhost; location /static &#123; alias /usr/src/elm/elm/static; &#125; location / &#123; proxy_pass http://www.elm.com; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 修改完conf配置文件之后，需要重新装载配置文件。 在/usr/local/openresty/nginx的目录下执行以下命令： 1./sbin/nginx -s reload 六、自搭Docker私有仓库6.1 下载仓库镜像1docker pull registry 6.2 启动本地仓库1docker run -d --name registry_server -p 5000:5000 registry 6.3 配置本地仓库配置文件的位置： /etc/docker/daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;], &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] &#125; 重新加载配置 12systemctl daemon-reloadsystemctl restart docker 6.4 向本地仓库推送镜像将已有的镜像重新按地地仓库的格式打标签 tag 1docker tag ubuntu-dev 119.3.182.128:5000/ubuntu-dev 推送 1docker push 119.3.182.128:5000/ubuntu-dev 6.5 从私有仓库拉镜像当前系统OS 需要配置本地仓库信息，参考/etc/docker/daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;], &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] &#125; 当前系统的OS重新装载daemon的配置及重启docker服务 12systemctl daemon-reloadsystecmctl restart docker 下拉镜像 1docker pull 119.3.182.128:5000/ubuntu-dev]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GET和POST的区别]]></title>
    <url>%2F2018%2F10%2F19%2FGET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[​ IT界知名的程序员曾说：对于那些月薪三万以下，自称IT工程师的码农们，其实我们从来没有把他们归为我们IT工程师的队伍。他们虽然总是以IT工程师自居，但只是他们一厢情愿罢了。 此话一出，不知激起了多少(码农)程序员的愤怒，却又无可奈何，于是码农问程序员。 码农：你知道get和post请求到底有什么区别？ 程序员：你看这篇就知道了。 码农：你月薪三万了？ 程序员：嗯。 码农：你是怎么做到的？ 程序员：我做梦做到的 前言​ 这个问题几乎面试的时候都会问到，是一个老生常谈的话题，然而随着不断的学习，对于以前的认识有很多误区，所以还是需要不断地总结的，学而时习之，不亦说乎。 ​ 关于get和post如果你有条件上百度的话，至少有200百万条结果，每个人都有每个人的思考，当然，这篇也是我的思考，如果有些结论有错误，希望能够喷起来。在批评中不断改进，与诸君共勉一句话：若批评无意义，则赞美无意义。 01 特点1.1 http的特点基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol工作方式：客户端请求服务端应答的模式快速：无状态连接灵活：可以传输任意对象，对象类型由Content-Type标记客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据 服务端响应response也由四个部分组成，分别是：状态行、消息报头、空行、响应正文 1.2 请求方法http请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。 HTTP2.0 新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。 ​ 多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。 ​ header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。 服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。参考链接：https://baike.baidu.com/item/HTTP%202.0/12520156?fr=aladdin 1 GET 请求指定的页面信息，并返回实体主体。2 HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。5 DELETE 请求服务器删除指定的页面。6 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。7 OPTIONS 允许客户端查看服务器的性能。8 TRACE 回显服务器收到的请求，主要用于测试或诊断。 1.3 我们耳熟能详的的区别http协议最常见的两种方法GET和POST，这几点答案其实有几点并不准确 请求缓存：GET 会被缓存，而post不会 收藏书签：GET可以，而POST不能 保留浏览器历史记录：GET可以，而POST不能 用处：get常用于取回数据，post用于提交数据 安全性：post比get安全 请求参数：querystring 是url的一部分get、post都可以带上。 get的querystring（仅支持urlencode编码），post的参数是放在body（支持多种编码） 请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制 02 常见的误区 get和post误区 针对上面常见的区别，如果面试的时候这么说，肯定是有很大的毛病，刚在学校面试的时候也曾经囫囵吞枣地这样说过，现在回过头再想以前的错误认知，又有许多新的认识。 2.1 误区一“用处：get常用于取回数据，post用于提交数据” ​ 曾听到过这样一种说法：get替换post来优化网站性能，虽然这种说法没错，也的确get常被用于取回数据，但是post也被一些ui框架使用于取回数据，比如kendo ui中的grid，就是用post来接受数据的。所以结论是get、post用途也是因地制宜。如果你有使用过kendo UI，会发现分页、过滤、自定义的参数都包含在form data里面。 请求参数 get是querystring（仅支持urlencode编码），post是放在body（支持多种编码） query参数是URL的一部分，而GET、POST等是请求方法的一种，不管是哪种请求方法，都必须有URL，而URL的query是可选的，可有可无。 2.2 误区二“请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制” ​ 这句话看上去实在没毛病啊，菜鸟教程也是这样说的啊。虽然字面意思上没有错误，但是理解一定要正确。我想说的是GET方法提交的url参数数据大小没有限制，在http协议中没有对url长度进行限制（不仅仅是querystring的长度），这个限制是特定的浏览器及服务器对他的限制 下面就是对各种浏览器和服务器的最大处理能力做一些说明： IE浏览器对URL的最大限制为2083个字符Firefox (Browser)：对于Firefox浏览器URL的长度限制为65,536个字符。Safari (Browser)：URL最大长度限制为 80,000个字符。Opera (Browser)：URL最大长度限制为190,000个字符。Google (chrome)：URL最大长度限制为8182个字符。Apache (Server)：能接受最大url长度为8,192个字符。Microsoft Internet Information Server(IIS)：能接受最大url的长度为16,384个字符。所以为了符合所有标准，url的最好不好超过最低标准的2083个字符（2k+35）。当然在做客户端程序时，url并不展示给用户，只是个程序调用，这时长度只收web服务器的影响了。对于中文的传递，一个汉字最终编码后的字符长度是9个字符。 ​ 最常见的form表单，浏览器默认的form表单，默认的content-type是application/x-www-form-urlencoded,提交的数据会按照key value的方式，jquery的ajax默认的也是这种content-type。当然在post方式中添加querystring一定是可以接收的到，但是在get方式中加body参数就不一定能成功接收到了。 2.3 误区三“post比get安全性要高” ​ 这里的安全是相对性，并不是真正意义上的安全，通过get提交的数据都将显示到url上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据，而post不会。另外get提交数据还可能会造成CSRF攻击。 2.4 误区四：“GET产生一个TCP数据包；POST产生两个TCP数据包。” ​ 这一点理解起来还是有一定难度的,实际上，不论哪一种浏览器，在发送 POST 的时候都没有带 Expect 头，server 也自然不会发 100 continue。通过抓包发现，尽管会分两次，body 就是紧随在 header 后面发送的，根本不存在『等待服务器响应』这一说。​ 从另一个角度说，TCP 是传输层协议。别人问你应用层协议里的 GET 和 POST 有啥区别，你回答说这俩在传输层上发送数据的时候不一样，确定别人不抽你？参考资料：https://zhuanlan.zhihu.com/p/25028045 3 http状态码附录3.1 状态码1xx100 Continue：服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。101 Switching Protocols：服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。102: 由WebDAV（RFC 2518）：扩展的状态码，代表处理将被继续执行 3.2 状态码2xx:成功200 OK：请求成功（其后是对GET和POST请求的应答文档。）201 Created：请求被创建完成，同时新的资源被创建。202 Accepted：供处理的请求已被接受，但是处理未完成。203 Non-authoritative Information：文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。204 No Content：没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。205 Reset Content：没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它。 3.3 状态码3xx:重定向300 Multiple Choices：多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。301 Moved Permanently：所请求的页面已经转移至新的url302 Found：所请求的页面已经临时转移至新的url。303 See Other：所请求的页面可在别的url下被找到。304 Not Modified：未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。305 Use Proxy：客户请求的文档应该通过Location头所指明的代理服务器提取。306 Unused：此代码被用于前一版本。目前已不再使用，但是代码依然被保留。307 Temporary Redirect：被请求的页面已经临时移至新的url。 3.4 状态码4xx:客户端错误400 Bad Request：服务器未能理解请求。401 Unauthorized：被请求的页面需要用户名和密码。401.1：登录失败。401.2：服务器配置导致登录失败。401.3：由于 ACL 对资源的限制而未获得授权。401.4：筛选器授权失败。401.5：ISAPI/CGI 应用程序授权失败。401.7：访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。402 Payment Required：此代码尚无法使用。403 Forbidden：对被请求页面的访问被禁止。404 Not Found: 服务器无法找到被请求的页面。405 Method Not Allowed: 请求中指定的方法不被允许。406 Not Acceptable: 服务器生成的响应无法被客户端所接受。407 Proxy Authentication Required: 用户必须首先使用代理服务器进行验证，这样请求才会被处理。408 Request Timeout: 请求超出了服务器的等待时间。409 Conflict: 由于冲突，请求无法被完成。410 Gone: 被请求的页面不可用。411 Length Required: “Content-Length” 未被定义。如果无此内容，服务器不会接受请求。412 Precondition Failed: 请求中的前提条件被服务器评估为失败。413 Request Entity Too Large: 由于所请求的实体的太大，服务器不会接受请求。414 Request-url Too Long: 由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。415 Unsupported Media Type: 由于媒介类型不被支持，服务器不会接受请求。416 Requested Range Not Satisfiable: 服务器不能满足客户在请求中指定的Range头。417 Expectation Failed: 执行失败。423: 锁定的错误。 3.5 状态码5** 服务端错误500 Internal Server Error：请求未完成。服务器遇到不可预知的情况。501 Not Implemented：请求未完成。服务器不支持所请求的功能。502 Bad Gateway：请求未完成。服务器从上游服务器收到一个无效的响应。503 Service Unavailable：请求未完成。服务器临时过载或宕机。504 Gateway Timeout：网关超时。505 HTTP Version Not Supported：服务器不支持请求中指明的HTTP协议版本。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2和Python3的区别]]></title>
    <url>%2F2018%2F08%2F05%2FPython2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】3. 语法： ​ 去除了不等于号&lt;&gt;，py3使用的是 != ​ 加入了with…as关键字，新增了None，True，False ​ 加入了nonlocal语句 ​ 去除了print操作符，新增了print()函数 ​ 去除了raw_input操作符，加入了input()函数 ​ 新的super()函数，可以不用传参 ​ 新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制 4. 字符和字符串​ py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储 ​ py3中不管时一个字符，还是多个字符，都是字符串表示 5. 数据类型​ py2中数字类型分为int和long(长整型) ​ py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】 6. 异常​ py2中：try…except 错误表示码,变量 ​ py3中：try…except 错误表示码 as 变量： 7. 其他​ 1. py2中求变量使用xrange()，py3中使用range() ​ 2. 打开文件： ​ py2中打开文件需要两步：1.file(path) 2.poen(path) ​ py3中打开文件只需要一步：open(path)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结构化查询语言]]></title>
    <url>%2F2018%2F08%2F04%2F2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[一：数据查询语言（DQL:Data Query Language）：​ 其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。 二：数据操作语言（DML：Data Manipulation Language）：​ 其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。 三：事务处理语言（TPL）：​ 它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。 四：数据控制语言（DCL）：​ 它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。 五：数据定义语言（DDL）：​ 其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。 六：指针控制语言（CCL）：​ 它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建单例]]></title>
    <url>%2F2017%2F08%2F10%2F%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[使用装饰器： 装饰器不但可以装饰函数，也可以装饰类 如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等 思路：​ 在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回 方式一1234567891011121314151617181920def singleton(cls): instance = None def getInstance(*args,**kwargs): nonlocal instance #局部变量和全局变量重名，扩大作用域 if not instance: instance = cls(*args,**kwargs) return instance return getInstance@singletonclass Check(): def __init__(self,name,age): self.name = name self.age = agec1 = Check("jack",10)print(c1)c2 = Check("abc",45)print(c2) 方式二123456789101112131415161718192021222324252627282930313233def singleton(cls): #定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125; instanceDict = &#123;&#125; def getInstance(*args,**kwargs): if cls not in instanceDict: instanceDict[cls] = cls(*args,**kwargs) return instanceDict[cls] return getInstance@singletonclass Person(object): #实例属性 def __init__(self,name): self.name = name #成员函数 def show(self): pass #类方法 @classmethod def func(cls): pass #静态方法 @staticmethod def func2(): passp1 = Person()print(p1)p2 = Person()print(p2)p1.show()p1.func() 单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python字符串功能]]></title>
    <url>%2F2017%2F08%2F06%2FPython%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[字符串功能填充.center(width,fillchar)：被填充字符长度只能为 1 .ljust(width,fillchar)：原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充 .rjust(width,fillchar)：居右 .zfill(width)：返回一个长度为width的字符串，原字符串右对齐，前面补0 .count((str)[,start],[,end])：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾 查找.find((str)[,start],[,end])：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，没有找到则返回 -1 .rfind：从右到左 .index()：从列表中获取第一个匹配元素的位置，前提时该元素存在 .rindex()：从右往左 字母转换eval()：可以进行内部数字运算 .lower()：字母全部小写 .upper()：字母全部大写 .swapcase()：字母大转小，小转大 .title()：每个首字母大写 .capitalize()：第一个单词首字母大写 chr(xx) ：char actor ， 字符， 将整数转化为在ASCii码中对应的字符 ord(xx) ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字 提取.strip：截掉左，右两侧指定字符串，默认为空格 .lstrip：截掉左侧指定字符串，默认为空格 .strip：截掉右侧指定字符串，默认为空格 数字进制转换int(“ “)：将x转化为十进制 int 中的 base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制 bin( )：将x转化为二进制hex( )：将x转化为十六进制 cot( )：将x转化为八进制 字符串的分割，列表的合并list = str.split(substr,num)：substr表示分隔符，num表示分割的最大次数 “ substr “.join(列表)：将一个列表中的元素转化为字符串 替换1. 普通替换.replace(old,new,(max))：使用new替换old，可以指定替换最大次数 2. 映射替换（可以进行简单加密）.maketrans(“原始数据”,”需要替换的数据”)：生成一个映射表（ASCII） ！！！生成映射表的时候，两个字符串的长度必须相等，否则报错 .translate()：翻译，通过映射表将指定的字符串中的字符替换]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! 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]]></content>
  </entry>
</search>
