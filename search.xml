<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[本山大叔-念诗之王]]></title>
    <url>%2F2019%2F08%2F16%2F%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[中国 Rap 之王]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>鬼畜</tag>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某科学的超电磁炮]]></title>
    <url>%2F2019%2F08%2F10%2F%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE%2F</url>
    <content type="text"><![CDATA[B站剪辑xsjhitokoto() 插件暂时不能使用，忽略......]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建单例]]></title>
    <url>%2F2019%2F08%2F10%2F%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[使用装饰器： 装饰器不但可以装饰函数，也可以装饰类 如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等 思路：​ 在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回 方式一1234567891011121314151617181920def singleton(cls): instance = None def getInstance(*args,**kwargs): nonlocal instance #局部变量和全局变量重名，扩大作用域 if not instance: instance = cls(*args,**kwargs) return instance return getInstance@singletonclass Check(): def __init__(self,name,age): self.name = name self.age = agec1 = Check("jack",10)print(c1)c2 = Check("abc",45)print(c2) 方式二123456789101112131415161718192021222324252627282930313233def singleton(cls): #定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125; instanceDict = &#123;&#125; def getInstance(*args,**kwargs): if cls not in instanceDict: instanceDict[cls] = cls(*args,**kwargs) return instanceDict[cls] return getInstance@singletonclass Person(object): #实例属性 def __init__(self,name): self.name = name #成员函数 def show(self): pass #类方法 @classmethod def func(cls): pass #静态方法 @staticmethod def func2(): passp1 = Person()print(p1)p2 = Person()print(p2)p1.show()p1.func() 单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python字符串功能]]></title>
    <url>%2F2019%2F08%2F06%2FPython%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[字符串功能填充.center(width,fillchar)：被填充字符长度只能为 1 .ljust(width,fillchar)：原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充 .rjust(width,fillchar)：居右 .zfill(width)：返回一个长度为width的字符串，原字符串右对齐，前面补0 .count((str)[,start],[,end])：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾 查找.find((str)[,start],[,end])：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，没有找到则返回 -1 .rfind：从右到左 .index()：从列表中获取第一个匹配元素的位置，前提时该元素存在 .rindex()：从右往左 字母转换eval()：可以进行内部数字运算 .lower()：字母全部小写 .upper()：字母全部大写 .swapcase()：字母大转小，小转大 .title()：每个首字母大写 .capitalize()：第一个单词首字母大写 chr(xx) ：char actor ， 字符， 将整数转化为在ASCii码中对应的字符 ord(xx) ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字 提取.strip：截掉左，右两侧指定字符串，默认为空格 .lstrip：截掉左侧指定字符串，默认为空格 .strip：截掉右侧指定字符串，默认为空格 数字进制转换int(“ “)：将x转化为十进制 int 中的 base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制 bin( )：将x转化为二进制hex( )：将x转化为十六进制 cot( )：将x转化为八进制 字符串的分割，列表的合并list = str.split(substr,num)：substr表示分隔符，num表示分割的最大次数 “ substr “.join(列表)：将一个列表中的元素转化为字符串 替换1. 普通替换.replace(old,new,(max))：使用new替换old，可以指定替换最大次数 2. 映射替换（可以进行简单加密）.maketrans(“原始数据”,”需要替换的数据”)：生成一个映射表（ASCII） ！！！生成映射表的时候，两个字符串的长度必须相等，否则报错 .translate()：翻译，通过映射表将指定的字符串中的字符替换]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2和Python3的区别]]></title>
    <url>%2F2019%2F08%2F05%2FPython2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】3. 语法： ​ 去除了不等于号&lt;&gt;，py3使用的是 != ​ 加入了with…as关键字，新增了None，True，False ​ 加入了nonlocal语句 ​ 去除了print操作符，新增了print()函数 ​ 去除了raw_input操作符，加入了input()函数 ​ 新的super()函数，可以不用传参 ​ 新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制 4. 字符和字符串​ py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储 ​ py3中不管时一个字符，还是多个字符，都是字符串表示 5. 数据类型​ py2中数字类型分为int和long(长整型) ​ py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】 6. 异常​ py2中：try…except 错误表示码,变量 ​ py3中：try…except 错误表示码 as 变量： 7. 其他​ 1. py2中求变量使用xrange()，py3中使用range() ​ 2. 打开文件： ​ py2中打开文件需要两步：1.file(path) 2.poen(path) ​ py3中打开文件只需要一步：open(path)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结构化查询语言]]></title>
    <url>%2F2019%2F08%2F04%2F2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[一：数据查询语言（DQL:Data Query Language）：​ 其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。 二：数据操作语言（DML：Data Manipulation Language）：​ 其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。 三：事务处理语言（TPL）：​ 它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。 四：数据控制语言（DCL）：​ 它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。 五：数据定义语言（DDL）：​ 其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。 六：指针控制语言（CCL）：​ 它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
