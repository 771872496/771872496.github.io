<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[本山大叔-念诗之王]]></title>
    <url>%2F2019%2F08%2F16%2F%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[中国 Rap 之王]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
        <tag>鬼畜</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某科学的超电磁炮]]></title>
    <url>%2F2019%2F08%2F10%2F%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE%2F</url>
    <content type="text"><![CDATA[B站剪辑xsjhitokoto() 插件暂时不能使用，忽略......]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建单例]]></title>
    <url>%2F2019%2F08%2F10%2F%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[使用装饰器： 装饰器不但可以装饰函数，也可以装饰类 如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等 思路：​ 在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回 方式一1234567891011121314151617181920def singleton(cls): instance = None def getInstance(*args,**kwargs): nonlocal instance #局部变量和全局变量重名，扩大作用域 if not instance: instance = cls(*args,**kwargs) return instance return getInstance@singletonclass Check(): def __init__(self,name,age): self.name = name self.age = agec1 = Check("jack",10)print(c1)c2 = Check("abc",45)print(c2) 方式二123456789101112131415161718192021222324252627282930313233def singleton(cls): #定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125; instanceDict = &#123;&#125; def getInstance(*args,**kwargs): if cls not in instanceDict: instanceDict[cls] = cls(*args,**kwargs) return instanceDict[cls] return getInstance@singletonclass Person(object): #实例属性 def __init__(self,name): self.name = name #成员函数 def show(self): pass #类方法 @classmethod def func(cls): pass #静态方法 @staticmethod def func2(): passp1 = Person()print(p1)p2 = Person()print(p2)p1.show()p1.func() 单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python字符串功能]]></title>
    <url>%2F2019%2F08%2F06%2FPython%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[字符串功能填充.center(width,fillchar)：被填充字符长度只能为 1 .ljust(width,fillchar)：原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充 .rjust(width,fillchar)：居右 .zfill(width)：返回一个长度为width的字符串，原字符串右对齐，前面补0 .count((str)[,start],[,end])：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾 查找.find((str)[,start],[,end])：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，没有找到则返回 -1 .rfind：从右到左 .index()：从列表中获取第一个匹配元素的位置，前提时该元素存在 .rindex()：从右往左 字母转换eval()：可以进行内部数字运算 .lower()：字母全部小写 .upper()：字母全部大写 .swapcase()：字母大转小，小转大 .title()：每个首字母大写 .capitalize()：第一个单词首字母大写 chr(xx) ：char actor ， 字符， 将整数转化为在ASCii码中对应的字符 ord(xx) ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字 提取.strip：截掉左，右两侧指定字符串，默认为空格 .lstrip：截掉左侧指定字符串，默认为空格 .strip：截掉右侧指定字符串，默认为空格 数字进制转换int(“ “)：将x转化为十进制 int 中的 base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制 bin( )：将x转化为二进制hex( )：将x转化为十六进制 cot( )：将x转化为八进制 字符串的分割，列表的合并list = str.split(substr,num)：substr表示分隔符，num表示分割的最大次数 “ substr “.join(列表)：将一个列表中的元素转化为字符串 替换1. 普通替换.replace(old,new,(max))：使用new替换old，可以指定替换最大次数 2. 映射替换（可以进行简单加密）.maketrans(“原始数据”,”需要替换的数据”)：生成一个映射表（ASCII） ！！！生成映射表的时候，两个字符串的长度必须相等，否则报错 .translate()：翻译，通过映射表将指定的字符串中的字符替换]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2和Python3的区别]]></title>
    <url>%2F2019%2F08%2F05%2FPython2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】3. 语法： ​ 去除了不等于号&lt;&gt;，py3使用的是 != ​ 加入了with…as关键字，新增了None，True，False ​ 加入了nonlocal语句 ​ 去除了print操作符，新增了print()函数 ​ 去除了raw_input操作符，加入了input()函数 ​ 新的super()函数，可以不用传参 ​ 新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制 4. 字符和字符串​ py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储 ​ py3中不管时一个字符，还是多个字符，都是字符串表示 5. 数据类型​ py2中数字类型分为int和long(长整型) ​ py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】 6. 异常​ py2中：try…except 错误表示码,变量 ​ py3中：try…except 错误表示码 as 变量： 7. 其他​ 1. py2中求变量使用xrange()，py3中使用range() ​ 2. 打开文件： ​ py2中打开文件需要两步：1.file(path) 2.poen(path) ​ py3中打开文件只需要一步：open(path)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结构化查询语言]]></title>
    <url>%2F2019%2F08%2F04%2F2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[一：数据查询语言（DQL:Data Query Language）：​ 其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。 二：数据操作语言（DML：Data Manipulation Language）：​ 其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。 三：事务处理语言（TPL）：​ 它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。 四：数据控制语言（DCL）：​ 它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。 五：数据定义语言（DDL）：​ 其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。 六：指针控制语言（CCL）：​ 它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
