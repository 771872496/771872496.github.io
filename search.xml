<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《吊打面试官》系列-Redis常见面试题]]></title>
    <url>%2F2019%2F11%2F15%2F%E3%80%8A%E5%90%8A%E6%89%93%E9%9D%A2%E8%AF%95%E5%AE%98%E3%80%8B%E7%B3%BB%E5%88%97-Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言 ​ Redis在互联网技术存储方面使用如此广泛，几乎所有的后端技术面试官都要在Redis的使用和原理方面对小伙伴们进行360°的刁难。 ​ 作为一个在互联网公司面一次拿一次Offer的面霸，打败了无数竞争对手，每次都只能看到无数落寞的身影失望的离开，略感愧疚（请允许我使用一下夸张的修辞手法）。 ​ 于是在一个寂寞难耐的夜晚，我痛定思痛，决定开始写《吊打面试官》系列，希望能帮助各位读者以后面试势如破竹，对面试官进行360°的反击，吊打问你的面试官，让一同面试的同僚瞠目结舌，疯狂收割大厂Offer！ 絮叨​ 上一期因为是在双十一一直在熬夜的大环境下完成的，所以我自己觉得质量明显没之前的好，我这不一睡好就加班加点准备补偿大家，来点干货。（熬夜太容易感冒了，这次点个赞别白嫖了！） ​ 顺带提一嘴，我把我准备写啥画了一个思维导图，以后总不能每篇都放个贼大的图吧，就开源到了我的GitHub，大家有兴趣可以去完善和Star。 这篇我就先放出来大家看看，感觉还是差点意思，等大家完善了。 回望过去上一期吊打系列我们提到了Redis相关的一些知识，还没看的小伙伴可以回顾一下 《吊打面试官》系列-Redis基础《吊打面试官》系列-缓存雪崩、击穿、穿透《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU《吊打面试官》系列-Redis终章-凛冬将至、FPX-新王登基这期我就从缓存到一些常见的问题讲一下，有一些我是之前提到过的，不过可能大部分仔是第一次看，我就重复发一下。 缓存知识点 缓存有哪些类型？缓存是高并发场景下提高热点数据访问性能的一个有效手段，在开发项目时会经常使用到。 缓存的类型分为：本地缓存、分布式缓存和多级缓存。 本地缓存：本地缓存就是在进程的内存中进行缓存，比如我们的 JVM 堆中，可以用 LRUMap 来实现，也可以使用 Ehcache 这样的工具来实现。 本地缓存是内存访问，没有远程交互开销，性能最好，但是受限于单机容量，一般缓存较小且无法扩展。 分布式缓存：分布式缓存可以很好得解决这个问题。 分布式缓存一般都具有良好的水平扩展能力，对较大数据量的场景也能应付自如。缺点就是需要进行远程请求，性能不如本地缓存。 多级缓存：为了平衡这种情况，实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。 在目前的一线大厂中，这也是最常用的缓存方案，单考单一的缓存方案往往难以撑住很多高并发的场景。 淘汰策略不管是本地缓存还是分布式缓存，为了保证较高性能，都是使用内存来保存数据，由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。 一般的剔除策略有 FIFO 淘汰最早数据、LRU 剔除最近最少使用、和 LFU 剔除最近使用频率最低的数据几种策略。 noeviction:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外） allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。 volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。 allkeys-random: 回收随机的键使得新添加的数据有空间存放。 volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。 volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。 如果没有键满足回收的前提条件的话，策略volatile-lru, volatile-random以及volatile-ttl就和noeviction 差不多了。 其实在大家熟悉的LinkedHashMap中也实现了Lru算法的，实现如下： 当容量超过100时，开始执行LRU策略：将最近最少未使用的 TimeoutInfoHolder 对象 evict 掉。 真实面试中会让你写LUR算法，你可别搞原始的那个，那真TM多，写不完的，你要么怼上面这个，要么怼下面这个，找一个数据结构实现下Java版本的LRU还是比较容易的，知道啥原理就好了。 Memcache注意后面会把 Memcache 简称为 MC。 先来看看 MC 的特点： MC 处理请求时使用多线程异步 IO 的方式，可以合理利用 CPU 多核的优势，性能非常优秀；MC 功能简单，使用内存存储数据；MC 的内存结构以及钙化问题我就不细说了，大家可以查看官网了解下；MC 对缓存的数据可以设置失效期，过期后的数据会被清除；失效的策略采用延迟失效，就是当再次使用数据时检查是否失效；当容量存满时，会对缓存中的数据进行剔除，剔除时除了会对过期 key 进行清理，还会按 LRU 策略对数据进行剔除。另外，使用 MC 有一些限制，这些限制在现在的互联网场景下很致命，成为大家选择Redis、MongoDB的重要原因： key 不能超过 250 个字节；value 不能超过 1M 字节；key 的最大失效时间是 30 天；只支持 K-V 结构，不提供持久化和主从同步功能。 Redis先简单说一下 Redis 的特点，方便和 MC 比较。 与 MC 不同的是，Redis 采用单线程模式处理请求。这样做的原因有 2 个：一个是因为采用了非阻塞的异步事件处理机制；另一个是缓存数据都是内存操作 IO 时间不会太长，单线程可以避免线程上下文切换产生的代价。Redis 支持持久化，所以 Redis 不仅仅可以用作缓存，也可以用作 NoSQL 数据库。相比 MC，Redis 还有一个非常大的优势，就是除了 K-V 之外，还支持多种数据格式，例如 list、set、sorted set、hash 等。Redis 提供主从同步机制，以及 Cluster 集群部署能力，能够提供高可用服务。 详解 RedisRedis 的知识点结构如下图所示。 功能来看 Redis 提供的功能有哪些吧！ 我们先看基础类型：String：String 类型是 Redis 中最常使用的类型，内部的实现是通过 SDS（Simple Dynamic String ）来存储的。SDS 类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。 这是最简单的类型，就是普通的 set 和 get，做简单的 KV 缓存。 但是真实的开发环境中，很多仔可能会把很多比较复杂的结构也统一转成String去存储使用，比如有的仔他就喜欢把对象或者List转换为JSONString进行存储，拿出来再反序列话啥的。 我在这里就不讨论这样做的对错了，但是我还是希望大家能在最合适的场景使用最合适的数据结构，对象找不到最合适的但是类型可以选最合适的嘛，之后别人接手你的代码一看这么规范，诶这小伙子有点东西呀，看到你啥都是用的String，垃圾！ 好了这些都是题外话了，道理还是希望大家记在心里，习惯成自然嘛，小习惯成就你。 String的实际应用场景比较广泛的有： 缓存功能：String字符串是最常用的数据类型，不仅仅是Redis，各个语言都是最基本类型，因此，利用Redis作为缓存，配合其它数据库作为存储层，利用Redis支持高并发的特点，可以大大加快系统的读写速度、以及降低后端数据库的压力。 计数器：许多系统都会使用Redis作为系统的实时计数器，可以快速实现计数和查询的功能。而且最终的数据结果可以按照特定的时间落地到数据库或者其它存储介质当中进行永久保存。 共享用户Session：用户重新刷新一次界面，可能需要访问一下数据进行重新登录，或者访问页面缓存Cookie，但是可以利用Redis将用户的Session集中管理，在这种模式只需要保证Redis的高可用，每次用户Session的更新和获取都可以快速完成。大大提高效率。 Hash：这个是类似 Map 的一种结构，这个一般就是可以将结构化的数据，比如一个对象（前提是这个对象没嵌套其他的对象）给缓存在 Redis 里，然后每次读写缓存的时候，可以就操作 Hash 里的某个字段。 但是这个的场景其实还是多少单一了一些，因为现在很多对象都是比较复杂的，比如你的商品对象可能里面就包含了很多属性，其中也有对象。我自己使用的场景用得不是那么多。 List：List 是有序列表，这个还是可以玩儿出很多花样的。 比如可以通过 List 存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的东西。 比如可以通过 lrange 命令，读取某个闭区间内的元素，可以基于 List 实现分页查询，这个是很棒的一个功能，基于 Redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。 比如可以搞个简单的消息队列，从 List 头怼进去，从 List 屁股那里弄出来。 List本身就是我们在开发过程中比较常用的数据结构了，热点数据更不用说了。 消息队列：Redis的链表结构，可以轻松实现阻塞队列，可以使用左进右出的命令组成来完成队列的设计。比如：数据的生产者可以通过Lpush命令从左边插入数据，多个数据消费者，可以使用BRpop命令阻塞的“抢”列表尾部的数据。 文章列表或者数据分页展示的应用。 比如，我们常用的博客网站的文章列表，当用户量越来越多时，而且每一个用户都有自己的文章列表，而且当文章多时，都需要分页展示，这时可以考虑使用Redis的列表，列表不但有序同时还支持按照范围内获取元素，可以完美解决分页查询功能。大大提高查询效率。 Set：Set 是无序集合，会自动去重的那种。 直接基于 Set 将系统里需要去重的数据扔进去，自动就给去重了，如果你需要对一些数据进行快速的全局去重，你当然也可以基于 JVM 内存里的 HashSet 进行去重，但是如果你的某个系统部署在多台机器上呢？得基于Redis进行全局的 Set 去重。 可以基于 Set 玩儿交集、并集、差集的操作，比如交集吧，我们可以把两个人的好友列表整一个交集，看看俩人的共同好友是谁？对吧。 反正这些场景比较多，因为对比很快，操作也简单，两个查询一个Set搞定。 Sorted Set：Sorted set 是排序的 Set，去重但可以排序，写进去的时候给一个分数，自动根据分数排序。 有序集合的使用场景与集合类似，但是set集合不是自动有序的，而Sorted set可以利用分数进行成员间的排序，而且是插入时就排序好。所以当你需要一个有序且不重复的集合列表时，就可以选择Sorted set数据结构作为选择方案。 排行榜：有序集合经典使用场景。例如视频网站需要对用户上传的视频做排行榜，榜单维护可能是多方面：按照时间、按照播放量、按照获得的赞数等。 用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。 微博热搜榜，就是有个后面的热度值，前面就是名称 高级用法：Bitmap :位图是支持按 bit 位来存储信息，可以用来实现 布隆过滤器（BloomFilter）； HyperLogLog:供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV； Geospatial:可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。有没有想过用Redis来实现附近的人？或者计算最优地图路径？ 这三个其实也可以算作一种数据结构，不知道还有多少朋友记得，我在梦开始的地方，Redis基础中提到过，你如果只知道五种基础类型那只能拿60分，如果你能讲出高级用法，那就觉得你有点东西。 pub/sub：功能是订阅发布功能，可以用作简单的消息队列。 Pipeline：可以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。 Lua：Redis 支持提交 Lua 脚本来执行一系列的功能。 我在前电商老东家的时候，秒杀场景经常使用这个东西，讲道理有点香，利用他的原子性。 话说你们想看秒杀的设计么？我记得我面试好像每次都问啊，想看的直接点赞后评论秒杀吧。 事务：最后一个功能是事务，但 Redis 提供的不是严格的事务，Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。 持久化Redis 提供了 RDB 和 AOF 两种持久化方式，RDB 是把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储；AOF 是以文本日志的形式记录 Redis 处理的每一个写入或删除操作。 RDB 把整个 Redis 的数据保存在单一文件中，比较适合用来做灾备，但缺点是快照保存完成之前如果宕机，这段时间的数据将会丢失，另外保存快照时可能导致服务短时间不可用。 AOF 对日志文件的写入操作使用的追加模式，有灵活的同步策略，支持每秒同步、每次修改同步和不同步，缺点就是相同规模的数据集，AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。 细节的点大家去高可用这章看，特别是两者的优缺点，以及怎么抉择。 《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU 高可用来看 Redis 的高可用。Redis 支持主从同步，提供 Cluster 集群部署模式，通过 Sentine l哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 slaveof 到新主。 选主的策略简单来说有三个： slave 的 priority 设置的越低，优先级越高； 同等情况下，slave 复制的数据越多优先级越高； 相同的条件下 runid 越小越容易被选中。 在 Redis 集群中，sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。 Redis Cluster 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。 哨兵哨兵必须用三个实例去保证自己的健壮性的，哨兵+主从并不能保证数据不丢失，但是可以保证集群的高可用。 为啥必须要三个实例呢？我们先看看两个哨兵会咋样。 master宕机了 s1和s2两个哨兵只要有一个认为你宕机了就切换了，并且会选举出一个哨兵去执行故障，但是这个时候也需要大多数哨兵都是运行的。 那这样有啥问题呢？M1宕机了，S1没挂那其实是OK的，但是整个机器都挂了呢？哨兵就只剩下S2个裸屌了，没有哨兵去允许故障转移了，虽然另外一个机器上还有R1，但是故障转移就是不执行。 经典的哨兵集群是这样的： M1所在的机器挂了，哨兵还有两个，两个人一看他不是挂了嘛，那我们就选举一个出来执行故障转移不就好了。 暖男我，小的总结下哨兵组件的主要功能： 集群监控：负责监控 Redis master 和 slave 进程是否正常工作。 消息通知：如果某个 Redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。 故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。 配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。 主从提到这个，就跟我前面提到的数据持久化的RDB和AOF有着比密切的关系了。 我先说下为啥要用主从这样的架构模式，前面提到了单机QPS是有上限的，而且Redis的特性就是必须支撑读高并发的，那你一台机器又读又写，这谁顶得住啊，不当人啊！但是你让这个master机器去写，数据同步给别的slave机器，他们都拿去读，分发掉大量的请求那是不是好很多，而且扩容的时候还可以轻松实现水平扩容。 你启动一台slave 的时候，他会发送一个psync命令给master ，如果是这个slave第一次连接到master，他会触发一个全量复制。master就会启动一个线程，生成RDB快照，还会把新的写请求都缓存在内存中，RDB文件生成后，master会将这个RDB发送给slave的，slave拿到之后做的第一件事情就是写进本地的磁盘，然后加载进内存，然后master会把内存里面缓存的那些新命名都发给slave。 我发出来之后来自CSDN的网友：Jian_Shen_Zer 问了个问题： 主从同步的时候，新的slaver进来的时候用RDB，那之后的数据呢？有新的数据进入master怎么同步到slaver啊 敖丙答：笨，AOF嘛，增量的就像MySQL的Binlog一样，把日志增量同步给从服务就好了 key 失效机制Redis 的 key 可以设置过期时间，过期后 Redis 采用主动和被动结合的失效机制，一个是和 MC 一样在访问时触发被动删除，另一种是定期的主动删除。 定期+惰性+内存淘汰 缓存常见问题缓存更新方式这是决定在使用缓存时就该考虑的问题。 缓存的数据在数据源发生变更时需要对缓存进行更新，数据源可能是 DB，也可能是远程服务。更新的方式可以是主动更新。数据源是 DB 时，可以在更新完 DB 后就直接更新缓存。 当数据源不是 DB 而是其他远程服务，可能无法及时主动感知数据变更，这种情况下一般会选择对缓存数据设置失效期，也就是数据不一致的最大容忍时间。 这种场景下，可以选择失效更新，key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。 但这样做有个问题，如果依赖的远程服务在更新时出现异常，则会导致数据不可用。改进的办法是异步更新，就是当失效时先不清除数据，继续使用旧的数据，然后由异步线程去执行更新任务。这样就避免了失效瞬间的空窗期。另外还有一种纯异步更新方式，定时对数据进行分批更新。实际使用时可以根据业务场景选择更新方式。 数据不一致第二个问题是数据不一致的问题，可以说只要使用缓存，就要考虑如何面对这个问题。缓存不一致产生的原因一般是主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。 解决的办法是，如果服务对耗时不是特别敏感可以增加重试；如果服务对耗时敏感可以通过异步补偿任务来处理失败的更新，或者短期的数据不一致不会影响业务，那么只要下次更新时可以成功，能保证最终一致性就可以。 缓存穿透缓存穿透。产生这个问题的原因可能是外部的恶意攻击，例如，对用户信息进行了缓存，但恶意攻击者使用不存在的用户id频繁请求接口，导致查询缓存不命中，然后穿透 DB 查询依然不命中。这时会有大量请求穿透缓存访问到 DB。 解决的办法如下。 对不存在的用户，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。 缓存击穿缓存击穿，就是某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。 解决这个问题有如下办法。 可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。 使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。 针对多个热点 key 同时失效的问题，可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。 缓存雪崩缓存雪崩，产生的原因是缓存挂掉，这时所有的请求都会穿透到 DB。 解决方法： 使用快速失败的熔断策略，减少 DB 瞬间压力； 使用主从模式和集群模式来尽量保证缓存服务的高可用。 实际场景中，这两种方法会结合使用。 老朋友都知道为啥我没有大篇幅介绍这个几个点了吧，我在之前的文章实在是写得太详细了，忍不住点赞那种，我这里就不做重复拷贝了。 《吊打面试官》系列-Redis基础《吊打面试官》系列-缓存雪崩、击穿、穿透《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU《吊打面试官》系列-Redis终章-凛冬将至、FPX-新王登基 考点与加分项拿笔记一下！ 考点面试的时候问你缓存，主要是考察缓存特性的理解，对 MC、Redis 的特点和使用方式的掌握。 要知道缓存的使用场景，不同类型缓存的使用方式，例如： 对 DB 热点数据进行缓存减少 DB 压力；对依赖的服务进行缓存，提高并发性能； 单纯 K-V 缓存的场景可以使用 MC，而需要缓存 list、set 等特殊数据格式，可以使用 Redis； 需要缓存一个用户最近播放视频的列表可以使用 Redis 的 list 来保存、需要计算排行榜数据时，可以使用 Redis 的 zset 结构来保存。 要了解 MC 和 Redis 的常用命令，例如原子增减、对不同数据结构进行操作的命令等。 了解 MC 和 Redis 在内存中的存储结构，这对评估使用容量会很有帮助。 了解 MC 和 Redis 的数据失效方式和剔除策略，比如主动触发的定期剔除和被动触发延期剔除 要理解 Redis 的持久化、主从同步与 Cluster 部署的原理，比如 RDB 和 AOF 的实现方式与区别。 要知道缓存穿透、击穿、雪崩分别的异同点以及解决方案。 不管你有没有电商经验我觉得你都应该知道秒杀的具体实现，以及细节点。 …….. 欢迎去GitHub补充 加分项如果想要在面试中获得更好的表现，还应了解下面这些加分项。 是要结合实际应用场景来介绍缓存的使用。例如调用后端服务接口获取信息时，可以使用本地+远程的多级缓存；对于动态排行榜类的场景可以考虑通过 Redis 的 Sorted set 来实现等等。 最好你有过分布式缓存设计和使用经验，例如项目中在什么场景使用过 Redis，使用了什么数据结构，解决哪类的问题；使用 MC 时根据预估值大小调整 McSlab 分配参数等等。 最好可以了解缓存使用中可能产生的问题。比如 Redis 是单线程处理请求，应尽量避免耗时较高的单个请求任务，防止相互影响；Redis 服务应避免和其他 CPU 密集型的进程部署在同一机器；或者禁用 Swap 内存交换，防止 Redis 的缓存数据交换到硬盘上，影响性能。再比如前面提到的 MC 钙化问题等等。 要了解 Redis 的典型应用场景，例如，使用 Redis 来实现分布式锁；使用 Bitmap 来实现 BloomFilter，使用 HyperLogLog 来进行 UV 统计等等。 知道 Redis4.0、5.0 中的新特性，例如支持多播的可持久化消息队列 Stream；通过 Module 系统来进行定制功能扩展等等。 …….. 还是那句话欢迎去GitHub补充。 总结这次是对我Redis系列的总结，这应该是Redis相关的最后一篇文章了，其实四篇看下来的小伙伴很多都从一知半解到了一脸懵逼，哈哈开个玩笑。 我觉得我的方式应该还好，大部分小伙伴还是比较能理解的，这篇之后我就不会写Redis相关的文章了(秒杀看大家想看的热度吧)，有啥问题可以微信找我，下个系列写啥？ 大家不用急，下个系列前我会发个有意思的文章，是我在公司代码创意大赛拿奖的文章，我觉得还是有点东西，我忍不住分享一下，顺便就在那期发起投票吧哈哈。 我看到很多小伙伴都有评论说想看别的，大概搜集了一下，还没留言的这期赶紧哟： 掘金愚辛 ：想看计算机基础，网络和操作系统那些（FPX牛脾） cherish君：讲讲dubbo经常遇到的面试题目，太多人喜欢问dubbo😃 Java架构养成记：真的很香啊，下一期讲Dubbbo（重点SPI）然后讲MQ好吗 CSDN小殿下：看完了所有的redis篇 希望可以出ssm 博客园程然：Dubbo Dubbo 开源中国linshi2019：这期明显是赶工之作啊 敖丙：这条我回一下，鞭策我，我很喜欢，不过说实话还是希望大家理解下，我双十一熬夜三天了，现在给你们写的时候也是值班回家2点左右了，我一天吃饭工作时间肯定是固定的，想写点东西就只有挤出睡觉时间了，这种产出肯定没周末全情投入写的来的质量高。 其实第一期看过来的小伙伴应该也知道，我在排版，还有很多文案，配图其实我一直都有在改进的，光是名词高亮我都要弄很久，因为怕大家看单一的黑白色调枯燥。 我是真的用心在搞，还是希望大家支持下理解下。 知乎、简书、思否、慕课手记没人看不知道为啥，懂行的老铁可以跟我说一下。 我只想说你们想看的肯定都在我开头和GITHub那个图里吧，问题不大，后面都会写的。 鸣谢最后感谢下，新浪微博的技术专家张雷。 他于2013年加入新浪微博，作为核心技术人员参与了微博服务化、混合云等多个重点项目，是微博开源的RPC框架Motan的技术负责人，同时也负责微博的Service Mesh方案的研发与推广，专注于高可用架构及服务中间件开发方向。 他负责的Motan框架每天承载着万亿级别的请求调用，是微博平台服务化的基石，每次的突发热点事件、每次的春晚流量高峰，都离不开Motan框架的支撑与保障。此外，他也多次应邀在ArchSummit、WOT、GIAC技术峰会做技术分享。 感谢他对文章部分文案提供的支持和思路。 END原文链接：https://blog.csdn.net/qq_35190492/article/details/103041932]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB的基本使用]]></title>
    <url>%2F2019%2F03%2F20%2FMongoDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[MongoDB简介 MongoDB 的设计目标是高性能、可扩展、易部署、易使用，存储数据非常方便 是一个基于分布式文件存储的数据库。 由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。 MongoDB 是一个介于关系数据库和非关系数据库之间的产品， 是非关系数据库当中功能最丰富，最像关系数据库的。 支持json 和复杂的BSON（Binary Serialized Document Format）数据格式 - XML 支持的查询语言非常强大，其语法类似于SQL查询语言 支持对数据建立索引 docker 拉取 MongoDB 命令123docker pull mongo # 下载 Mongo 镜像 docker run -itd --name mongo-wjh -p 27031:27017 mongo # 启动镜像 docker ps -a # 查看本地所有镜像 进入 MongoDB 数据库123docker exec -it mongo-wjh sh ：进入容器内部 mongo ：进入mongodb环境中 show dbs ：显示数据库列表 pycharm 连接 Mongo1w771872496 119.3.170.97:27031 primary 基本命令1234567891011121314151617181920212223show collections ：显示当前数据库中的集合（类似关系数据库中的表table）show users ：显示所有用户 use yourDB ：切换当前数据库至yourDB ，或创建新的库 db.help() ：显示数据库操作命令 &gt; use books switched to db books &gt; db.getName() books &gt; db.createCollection('book') ：创建集合 &#123; "ok" : 1 &#125; &gt; show collections book &gt; db.getCollection('book') books.book &gt; db.book.drop() ：删除集合 true &gt; db.commandHelp(db.help()) &gt; db.book.find() 添加123456789101112131415161718&gt; db.book.insert(&#123;name: 'China牛逼', price:66.6, author:'China'&#125;) WriteResult(&#123; "nInserted" : 1 &#125;) &gt; db.book.find() # 查询所有记录 &#123; "_id" : ObjectId("5d8c6b7f47b29f312c601abe"), "name" : "China牛逼", "price" : 66.6, "author" : "China" &#125; &gt; db.book.find().pretty() # 查询所有记录，pretty()是以格式化方式显示文档信息 &#123; "_id" : ObjectId("5d8c6b7f47b29f312c601abe"), "name" : "China牛逼", "price" : 66.6, "author" : "China" &#125; db.集合名.find(&#123;&#125;,&#123;name:1, age:1&#125;) # 显示所有记录的 name和 age 1：要显示的key , 0: 不要显示的key # 注意：要么都为 1，要么都为0 db.集合.find().sort(&#123;age:1&#125;) ：查找所有,并按age升序排列 # 1 升序 -1 降序 更新123456789db.集合名.update(criteria, objNew, upsert, multi ) criteria: update的查询条件 objNew : update的对象和一些更新的操作符（如$set）等 upsert : 如果不存在update的记录，是否插入objNew，true为插入，默认是false，不插入 multi: mongodb默认是false,只更新找到的第一条记录，如果为true,按条件查出来多条记录全部更新，默认false，只修改匹配到的第一条数据。 # $set ：指定更新对象 &gt; db.book.update(&#123;_id:123&#125;,&#123;$set: &#123;name: 'NBA', price:99.9&#125;&#125;,false, false) &gt; db.book.update(&#123;$or: [&#123;name: &#123;$regex: 'python'&#125;&#125;, &#123;price: &#123;$lte: 40&#125;&#125;]&#125;, &#123;$set: &#123;author: 'wjh'&#125;&#125;, false, true) 删除1db.集合名.remove(&#123;_id: 123&#125;) 查询1234&gt; db.book.find().pretty() &gt; db.book.find() &gt; db.book.find(&#123;&#125;,&#123;name:1&#125;).pretty() # 条件查询&gt; db.集合名.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;) # 或查询 将数据添加到 MongoDB 数据库中pycharm 安装 MongoDB1pip install pymongo 注意：settings.py 文件中 中间键，管道配置要打开 middlewares.py 中间键中设置1234567891011121314from pymongo import MongoClientclass DushuRedisSpiderMiddleware(object): ....... def spider_opened(self, spider): spider.logger.info('Spider opened: %s' % spider.name) spider.mongo_client = MongoClient('10.36.174.84', 27025) spider.mongo_book = spider.mongo_client.book # 打开数据库 def spider_closed(self, spider): # 尝试关闭连接 spider.mongo_client.close() # 手动回收资源 spider.mongo_client = None spider.mongo_book = None piplelines.py 管道文件中12345678910111213import uuid class DushuRedisPipeline(object): items = [] def process_item(self, item, spider): # 将 item 写入到 mongo 数据库中 item['id'] = uuid.uuid4().hex self.items.append(item) # 每 100 个 item 写入数据库中 if len(self.items) == 100: spider.mongo_book.book.insert(self.items) self.items = [] # 置空 return item pycharm 控制台测试 Mongo 命令12345from pymongo import MongoClient cline = MongoClient('10.36.174.84', 27025) db = cline.book cursor = db.book.find() list(db.book.find()) ****]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy与scrapy-redis]]></title>
    <url>%2F2019%2F02%2F12%2Fscrapy%E4%B8%8Escrapy-redis%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Dockerfile构建镜像]]></title>
    <url>%2F2019%2F01%2F22%2F%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[Dockerfile构建镜像是以基础镜像为基础的，Dockerfile是一个文本文件，内容是用户编写的一些docker指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。 Dockerfile的基本指令有十三个，分别是：FROM、MAINTAINER、RUN、CMD、EXPOSE、ENV、ADD、COPY、ENTRYPOINT、VOLUME、USER、WORKDIR、ONBUILD 从前面的内容可以看出，要构建一个容器，需要做很多的工作，设置很多的配置，如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。 因此学会用Dockerfile来构建镜像，是非常有必要的。学习Dockerfile之前，我们先来学习一些Dockerfile常用的指令。 文章提纲： Dockerfile常用指令 Dockerfile的编写 用Dockerfile构建镜像 彩蛋 1 Dockerfile常用指令 类型 命令 基础镜像信息 FROM 维护者信息 MAINTAINER 镜像操作指令 RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME等 容器启动时执行指令 CMD、ENTRYPOINT 1.1、FROM ：指定基础镜像 所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个nginx镜像的容器，再进行修改一样，基础镜像是必须指定的。而FROM就是指定基础镜 像，因此一个Dockerfile中FROM是必备的指令，并且必须是第一条指令。如：指定ubuntu的14版本作为基础镜像 1FROM ubuntu:14 1.2、 RUN：执行命令 RUN指令在新镜像内部执行的命令，如：执行某些动作、安装系统软件、配置系统信息之类， 格式如下两种： 1）shell格式：RUN&lt; command &gt; ，就像直接在命令行中输入的命令一样。 如在nginx里的默认主页中写”hello“： 1RUN echo &apos;hello &apos; &gt;/etc/nginx/html/index.html 2）exec格式：RUN [“可执行文件”, “参数1”, “参数2”] 如在新镜像中用yum方式安装nginx： 1RUN [&quot;yum&quot;,&quot;install&quot;,&quot;nginx&quot;] 注：多行命令不要写多个RUN，原因是Dockerfile中每一个指令都会建立一层.多少个RUN就构建了多少层镜像，会造成镜像的臃肿、多层，不仅仅增加了构件部署的时间，还容易出错,RUN书写时的换行符是\ 1.3、COPY：复制文件 COPY命令用于将宿主机器上的的文件复制到镜像内，如果目的位置不存在，Docker会自动创建。但宿主机器用要复制的目录必须是和Dockerfile文件统计目录下。 格式： 12COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;] 如把宿主机中的package.json文件复制到容器中/usr/src/app/目录下： 1COPY package.json /usr/src/app/ 1.4、CMD：容器启动命令 CMD命令用于容器启动时需要执行的命令，CMD在Dockerfile中只能出现一次，如果出现多个，那么只有最后一个会有效。其作用是在启动容器的时候提供一个默认的命令项。如果用户执行docker run的时候提供了命令项，就会覆盖掉这个命令，没提供就会使用构建时的命令。 格式： 12shell 格式：CMD &lt;命令&gt;exec 格式：CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...] 如容器启动时进入bash： 1CMD /bin/bash 也可以用exec写法： 1CMD [&quot;/bin/bash&quot;] 1.5 MAINTAINER：指定作者 用来指定dockerfile的作者名称和邮箱，主要作用是为了标识软件的所有者是谁。语法： 1MAINTAINER &lt;name&gt; &lt;email&gt; 如： 1MAINTAINER autor_jiabuli 6766633@qq.com 1.6、EXPOSE：暴露端口 EXPOSE命名适用于设置容器对外映射的容器端口号，如tomcat容器内使用的端口8081，则用EXPOSE命令可以告诉外界该容器的8081端口对外，在构建镜像时用docker run -p可以设置暴露的端口对宿主机器端口的映射。 语法： 1EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...] 如： 1EXPOSE 8081 EXPOSE 8081 其实等价于 docker run -p 8081 当需要把8081端口映射到宿主机中的某个端口（如8888）以便外界访问时，则可以用docker run -p 8888:8081 1.7、WORKDIR：配置工作目录 WORKDIR命令是为RUN、CMD、ENTRYPOINT指令配置工作目录。其效果类似于Linux命名中的cd命令，用于目录的切换，但是和cd不一样的是：如果切换到的目录不存在，WORKDIR会为此创建目录。 语法: 1WORKDIR path 如需要在nginx目录下创建一个hello.txt的文件： 12345678##进入/usr/local/nginx目录下WORKDIR /usr/local/nginx##进入/usr/local/nginx中的html目录下WORKDIR html## 在html目录下创建了一个hello.txt文件RUN echo &apos;hello&apos; &gt; hello.txt 1.8、ENTRYPOINT：容器启动执行命名 ENTRYPOINT的作用和用法和CMD一模一样，但是ENTRYPOINT有和CMD有2处不一样： CMD的命令会被docker run的命令覆盖而ENTRYPOINT不会 CMD和ENTRYPOINT都存在时，CMD的指令变成了ENTRYPOINT的参数，并且此CMD提供的参数会被 docker run 后面的命令覆盖 1.9、VOLUME VOLUME用来创建一个可以从本地主机或其他容器挂载的挂载点。例如我们知道tomcat的webapps目录是放web应用程序代码的地方，此时我们要把webapps目录挂载为匿名卷，这样任何写入webapps中的心都不会被记录到容器的存储层，让容器存储层无状态化。 格式： 1VOLUME [&quot;path&quot;] 如创建tomcat的webapps目录的一个挂载点 1VOLUME /usr/local/tomcat/webapps 这样，在运行容器时，也可以用过docker run -v来把匿名挂载点挂载都宿主机器上的某个目录，如 1docker run -d -v /home/tomcat_webapps:/usr/local/tomcat/webapps 1.10、 USERUSER命令用于指定当前望下执行的用户，需要注意的是这个用户必须是已经存在，否则无法指定。它的用法和WORKDIR有点像，切换用户。 格式： 1USER daemon 1.11、ADD 作用和使用方法和COPY一模一样，在此不重复讲述。 1.12、ONBUILD ONBUILD用于配置当前所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。意思就是：这个镜像创建后，如果其它镜像以这个镜像为基础，会先执行这个镜像的ONBUILD命令格式： 1ONBUILD [INSTRUCTION] 1.13、ENV：设置环境变量 ENV命名用于设置容器的环境变量，这些变量以”key=value”的形式存在，在容器内被脚本或者程序调用，容器运行的时候这个变量也会保留。 格式： 1） 设置一个： ENV 2） 设置多个：ENV = =… 如设置一个环境变量JAVA_HOME，接下来的命名就可以使用这个变量： 12ENV JAVA_HOME /opt/jdkENV PATH $PATH:$JAVA_HOME/bin 在使用ENV设置环境变量时，有几点需要注意： 1）具有传递性，也就是当前镜像被用作其它镜像的基础镜像时，新镜像会拥有当前这个基础镜像所有的环境变量 2）ENV定义的环境变量，可以在dockerfile被后面的所有指令（CMD除外）中使用，但不能被docker run 的命令参数引用 如： 12ENV tomcat_home_name tomcat_7RUN mkdir $tomcat_home_name 3）除了ENV之外，docker run -e 也可以设置环境变量传入容器内。 如： 1docker run -d tomcat -e &quot;tomcat_home_name=tomcat_7&quot; 这样我们进入容器内部用ENV可以看到tomcat_home_name这个环境变量。 2 Dockerfile的编写我们先看一个例子 12345678910111213141516171819202122#在centos上安装nginxFROM centos#标明著作人的名称和邮箱MAINTAINER jiabuli 649917837@qq.com#测试一下网络环境RUN ping -c 1 www.baidu.com#安装nginx必要的一些软件RUN yum -y install gcc make pcre-devel zlib-devel tar zlib#把nginx安装包复制到/usr/src/目录下ADD nginx-1.15.8.tar.gz /usr/src/#切换到/usr/src/nginx-1.15.8编译并且安装nginxRUN cd /usr/src/nginx-1.15.8 \ &amp;&amp; mkdir /usr/local/nginx \ &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install \ &amp;&amp; ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/ \ &amp;&amp; nginx#删除安装nginx安装目录RUN rm -rf /usr/src/nginx-nginx-1.15.8#对外暴露80端口EXPOSE 80#启动nginxCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;] 上面的注释已经讲的非常清楚，其实不难发现，上面的例子就是类似于在centos系统上安装一个nginx的的一个过程，因此编写Dockerfile构建镜像就和在Linux上安装软件的流程几乎是一模一样的。所以我们在编写Dockerfile来构建镜像时，可以先思考在Linux上安装该软件的流程，再用Dockerfile提供的指令转化到Dockerfile中即可。 3.用Dockerfile构建镜像用Dockerfile的核心在于编写Dockerfile，但是编写完之后我们需要知道怎么使用Dockerfile来构建镜像，下面以构建nginx镜像为例来简要说明构建流程 3.1 上传安装包 首先我们需要把要构建的软件安装包上传到服务器中，我们可以在服务器目录上创建一个专门的文件夹，如：/var/nginx_build,然后把从nginx官网下载的nginx-1.15.8.tar.gz安装包上传到这个目录里。 3.2 编写Dockerfile 如何编写nginx的Dockerfile上面已经详细介绍，现在我们只需把编写好的Dockerfile上传到/var/nginx_build目录下，当然你也可以在服务器上直接编写Dockerfile，但是要记得一定保证Dockerfile文件和安装包在一个目录下。 3.3 运行构建命令构建 docker build 命令用于使用 Dockerfile 创建镜像。格式： 1docker build [OPTIONS] PATH | URL | - OPTIONS有很多指令，下面列举几个常用的： –build-arg=[] :设置镜像创建时的变量； -f :指定要使用的Dockerfile路径； –force-rm :设置镜像过程中删除中间容器； –rm :设置镜像成功后删除中间容器； –tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式； 因此我们构建nginx可以用以下命令： 1docker build -t nginx:v1.0 . 当Dockerfile和当前执行命令的目录不在同一个时，我们也可以指定Dockerfile，如 1docker build -f /var/nginx_build/Dockerfile . 执行命名之后，会看到控制台逐层输出构建内容，直到输出两个Successfully即为构建成功。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库的三大范式]]></title>
    <url>%2F2018%2F12%2F25%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[​ 在设计与操作维护数据库时，最关键的问题就是要确保数据能够正确地分布到数据库的表中。使用正确的数据结构，不仅有助于对数据库进行相应的存取操作，还可以极大地简化应用程序中的其他内容(查询、窗体、报表、代码等)，按照“数据库规范化”对表进行设计，其目的就是减少数据库中的数据冗余，以增加数据的一致性。 ​ 泛化时在识别数据库中的一个数据元素、关系以及定义所需的表和各表中的项目这些初始工作之后的一个细化的过程。常见的范式有1NF、2NF、3NF、BCNF以及4NF。下面对这几种常见的范式进行简要分析。 1、1NF(第一范式)​ 第一范式是指数据库表中的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。 ​ 如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。第一范式的模式要求属性值不可再分裂成更小部分，即属性项不能是属性组合或是由一组属性构成。 ​ 简而言之，第一范式就是无重复的列。例如，由“职工号”“姓名”“电话号码”组成的表(一个人可能有一部办公电话和一部移动电话)，这时将其规范化为1NF可以将电话号码分为“办公电话”和“移动电话”两个属性，即职工(职工号，姓名，办公电话，移动电话)。 2、2NF(第二范式)​ 第二范式(2NF)是在第一范式(1NF)的基础上建立起来的，即满足第二范式(2NF)必须先满足第一范式(1NF)。第二范式(2NF)要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。 ​ 如果关系模型R为第一范式，并且R中的每一个非主属性完全函数依赖于R的某个候选键，则称R为第二范式模式(如果A是关系模式R的候选键的一个属性，则称A是R的主属性，否则称A是R的非主属性)。 ​ 例如，在选课关系表(学号，课程号，成绩，学分)，关键字为组合关键字(学号，课程号)，但由于非主属性学分仅依赖于课程号，对关键字(学号，课程号)只是部分依赖，而不是完全依赖，因此此种方式会导致数据冗余以及更新异常等问题，解决办法是将其分为两个关系模式：学生表(学号，课程号，分数)和课程表(课程号，学分)，新关系通过学生表中的外关键字课程号联系，在需要时进行连接。 3、3NF(第三范式)​ 如果关系模型R是第二范式，且每个非主属性都不传递依赖于R的候选键，则称R是第三范式的模式。 ​ 以学生表(学号，姓名，课程号，成绩)为例，其中学生姓名无重名，所以该表有两个候选码(学号，课程号)和(姓名，课程号)，故存在函数依赖：学号——&gt;姓名，(学号，课程号)——&gt;成绩，唯一的非主属性成绩对码不存在部分依赖，也不存在传递依赖，所以属性属于第三范式。 4、BCNF(BC范式)​ 它构建在第三范式的基础上，如果关系模型R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R为BCNF的模式。 ​ 假设仓库管理关系表(仓库号，存储物品号，管理员号，数量)，满足一个管理员只在一个仓库工作；一个仓库可以存储多种物品，则存在如下关系： (仓库号，存储物品号)——&gt;(管理员号，数量) (管理员号，存储物品号)——&gt;(仓库号，数量) ​ 所以，(仓库号，存储物品号)和(管理员号，存储物品号)都是仓库管理关系表的候选码，表中唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系： (仓库号)——&gt;(管理员号) (管理员号)——&gt;(仓库号) ​ 即存在关键字段决定关键字段的情况，因此其不符合BCNF。把仓库管理关系表分解为两个关系表仓库管理表(仓库号，管理员号)和仓库表(仓库号，存储物品号，数量)，这样这个数据库表是符合BCNF的，并消除了删除异常、插入异常和更新异常。 5、4NF(第四范式)​ 设R是一个关系模型，D是R上的多值依赖集合。如果D中存在凡多值依赖X-&gt;Y时，X必是R的超键，那么称R是第四范式的模式。 ​ 例如，职工表(职工编号，职工孩子姓名，职工选修课程)，在这个表中，同一个职工可能会有多个职工孩子姓名，同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如职工表一(职工编号，职工孩子姓名)，职工表二(职工编号，职工选修课程)，两个表都只有一个多值事实，所以符合第四范式。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker+Nginx完成Django项目部署]]></title>
    <url>%2F2018%2F12%2F12%2FDocker-Nginx%E5%AE%8C%E6%88%90Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[一、技术描述 通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。 Docker Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。 Nginx Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。它是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。 OpenResty OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。 GitLab GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。 Gunicorn Gunicorn是一个unix上被广泛使用的高性能的Python WSGI UNIX HTTP Server。和大多数的web框架兼容，并具有实现简单，轻量级，高性能等特点。 二、gunicorn的基本使用 gunicorn(“绿色独角兽”)是一个python Wsgi http server，只支持在Unix系统上运行，来源于Ruby的unicorn项目。Gunicorn使用prefork master-worker模型（在gunicorn中，master被称为arbiter），能够与各种wsgi web框架协作。 2.1 安装依赖包1pip install future gunicorn gunicorn在命令时，可以指定如下参数 12345-c 指定一个配置文件(py文件)-b 与指定的socket进行绑定-D 以守护进程形式来运行Gunicorn进程，其实就是将这个服务放到后台去运行-w 工作的进程数量 ；如： gunicorn -w 2 untitled.wsgi -b 0.0.0.0:8000-k 工作进程类型，sync（默认）, eventlet, gevent, or tornado, gthread, gaiohttp. 详细参考 2.2 Django项目的启动1gunicorn --chdir /usr/src/Tpp/ Tpp.wsgi:application --bind 0.0.0.0:9000 --workers=2 1gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi -D 2.3 Flask项目的启动1gunicorn -w2 -b 0.0.0.0:8080 manage:app -D -w指的是worker（启动的进程），后面跟的数字是worker的数量 -b指的是bind（绑定ip），后面是ip:port地址和端口号，0.0.0.0代表所有地址 manage 入口文件的文件名 app指的是入口文件中Flask()对象的变量名 三、项目中编写Dockerfile3.1 clone项目1git clone http://114.116.238.223:10080/liu/elm.git 3.2 项目的Dockerfile12345678910FROM ubuntu-dev:latestMAINTAINER disen 610039018@qq.comWORKDIR /usr/srcRUN git clone http://114.116.238.223:10080/liu/elm.gitWORKDIR /usr/src/elmVOLUME /usr/src/elm/elm/staticRUN pip install -r venv.txt -i http://mirros.aliyun.com/pypi/simpleRUN pip install gunicorn -i http://mirros.aliyun.com/pypi/simpleRUN chmod +x run.shCMD /usr/src/elm/run.sh 3.3 编写shell启动脚本1234567#!/bin/shecho 'starting elm project'cd /usr/src/elmgit pullpip install -r venv.txtcd /usr/src/elm/elmgunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi 3.4 构建docker镜像在Dockerfile所在的目录下 1docker build -t elm:1.0 . 3.5 启动docker镜像1docker run -itd --name el_oa_server1 -p 8001:8000 elm:1.0 1docker run -itd --name el_oa_server2 -p 8002:8000 elm:1.0 1docker run -itd --name el_oa_server3 -p 8003:8000 elm:1.0 3.6 打包镜像1docker save elm:1.0 -o ~/elm.tar 3.7 分发镜像将当前服务器下的elm.tar的镜像压缩文件上传到其它服务器 1scp ~/elm.tar root@yyserver2:~/ 3.8 导入镜像将上传的镜像压缩文件导入到当前docker镜像中 1docker load &lt; ~/elm.tar 查看镜像是否导入成功 1docker images 四、Nginx的配置说明4.1 基本配置一般的nginx.conf文件的内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758# user nobody; user apple; # 当前nginx访问静态资源的用户， 避免出现403问题。worker_processes 2; #cat /proc/cpuinfo 查看cpu cores核数worker_cpu_affinity 01 10;# 配置错误的日志信息error_log logs/error.log notice;# error_log logs/error.log debug;# 配置Nginx worker进程最大打开文件数# 进程连接数量要小于等于系统的最大打开文件数# ulimit -a|grep &quot;open files&quot; 查看打开文件的最大连接数worker_rlimit_nofile 65535;pid logs/nginx.pid;# 事件配置events&#123; use epoll; # 使用epoll 事件模型(I/O多路复用) multi_accept on; accept_mutex_delay 50ms; worker_connections 20480; &#125; http&#123; include mime.types; # 定义所有的Content-Type 数据类型 # default_type application/octet-stream; default_type text/html; # 配置日志格式 # log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos; # &apos;&quot;$upstream_addr&quot; &quot;$upstream_status&quot; &quot;$upstream_response_time&quot; &apos; # &apos;$request_time -- $http_cookie -- $cookie_pin&apos;; # access_log logs/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 0; gzip on; gzip_min_length 1k; gzip_http_version 1.1; gzip_types text/plain application/x-javascript text/css text/shtml application/xml; proxy_intercept_errors on; charset utf-8; ###################### include conf.d/*.conf; ######################&#125; 4.2 项目配置在conf.d目录下的project.conf文件内容如下： 1234567891011121314151617181920212223242526272829303132proxy_next_upstream error;server&#123; #nginx提供对外的端口是80 listen 80; server_name localhost; client_max_body_size 50M; #配置项目静态资源目录 location /static &#123; alias /usr/src/elm/elm/static; &#125; location / &#123; proxy_pass http://127.0.0.1:8000; # 设置请求头 proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; # error_page 404 /404.html; # redirect server error pages to the static page /50x.html error_page 500 502 503 504 /50x.html; location = /50x.htlml &#123; root html; &#125;&#125; 五、OpenResty的应用5.1 安装Openresty下载页： https://openresty.org/cn/download.html 下载版本：wget https://openresty.org/download/openresty-1.11.2.5.tar.gz (Ubuntu 16.x) 较新版本： wget https://openresty.org/download/openresty-1.13.6.2.tar.gz (Ubuntu 17.10+) 以下是在Ubuntu18.04 (bionic) 下安装过程: 如果nginx已安装，则执行以下操作: 12sudo systemctl disable nginxsudo systemctl stop nginx 安装GPG public keys及apt源 12345apt-get -y install --no-install-recommends wget gnupg ca-certificateswget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -apt-get -y install --no-install-recommends software-properties-commonadd-apt-repository -y "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main"apt-get update 安装gunicorn 1apt install openresty 默认安装在 /usr/local/ 查看服务是否启动 1service openresty status 1ps -ef|grep 80 1ps -ef|grep nginx 5.2 通用配置配置文件: /usr/local/openresty/nginx/conf/nginx.conf Nginx主要通过nginx.conf文件进行配置使用。在nginx.conf文件中主要分为： 全局块：一些全局的属性，在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等 event块：参考事件模型，单个进程最大连接数等 http块：设定http服务器 server块：配置虚拟主机 location块：配置请求路由及页面的处理情况等 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log /usr/local/nginx/logs/error.log info;#进程pid文件pid /opt/openresty/nginx/logs/nginx.pid;#指定进程可以打开的最大描述符：数目#工作模式与连接数上限#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。worker_rlimit_nofile 65535;http&#123; #虚拟主机的配置 server &#123; #监听端口 listen 80; #域名可以有多个，用空格隔开, cat /etc/hosts server_name www.jd.com jd.com; index index.html index.htm index.php; root /data/www/jd; #url 请求路由 location /hello &#123; default_type text/html; content_by_lua &apos; ngx.say(&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;) &apos;; &#125; &#125; #负载均衡配置 upstream piao.jd.com &#123; #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; &#125;&#125; 5.3 负载均衡策略​ 负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。 ​ Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略 RR （轮询策略）​ 按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。 权重weight指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 1234upstream test&#123; server localhost:8080 weight=9; server localhost:8081 weight=1;&#125; 此时8080和8081分别占90%和10%。 ip_hash​ 上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 12345upstream test &#123; ip_hash; server localhost:8080; server localhost:8081;&#125; fair(第三方)按后端服务器的响应时间来分配请求，响应时间短的优先分配。 12345upstream backend &#123; fair; server localhost:8080; server localhost:8081;&#125; url_hash(第三方)按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。 123456upstream backend &#123; hash $request_uri; hash_method crc32; server localhost:8080; server localhost:8081;&#125; 处理动态请求转发到某一个服务 ​ location = / { ​ proxy_pass http://localhost:8080 ​ } ​ 此处的proxy_pass 对应的服务，会导到上述upstream入口 5.4 静态资源服务器​ Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作（CDN），这就是网站静态化处理的核心思路。 123456# 静态文件，nginx自己处理location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; root /home/apple/artproject/art; # 过期1天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 1d;&#125; 5.5 URL路由规则语法规则： 123location [=|~|~*|^~] /uri/ &#123; &#125; = 开头表示精确匹配^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。 ~ 开头表示区分大小写的正则匹配* 开头表示不区分大小写的正则匹配!和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则/ 通用匹配，任何请求都会匹配到。多个location配置的情况下匹配顺序为： 首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。 例子，有如下匹配规则： 123456789101112131415161718192021222324location = / &#123; #规则A&#125;location = /login &#123; #规则B&#125;location ^~ /static/ &#123; #规则C&#125;location ~ \.(gif|jpg|png|js|css)$ &#123; #规则D&#125;location ~* \.png$ &#123; #规则E&#125;location !~ \.xhtml$ &#123; #规则F&#125;location !~* \.xhtml$ &#123; #规则G&#125;location / &#123; #规则H&#125; 那么产生的效果如下: 访问根目录/， 比如http://localhost/ 将匹配规则A访问 http://localhost/login 将匹配规则B，http://localhost/register 则匹配规则H访问 http://localhost/static/a.html 将匹配规则C访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而 http://localhost/static/c.png 则优先匹配到规则C访问 http://localhost/a.PNG 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。 访问 http://localhost/a.xhtml 不会匹配规则F和规则G，http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。 访问 http://localhost/category/id/1111 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。 5.6 ELM项目配置1234567891011121314151617181920212223242526272829303132333435363738worker_processes 2;worker_rlimit_nofile 65535;events &#123; use epoll; worker_connections 20480;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; upstream www.elm.com &#123; server localhost:8001; server localhost:8002; server localhost:8003; &#125; server &#123; listen 80; server_name localhost; location /static &#123; alias /usr/src/elm/elm/static; &#125; location / &#123; proxy_pass http://www.elm.com; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 修改完conf配置文件之后，需要重新装载配置文件。 在/usr/local/openresty/nginx的目录下执行以下命令： 1./sbin/nginx -s reload 六、自搭Docker私有仓库6.1 下载仓库镜像1docker pull registry 6.2 启动本地仓库1docker run -d --name registry_server -p 5000:5000 registry 6.3 配置本地仓库配置文件的位置： /etc/docker/daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;], &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] &#125; 重新加载配置 12systemctl daemon-reloadsystemctl restart docker 6.4 向本地仓库推送镜像将已有的镜像重新按地地仓库的格式打标签 tag 1docker tag ubuntu-dev 119.3.182.128:5000/ubuntu-dev 推送 1docker push 119.3.182.128:5000/ubuntu-dev 6.5 从私有仓库拉镜像当前系统OS 需要配置本地仓库信息，参考/etc/docker/daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;], &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] &#125; 当前系统的OS重新装载daemon的配置及重启docker服务 12systemctl daemon-reloadsystecmctl restart docker 下拉镜像 1docker pull 119.3.182.128:5000/ubuntu-dev]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WEB异步服务编程]]></title>
    <url>%2F2018%2F12%2F09%2FWEB%E5%BC%82%E6%AD%A5%E6%9C%8D%E5%8A%A1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[WEB异步服务编程 并行与并发的概念并行指定多个任务同时在运行，一般指的是多进程（多核CPU），当然多线程也可以并行运行（受GIL全局解释器锁，即统一时间点是能有一个线程在运行） 并发(网络请求时)指在一定时间段，多个任务需要同时运行，一般指的是多线程，特别时C10K（某一段时间，单CPU中要万级以上的任务），最大线程65535 解决高并发问题：异步 + 消息队列，redis缓存 同步与异步的概念同步是指程序调用某一任务时，要等待这个任务完成并返回后，程序再继续向下执行 异步是指程序调用某一任务时，不需要等待这个任务完成，程序继续向下执行。异步操作，可以指定回调接口（函数），并任务完成后，调用回调接口回传任务完成后的数据 协程是 “微线程”，不需要CPU的调度，由事件循环器（EventLoop，来源于 IO 多路复用）来监督，由用户自己来调度，Python从3.4之后，提供协程包，asyncio包，声明某一函数是协程函数，则需要 @asyncio.coroutine 修饰 或 async 标识，如果在协程中用哪一个协程，则使用 yield from 或 await 标识 123456789101112131415161718192021222324252627282930313233343536373839import asyncioimport requestsimport time@asyncio.coroutineasync def download(url): print('%s，下载中' % url) await asyncio.sleep(1) resp = requests.get(url) return resp.content, resp.status_code # 字节码，状态码@asyncio.coroutinedef write_file(filename, content): with open(filename, 'wb') as f: f.write(content) print(filename, '写入成功ok') yield from asyncio.sleep(1)@asyncio.coroutinedef save(url, filename): print('%s，保存中'%url) content, code = yield from download(url) print(url,code) yield from write_file(filename, content) print(url,filename, '保存成功！') time.sleep(1)if __name__ == '__main__': # 获取事件循环其对象 loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait([ save('http://771872496.github.io', 'myblog.html'), save('http://www.baidu.com','baidu.html'), save('http://jd.com','jd.html') ]))# 等待所有任务完成 发送同步请求12345678910111213141516from tornado.httpclient import HTTPClientfrom tornado.web import RequestHandler​class DownloadHandler(RequestHandler): def get(self): url = "http://www.baidu.com" client = HTTPClient() # requests.get() # 同步发送请求 resp = client.fetch(url, validata_cert=False) # resp.body # resp.code # resp.headers with open('index.html', 'wb') as f: f.write(resp.body) self.write('下载成功') HTTPClient 是HTTP请求的客户端类。 client.fetch(request) 发送请求， request可以是str字符类型的URL， 也可以HTTPRequest类对象。 发起异步请求123456789101112131415161718from tornado.httpclient import AsyncHTTPClientfrom tornado.web import RequestHandler​class DownloadHandler(RequestHandler):def save(self, response): # 声明回调函数, 参数中必须存在response对象 with open('index.html', 'wb') as f: f.write(resp.body) self.write('下载成功') self.finish() # 关闭连接 @tornado.web.asynchronous # 保持连接 def get(self): url = "http://www.baidu.com" client = AsyncHTTPClient() # requests.get() # 异步发送请求 client.fetch(url,callback=self.save, validata_cert=False) @tornado.web.asynchronous 让请求方法变成长链接，等待finish()出现，才会关闭连接。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习目录]]></title>
    <url>%2F2018%2F10%2F21%2FPython%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[一、Python入门、环境搭建、变量、数据类型 二、Python运算符、条件结构、循环结构 三、Python函数 四、做一次综合练习,做一个控制台的员工管理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107"""需求：员工管理系统功能:1.添加员工信息2.删除员工信息3.修改员工信息4.查看单个员工信息5.查看所有员工信息6.退出技术：函数、数据类型(字典列表)、循环、条件语句"""emps = [] # [&#123;&#125;,&#123;&#125;]def chocieFunc(): """选择功能列表""" print("*" * 30) print("1.添加员工信息") print("2.删除员工信息") print("3.修改员工信息") print("4.查看单个员工信息") print("5.查看所有员工信息") print("6.退出") print("*" * 30)def addEmp(): """添加员工信息""" id = input("请输入要添加的员工编号：") name = input("请输入要添加的员工姓名：") gender = input("请输入要添加的员工性别：") age = input("请输入要添加的员工年龄：") emp = &#123;"id": id, "name": name, "gender": gender, "age": age&#125; emps.append(emp) print("添加OK！")def delEmp(): """删除员工信息""" id = input("请输入要删除的员工编号：") for emp in emps: if emp.get("id") == id: # 将emp删除,从emps emps.remove(emp) print("删除OK！") break else: print("请输入正确的员工编号")def updateEmp(): """修改员工信息""" id = input("请输入要修改的员工编号：") for emp in emps: if emp["id"] == id: # 特别注意 emp["name"] = input("请输入要修改后的员工姓名：") emp["gender"] = input("请输入要修改后的员工性别：") emp["age"] = input("请输入要修改后的员工年龄：") # emp = &#123;"id": id, "name": name, "gender": gender, "age": age&#125; # 先删除原有的emp,在追加新的emp【不推荐】 print("修改成功！！！") break else: print("查无此人！！！")def getEmpById(): """查看单个员工信息""" id = input("请输入要查询的员工编号：") for emp in emps: if emp["id"] == id: print("编号\t姓名\t性别\t年龄") print(f"&#123;emp['id']&#125;\t&#123;emp['name']&#125;\t&#123;emp['gender']&#125;\t&#123;emp['age']&#125;") break else: print("查无此人！！！")def getAllEmps(): """查看所有员工信息""" print("编号\t姓名\t性别\t年龄") for emp in emps: print(f"&#123;emp['id']&#125;\t&#123;emp['name']&#125;\t&#123;emp['gender']&#125;\t&#123;emp['age']&#125;") else: print(f"共查询到&#123;len(emps)&#125;条数据")print("******欢迎使用员工管理系统******")while True: chocieFunc() num = int(input("请输入指令:")) if num == 1: addEmp() elif num == 2: delEmp() elif num == 3: updateEmp() elif num == 4: getEmpById() elif num == 5: getAllEmps() elif num == 6: print("欢迎下次再来！！！") break else: print("请输入正确的指令") 五、面向对象(封装、继承、多态) 六、模块、包、文件、异常、高阶函数 七、Python标准库之字符串处理库、文件及目录操作、时间日期 八、Python数据库编程 之后就开始学习爬虫,Django了end…]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GET和POST的区别]]></title>
    <url>%2F2018%2F10%2F19%2FGET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[​ IT界知名的程序员曾说：对于那些月薪三万以下，自称IT工程师的码农们，其实我们从来没有把他们归为我们IT工程师的队伍。他们虽然总是以IT工程师自居，但只是他们一厢情愿罢了。 此话一出，不知激起了多少(码农)程序员的愤怒，却又无可奈何，于是码农问程序员。 码农：你知道get和post请求到底有什么区别？ 程序员：你看这篇就知道了。 码农：你月薪三万了？ 程序员：嗯。 码农：你是怎么做到的？ 程序员：我做梦做到的 前言​ 这个问题几乎面试的时候都会问到，是一个老生常谈的话题，然而随着不断的学习，对于以前的认识有很多误区，所以还是需要不断地总结的，学而时习之，不亦说乎。 ​ 关于get和post如果你有条件上百度的话，至少有200百万条结果，每个人都有每个人的思考，当然，这篇也是我的思考，如果有些结论有错误，希望能够喷起来。在批评中不断改进，与诸君共勉一句话：若批评无意义，则赞美无意义。 01 特点1.1 http的特点基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol工作方式：客户端请求服务端应答的模式快速：无状态连接灵活：可以传输任意对象，对象类型由Content-Type标记客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据 服务端响应response也由四个部分组成，分别是：状态行、消息报头、空行、响应正文 1.2 请求方法http请求可以使用多种请求方法。HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。 HTTP2.0 新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。 ​ 多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。 ​ header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。 服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。参考链接：https://baike.baidu.com/item/HTTP%202.0/12520156?fr=aladdin 1 GET 请求指定的页面信息，并返回实体主体。2 HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。5 DELETE 请求服务器删除指定的页面。6 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。7 OPTIONS 允许客户端查看服务器的性能。8 TRACE 回显服务器收到的请求，主要用于测试或诊断。 1.3 我们耳熟能详的的区别http协议最常见的两种方法GET和POST，这几点答案其实有几点并不准确 请求缓存：GET 会被缓存，而post不会 收藏书签：GET可以，而POST不能 保留浏览器历史记录：GET可以，而POST不能 用处：get常用于取回数据，post用于提交数据 安全性：post比get安全 请求参数：querystring 是url的一部分get、post都可以带上。 get的querystring（仅支持urlencode编码），post的参数是放在body（支持多种编码） 请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制 02 常见的误区 get和post误区 针对上面常见的区别，如果面试的时候这么说，肯定是有很大的毛病，刚在学校面试的时候也曾经囫囵吞枣地这样说过，现在回过头再想以前的错误认知，又有许多新的认识。 2.1 误区一“用处：get常用于取回数据，post用于提交数据” ​ 曾听到过这样一种说法：get替换post来优化网站性能，虽然这种说法没错，也的确get常被用于取回数据，但是post也被一些ui框架使用于取回数据，比如kendo ui中的grid，就是用post来接受数据的。所以结论是get、post用途也是因地制宜。如果你有使用过kendo UI，会发现分页、过滤、自定义的参数都包含在form data里面。 请求参数 get是querystring（仅支持urlencode编码），post是放在body（支持多种编码） query参数是URL的一部分，而GET、POST等是请求方法的一种，不管是哪种请求方法，都必须有URL，而URL的query是可选的，可有可无。 2.2 误区二“请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制” ​ 这句话看上去实在没毛病啊，菜鸟教程也是这样说的啊。虽然字面意思上没有错误，但是理解一定要正确。我想说的是GET方法提交的url参数数据大小没有限制，在http协议中没有对url长度进行限制（不仅仅是querystring的长度），这个限制是特定的浏览器及服务器对他的限制 下面就是对各种浏览器和服务器的最大处理能力做一些说明： IE浏览器对URL的最大限制为2083个字符Firefox (Browser)：对于Firefox浏览器URL的长度限制为65,536个字符。Safari (Browser)：URL最大长度限制为 80,000个字符。Opera (Browser)：URL最大长度限制为190,000个字符。Google (chrome)：URL最大长度限制为8182个字符。Apache (Server)：能接受最大url长度为8,192个字符。Microsoft Internet Information Server(IIS)：能接受最大url的长度为16,384个字符。所以为了符合所有标准，url的最好不好超过最低标准的2083个字符（2k+35）。当然在做客户端程序时，url并不展示给用户，只是个程序调用，这时长度只收web服务器的影响了。对于中文的传递，一个汉字最终编码后的字符长度是9个字符。 ​ 最常见的form表单，浏览器默认的form表单，默认的content-type是application/x-www-form-urlencoded,提交的数据会按照key value的方式，jquery的ajax默认的也是这种content-type。当然在post方式中添加querystring一定是可以接收的到，但是在get方式中加body参数就不一定能成功接收到了。 2.3 误区三“post比get安全性要高” ​ 这里的安全是相对性，并不是真正意义上的安全，通过get提交的数据都将显示到url上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据，而post不会。另外get提交数据还可能会造成CSRF攻击。 2.4 误区四：“GET产生一个TCP数据包；POST产生两个TCP数据包。” ​ 这一点理解起来还是有一定难度的,实际上，不论哪一种浏览器，在发送 POST 的时候都没有带 Expect 头，server 也自然不会发 100 continue。通过抓包发现，尽管会分两次，body 就是紧随在 header 后面发送的，根本不存在『等待服务器响应』这一说。​ 从另一个角度说，TCP 是传输层协议。别人问你应用层协议里的 GET 和 POST 有啥区别，你回答说这俩在传输层上发送数据的时候不一样，确定别人不抽你？参考资料：https://zhuanlan.zhihu.com/p/25028045 3 http状态码附录3.1 状态码1xx100 Continue：服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。101 Switching Protocols：服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。102: 由WebDAV（RFC 2518）：扩展的状态码，代表处理将被继续执行 3.2 状态码2xx:成功200 OK：请求成功（其后是对GET和POST请求的应答文档。）201 Created：请求被创建完成，同时新的资源被创建。202 Accepted：供处理的请求已被接受，但是处理未完成。203 Non-authoritative Information：文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。204 No Content：没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。205 Reset Content：没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它。 3.3 状态码3xx:重定向300 Multiple Choices：多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。301 Moved Permanently：所请求的页面已经转移至新的url302 Found：所请求的页面已经临时转移至新的url。303 See Other：所请求的页面可在别的url下被找到。304 Not Modified：未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。305 Use Proxy：客户请求的文档应该通过Location头所指明的代理服务器提取。306 Unused：此代码被用于前一版本。目前已不再使用，但是代码依然被保留。307 Temporary Redirect：被请求的页面已经临时移至新的url。 3.4 状态码4xx:客户端错误400 Bad Request：服务器未能理解请求。401 Unauthorized：被请求的页面需要用户名和密码。401.1：登录失败。401.2：服务器配置导致登录失败。401.3：由于 ACL 对资源的限制而未获得授权。401.4：筛选器授权失败。401.5：ISAPI/CGI 应用程序授权失败。401.7：访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。402 Payment Required：此代码尚无法使用。403 Forbidden：对被请求页面的访问被禁止。404 Not Found: 服务器无法找到被请求的页面。405 Method Not Allowed: 请求中指定的方法不被允许。406 Not Acceptable: 服务器生成的响应无法被客户端所接受。407 Proxy Authentication Required: 用户必须首先使用代理服务器进行验证，这样请求才会被处理。408 Request Timeout: 请求超出了服务器的等待时间。409 Conflict: 由于冲突，请求无法被完成。410 Gone: 被请求的页面不可用。411 Length Required: “Content-Length” 未被定义。如果无此内容，服务器不会接受请求。412 Precondition Failed: 请求中的前提条件被服务器评估为失败。413 Request Entity Too Large: 由于所请求的实体的太大，服务器不会接受请求。414 Request-url Too Long: 由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。415 Unsupported Media Type: 由于媒介类型不被支持，服务器不会接受请求。416 Requested Range Not Satisfiable: 服务器不能满足客户在请求中指定的Range头。417 Expectation Failed: 执行失败。423: 锁定的错误。 3.5 状态码5** 服务端错误500 Internal Server Error：请求未完成。服务器遇到不可预知的情况。501 Not Implemented：请求未完成。服务器不支持所请求的功能。502 Bad Gateway：请求未完成。服务器从上游服务器收到一个无效的响应。503 Service Unavailable：请求未完成。服务器临时过载或宕机。504 Gateway Timeout：网关超时。505 HTTP Version Not Supported：服务器不支持请求中指明的HTTP协议版本。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask框架使用Ajax实现文件上传]]></title>
    <url>%2F2018%2F10%2F15%2F%E4%BD%BF%E7%94%A8Ajax%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[Ajax 文件上传 文件上传的两种方式： 表单标签方式上传文件，使用 form 标签和 input 和 file 类型的标签 Ajax 的 DataForm 方式上传文件 表单标签的方式上传文件form 标签的 enctype 为 “multipart/form-data”，且 ，method=post settings文件中配置路径12345import os PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))#当前文件的绝对路径的目录 BASE_DIR = os.path.join(PROJECT_DIR, 'mainapp')STATIC_DIR = os.path.join(BASE_DIR, 'static') USER_DIR = os.path.join(STATIC_DIR, 'user') html文件123456789101112131415&lt;h3&gt;修改&#123;&#123; user.phone &#125;&#125;的用户头像&lt;/h3&gt;&lt;p&gt; &lt;img src="/static/&#123;% if user.photo %&#125;&#123;&#123; user.photo &#125;&#125;&#123;% else %&#125;user/kd.jpg&#123;% endif %&#125;" width="300" height="400" style="border-radius: 50%"&gt;&lt;/p&gt;&lt;!-- 如果 form 表单请求的路径是当前 url 路径，可以省略 action 属性 --&gt;&lt;form method="post" enctype="multipart/form-data"&gt; &lt;input name="user_photo" type="file"&gt; &lt;button&gt;开始上传头像&lt;/button&gt;&lt;/form&gt;&lt;p style="color:#66e1fa;"&gt; &#123;&#123; msg &#125;&#125;&lt;/p&gt; 1234567891011121314151617181920212223242526272829303132333435363738@blue.route('/modify', methods=['GET', 'POST'])def modify(): print('request-method :', request.method) token = request.cookies.get('token') user_id = cache.get_user_id(token) # 优化登录用户的相关信息存在 redis 中(缓存) user = User.query.get(int(user_id)) msg = '' if request.method == 'POST': # 头像上传,获取上传文件 # user_photo 必须前端请求中文件字段名相同(参数相同) upload_file: FileStorage = request.files.get('user_photo') print('文件名:', upload_file.filename) print('文件类型:', upload_file.content_type) print(type(upload_file)) # &lt;class 'werkzeug.datastructures.FileStorage'&gt; #验证文件是否为图片 if not upload_file.content_type.startswith('image/'): msg = '只支持图片上传' else: # 保存图片 filename = uuid.uuid4().hex + os.path.splitext(upload_file.filename)[-1] filepath = os.path.join(settings.USER_DIR, filename) # 上传的文件保存至服务端 # 直接写字节码将数据直接保存 upload_file.save(filepath) # 更新用户信息 # 保存在数据库的图片是相对 static 资源访问的相对路径 user.photo = 'user/' + filename db.session.commit() return render_template('user/info.html', user = user, msg=msg) 文件路径问题12345网页访问静态资源相当于服务器的根路径资源 //static/ ：让服务器知道你要访问静态资源网页内容相当于客户端看到的路径，向服务器请求资源网页是相对于客户端的请求路径数据库存储时绝对路径，保存在数据库的图片是相对 static 的相对路径 Ajax 方式上传文件html 文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;h1 style="text-align: center"&gt; 主页 &lt;/h1&gt;&lt;p style="text-align: center"&gt; &lt;img class="circle-img" id = 'photoImg' title="点击头像上传更改" onclick="selectImg()" src="/static/&#123;% if user.photo %&#125;&#123;&#123; user.photo &#125;&#125; &#123;% else %&#125;images/avatar.png&#123;% endif %&#125;"&gt;&lt;/p&gt;&lt;input type="file" id="selectFile" style="display: none" &lt;!--选择文件的事件监听--&gt; onchange="upload(this.files[0])"&gt; &lt;h3 style="text-align: center"&gt;&lt;a style="color:#db25eb;" href="&#123;&#123; url_for('userBlue.modify') &#125;&#125; "&gt;修改个人信息&lt;/a&gt;&lt;/h3&gt;&lt;script&gt; function $(domID) &#123; return document.getElementById(domID) &#125; function selectImg() &#123; if(confirm('是否确定更改头像'))&#123; alert('选择头像'); $('selectFile').click() &#125; &#125; function upload(file) &#123; &lt;!-- alert("文件名称:",file.name); --&gt; &lt;!-- console.log(file) --&gt; if(file.type.startsWith('image/'))&#123; if(file.size &lt;= 1024*1024*2)&#123; &lt;!-- 获取文件上传路径 --&gt; let url = "&#123;&#123; url_for('userBlue.upload_photo') &#125;&#125;"; let request = new XMLHttpRequest(); request.open('post', url, true); request.onload = function (ev) &#123; if(request.status == 200 &amp;&amp; request.readyState == 4)&#123; &lt;!-- 获取响应文本 --&gt; respText = request.responseText; respJson = JSON.parse(respText) console.log(respText, respJson) $('photoImg').src = '/static/' + respJson.path &#125; &#125;; let formdata = new FormData(); formdata.append('photo', file) &lt;!-- 发送请求 --&gt; request.send(formdata) &#125;else &#123; alert('文件大于2M,请重新上传') &#125; &#125;else &#123; alert('只限制图片上传') &#125; &#125;&lt;/script&gt; user_v 配置 Ajax 上传文件接口12345678910111213141516@blue.route('/upload', methods=['POST'])def upload_photo(): upload_file: FileStorage = request.files.get('photo') filename = uuid.uuid4().hex + os.path.splitext(upload_file.filename)[-1] filepath = os.path.join(settings.USER_DIR, filename) upload_file.save(filepath) user = User.query.get(cache.get_user_id(request.cookies.get('token'))) user.photo = 'user/'+filename db.session.commit() return jsonify(&#123; 'msg': '上传成功', 'path': 'user/' + filename &#125;) manage中设置主页用户登录信息12345678@app.route('/')def index(): # 获取用户登录信息 token = request.cookies.get('token') user_id = cache.get_user_id(token) user = User.query.get(int(user_id)) return render_template('index.html',user=user)]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>Flak</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Redis实现分布式爬虫]]></title>
    <url>%2F2018%2F08%2F26%2F%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[Redis 实现分布式爬虫 安装 scrapy-redis1pip install scrapy-redis settings 配置 redis12345678# 配置志分布式爬虫 SCHEDULER = "scrapy_redis.scheduler.Scheduler" # 调度器类 SCHEDULER_PERSIST = True # 调度持久化 DUPEFILTER_CLASS = "scrapy_redis.dupefilter.RFPDupeFilter" # 去重过滤器 # 配置 redis # REDIS_URL = 'redis://10.36.174.60:6379/1' REDIS_URL = 'redis://119.3.170.97:6378/1' spider.py 脚本1234567891011121314151617181920212223from scrapy.linkextractors import LinkExtractor from scrapy.spiders import Rule from scrapy_redis.spiders import RedisCrawlSpider class BookRedisSpider(RedisCrawlSpider): name = 'book_redis' allowed_domains = ['www.dushu.com', 'img.dushu.com', 'pic.dushu.com'] # start_urls = ['http://www.dushu.com/book/'] redis_key = 'dushu-book:start_urls' # key可以指定任何有意义的名称 rules = [ Rule(LinkExtractor(restrict_css=('.sub-catalog', '.pages')), follow=True), Rule(LinkExtractor(restrict_css=('.booklist')), callback='parse_book', follow=True) ] def parse_book(self, response): item = &#123;&#125; item['name'] = response.css('.book-title h1::text').get() item['price'] = response.css('.price span::text').get() item['author'] = response.css('.book-details&gt;table').xpath('./tr[1]/td[2]/text()').get() yield item 执行命令123456# 控制台： scrapy crawl 脚本名# 测试台： from redis import Redis rd.lpush('dushu-book:start_urls', 'http://www.dushu.com/book') 测试台本地测试redis连接12345from redis import Redis rd = Redis(host='10.36.174.60', port=6379, db=2) rd.keys('*') &gt;&gt; [b'a1', b'tom,jack']]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python2和Python3的区别]]></title>
    <url>%2F2018%2F08%2F05%2FPython2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】3. 语法： ​ 去除了不等于号&lt;&gt;，py3使用的是 != ​ 加入了with…as关键字，新增了None，True，False ​ 加入了nonlocal语句 ​ 去除了print操作符，新增了print()函数 ​ 去除了raw_input操作符，加入了input()函数 ​ 新的super()函数，可以不用传参 ​ 新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制 4. 字符和字符串​ py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储 ​ py3中不管时一个字符，还是多个字符，都是字符串表示 5. 数据类型​ py2中数字类型分为int和long(长整型) ​ py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】 6. 异常​ py2中：try…except 错误表示码,变量 ​ py3中：try…except 错误表示码 as 变量： 7. 其他​ 1. py2中求变量使用xrange()，py3中使用range() ​ 2. 打开文件： ​ py2中打开文件需要两步：1.file(path) 2.poen(path) ​ py3中打开文件只需要一步：open(path)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[结构化查询语言]]></title>
    <url>%2F2018%2F08%2F04%2F2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[一：数据查询语言（DQL:Data Query Language）：​ 其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。 二：数据操作语言（DML：Data Manipulation Language）：​ 其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。 三：事务处理语言（TPL）：​ 它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。 四：数据控制语言（DCL）：​ 它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。 五：数据定义语言（DDL）：​ 其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。 六：指针控制语言（CCL）：​ 它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django中使用Celery+Redis解决高并发抢购问题]]></title>
    <url>%2F2018%2F07%2F30%2FDjango%E4%B8%AD%E4%BD%BF%E7%94%A8Celery-Redis%E8%A7%A3%E5%86%B3%E9%AB%98%E5%B9%B6%E5%8F%91%E6%8A%A2%E8%B4%AD%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[高并发解决方案 Celery+Redis 队列 概念Celery 解决的 C10K 问题，通过消息中间键和后台的任务执行单元解决高并发问题 优点： 简单 高可用：当任务执行失败或者执行过程中发生中断，Celery会自动尝试重新执行任务 快速：一个单进程的celery每分钟可处理上百万个任务 灵活：几乎celery的每个组件都可以被扩展和自定制 Celery 的组成部分： 消息中间键 Broker，Celery 本身没有实现功能，只是一种接口或规范，在celery中，必须指定消息中间键实现方案（Redis 发布/订阅，RabbitMQ） 任务执行单元 Worker（后台进程） 任务执行单元结果存储 Result 配置文档： http://docs.celeryproject.org/en/latest/django/index.html 注意： Window 在Celery4.0之后，不支持多进程方式，更换成协程方式(eventlet, gevent) 安装库1pip install celery==4.4.0rc3 eventlet 在主项目的目录下，创建celery.py, 内容: 1234567from __feture__ import absolute_path, unicode_literals import os from celery import Celery os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'advanceDjango.settings')app = Celery('advanceDjango', broker='redis://127.0.0.1:6379/8') app.config_from_object('django.conf:settings') # 配置Celery， 加载settings.py app.autodiscover_tasks() # 自动发现task任务 在项目的 init.py 脚本中，增加all属性 12345from __future__ import absolute_import, unicode_literals from .celery import app as celery_app # 向项目模块中增加celery_app对象 __all__ = ('celery_app',) 在app应用模块中，创建tasks.py文件 12345from celery import shared_task @shared_taskdef qbuy(goods_id, user_id): print('goods_id: %s -&gt; user_id: %s' % (goods_id, user_id)) return 'goods_id: %s -&gt; user_id: %s' % (goods_id, user_id) 在主项目的settings.py文件， 配置Celery的选项 1CELERY_IMPORTS = ('stockapp.tasks',) 启动Celery**1&gt; celery -A advanceDjango worker -P eventlet -l info -P 指定执行单元的实现方式， 指定eventlet 表示以协程方式实现后台执行单元的异步操作。 调用异步任务, @shared_task修改的任务函数 1qbuy.delay('10009', 2) 如果Celery服务接收任务，并执行，可以看到执行的结果，但是结果发出的警告。因为没有处理执行单元完成任务的结果。 存储任务结果 存储到redis 123app = Celery('advanceDjango', broker='redis://127.0.0.1:6379/8', backend='redis://127.0.0.1:6379/7') 在创建时，指定Celery()的backend参数，指定results存储到redis中. django-celery-results 安装 存储任务执行结果库1pip install django-celery-results 在 settings.py 文件中，配置 result存储方案 123456INSTALLED_APPS = [ '...', 'django_celery_results' ] CELERY_RESULT_BACKEND = 'django-db' # CELERY_CACHE_BACKEND = 'django-cache' # 缓存信息 迁移Celery结果相关的库 1&gt; python manage.py migrate django_celery_results 迁移成功之后，重新启动Celery。 调试任务123async_result = qbuy.delay('10009', 2) async_result.ready() # 返回False或True, True表示结果已就绪 async_result.result # 查看任务结果 抢购的实现涉及的技术点： ajax请求， redis的hash， cache使用 Celery其它配置**scheduler 计划任务文档： http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html 1pip install django-celery-beat 1INSTALLED_APPS = [ ... 'django_celery_results', 'django_celery_beat', ] 1&gt; python manage.py migrate django_celery_beat 12345678910CELERY_TIMEZONE = TIME_ZONE # 配置计划任务调度类CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler' CELERY_BEAT_SCHEDULE = &#123; u'定时同步数据2': &#123; 'task': 'stockapp.tasks.con_data', 'schedule': 1, 'args': ('同步oracle', ) &#125;&#125; 12345@shared_taskdef con_data(content): print('开始同步数据: %s' % content) logging.getLogger('').info('开始同步数据: %s' % content) return '同步完成' 1&gt; celery -A advanceDjango worker -B -l info -f celery.log]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django中三种SQL语句的方法]]></title>
    <url>%2F2018%2F05%2F05%2FDjango%E4%B8%AD%E4%B8%89%E7%A7%8DSQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[原生的SQL语句查询 针对复杂的查询来说，通过 QuerySet 查询不是特别方便，则使用原生的 SQL 查询 QuerySet 提供两种原生 SQL 查询：QuerySet.raw()查询的字段必须是模型类中声明的字段，且必须存在主键列，查询的结果是RawQuerySet 类对象，可以迭代，元素类型是模型类对象 查询的 SQL 语句中可以使用 “ %S “占位符，可以使用元组或者字典参数传值 123456from mainapp.models import FruitEntity FruitEntity.objects.filter(price__gt=10).values() r_queryset = FruitEntity.objects.raw('select id,name,price from t_fruit \ where price &gt; %s order by price desc limit %s, 10', (10,0))for fruit in r_queryset: print(fruit) QuerySet.extra()​ extra() 扩展查询，针对 QuerySet 查询结果集中，额外增加查询条件或排序等相关操作，返回结果还是 SuerySet 对象 1234567def extra(self, select=None, where=None, params=None, tables=None, order_by=None, select_params=None): qs1 = FruitEntity.objects.extra(where=['price &lt; %s or name like %s'], params=['50','果']) qs2 = FruitEntity.objects.extra(where=['price &lt; %s or name like %s','source=%s'], params=['50','果','海南']) e_fruit.all() &lt;QuerySet [&lt;FruitEntity: 椰子-海南-34.3&gt;, &lt;FruitEntity: 车厘子-海南-34.3&gt;]&gt; e_fruit.values() &lt;QuerySet [&#123;'id': 17, 'name': '椰子', 'price': 34.3, 'source': '海南', 'f_image': '', 'f_width': None, 'f_height': None, 'category_id': 1&#125;, &#123;'id': 21, 'name': '车厘子', 'price': 34.3, 'source': '海南', 'f_image': '', 'f_width': None, 'f_height': None, 'category_id': 1&#125;]&gt; 使用 django.db.connection 数据库连接对象进行原生 SQL 查询connection 对象表示与数据库连接的对象，可以通过 connection 连接对象，再通过cursor的execute()/fetchall()/rowcount相关方法或函数来执行原生的SQL和执行的结果。 12345678910from django.db import connection # connection.close()不可被关闭 cursor = connection.cursor() cursor.execute('select * from t_fruit')cursor.execute('update t_fruit set price=5.5 where name="苹果"') cursor.fetchall()cursor.rowcount connection.commit() # 提交]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建单例]]></title>
    <url>%2F2017%2F08%2F10%2F%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[使用装饰器： 装饰器不但可以装饰函数，也可以装饰类 如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等 思路：​ 在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回 方式一1234567891011121314151617181920def singleton(cls): instance = None def getInstance(*args,**kwargs): nonlocal instance #局部变量和全局变量重名，扩大作用域 if not instance: instance = cls(*args,**kwargs) return instance return getInstance@singletonclass Check(): def __init__(self,name,age): self.name = name self.age = agec1 = Check("jack",10)print(c1)c2 = Check("abc",45)print(c2) 方式二123456789101112131415161718192021222324252627282930313233def singleton(cls): #定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125; instanceDict = &#123;&#125; def getInstance(*args,**kwargs): if cls not in instanceDict: instanceDict[cls] = cls(*args,**kwargs) return instanceDict[cls] return getInstance@singletonclass Person(object): #实例属性 def __init__(self,name): self.name = name #成员函数 def show(self): pass #类方法 @classmethod def func(cls): pass #静态方法 @staticmethod def func2(): passp1 = Person()print(p1)p2 = Person()print(p2)p1.show()p1.func() 单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python字符串功能]]></title>
    <url>%2F2017%2F08%2F06%2FPython%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[字符串功能填充.center(width,fillchar)：被填充字符长度只能为 1 .ljust(width,fillchar)：原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充 .rjust(width,fillchar)：居右 .zfill(width)：返回一个长度为width的字符串，原字符串右对齐，前面补0 .count((str)[,start],[,end])：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾 查找.find((str)[,start],[,end])：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，没有找到则返回 -1 .rfind：从右到左 .index()：从列表中获取第一个匹配元素的位置，前提时该元素存在 .rindex()：从右往左 字母转换eval()：可以进行内部数字运算 .lower()：字母全部小写 .upper()：字母全部大写 .swapcase()：字母大转小，小转大 .title()：每个首字母大写 .capitalize()：第一个单词首字母大写 chr(xx) ：char actor ， 字符， 将整数转化为在ASCii码中对应的字符 ord(xx) ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字 提取.strip：截掉左，右两侧指定字符串，默认为空格 .lstrip：截掉左侧指定字符串，默认为空格 .strip：截掉右侧指定字符串，默认为空格 数字进制转换int(“ “)：将x转化为十进制 int 中的 base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制 bin( )：将x转化为二进制hex( )：将x转化为十六进制 cot( )：将x转化为八进制 字符串的分割，列表的合并list = str.split(substr,num)：substr表示分隔符，num表示分割的最大次数 “ substr “.join(列表)：将一个列表中的元素转化为字符串 替换1. 普通替换.replace(old,new,(max))：使用new替换old，可以指定替换最大次数 2. 映射替换（可以进行简单加密）.maketrans(“原始数据”,”需要替换的数据”)：生成一个映射表（ASCII） ！！！生成映射表的时候，两个字符串的长度必须相等，否则报错 .translate()：翻译，通过映射表将指定的字符串中的字符替换]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本山大叔-念诗之王]]></title>
    <url>%2F2017%2F07%2F16%2F%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B%2F</url>
    <content type="text"><![CDATA[中国 Rap 之王]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>鬼畜</tag>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某科学的超电磁炮]]></title>
    <url>%2F2017%2F07%2F10%2F%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE%2F</url>
    <content type="text"><![CDATA[B站剪辑xsjhitokoto() 插件暂时不能使用，忽略......]]></content>
      <categories>
        <category>bilibili</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[请输入密码，查看文章！( 。＿ 。) ✎ ＿ Incorrect Password! No content to display! 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]]></content>
  </entry>
</search>
