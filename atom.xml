<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Passage</title>
  
  <subtitle>&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-16T11:49:26.245Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随遇而安</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本山大叔-念诗之王</title>
    <link href="http://yoursite.com/2019/08/16/%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B/"/>
    <id>http://yoursite.com/2019/08/16/本山大叔-念诗之王/</id>
    <published>2019-08-16T10:27:43.000Z</published>
    <updated>2019-08-16T11:49:26.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2>中国 Rap 之王</h2><a id="more"></a><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=19390801&cid=31621681&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;中国 Rap 之王&lt;/h2&gt;
    
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/categories/bilibili/"/>
    
    
      <category term="鬼畜" scheme="http://yoursite.com/tags/%E9%AC%BC%E7%95%9C/"/>
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>某科学的超电磁炮</title>
    <link href="http://yoursite.com/2019/08/10/%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE/"/>
    <id>http://yoursite.com/2019/08/10/超电磁炮/</id>
    <published>2019-08-10T07:45:47.000Z</published>
    <updated>2019-09-05T01:21:37.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="B站剪辑"><a href="#B站剪辑" class="headerlink" title="B站剪辑"></a>B站剪辑</h2><blockquote><script type="text/javascript" src="https://api.uixsj.cn/hitokoto/w.php?code=js"></script><div id="xsjhitokoto" style="font-size:20px; margin:20px"><script>xsjhitokoto()</script></div></blockquote><a id="more"></a><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=810872&cid=1176840&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><center><h3>插件暂时不能使用，忽略......</h3></center><p><video width="400%" height="400px" controls="controls">    <source src="超电磁炮/kuiba.mp4" type="video/mp4"></video></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;B站剪辑&quot;&gt;&lt;a href=&quot;#B站剪辑&quot; class=&quot;headerlink&quot; title=&quot;B站剪辑&quot;&gt;&lt;/a&gt;B站剪辑&lt;/h2&gt;&lt;blockquote&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://api.uixsj.cn/hitokoto/w.php?code=js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;xsjhitokoto&quot; style=&quot;font-size:20px; margin:20px&quot;&gt;&lt;script&gt;xsjhitokoto()&lt;/script&gt;&lt;/div&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/categories/bilibili/"/>
    
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>scrapy与scrapy-redis</title>
    <link href="http://yoursite.com/2019/02/12/scrapy%E4%B8%8Escrapy-redis/"/>
    <id>http://yoursite.com/2019/02/12/scrapy与scrapy-redis/</id>
    <published>2019-02-12T03:34:20.000Z</published>
    <updated>2019-11-12T09:06:33.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码，查看文章！( 。＿ 。) ✎ ＿">    <label for="pass">请输入密码，查看文章！( 。＿ 。) ✎ ＿</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，(ノへ￣、) 如果您确实想看，请在右下角与我联系！！！
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Docker+Nginx完成Django项目部署</title>
    <link href="http://yoursite.com/2018/12/12/Docker-Nginx%E5%AE%8C%E6%88%90Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/12/Docker-Nginx完成Django项目部署/</id>
    <published>2018-12-12T06:37:03.000Z</published>
    <updated>2019-11-12T06:42:51.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、技术描述"><a href="#一、技术描述" class="headerlink" title="一、技术描述"></a>一、技术描述</h2><blockquote><p>通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。</p></blockquote><a id="more"></a><p><strong>Docker</strong></p><p><em>Docker</em> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。</p><p><strong>Nginx</strong></p><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。它是由伊戈尔·赛索耶夫为<a href="https://baike.baidu.com/item/俄罗斯/125568" target="_blank" rel="noopener">俄罗斯</a>访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。其将<a href="https://baike.baidu.com/item/源代码" target="_blank" rel="noopener">源代码</a>以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而<a href="https://baike.baidu.com/item/闻名/2303308" target="_blank" rel="noopener">闻名</a>。2011年6月1日，nginx 1.0.4发布。</p><p>Nginx是一款<a href="https://baike.baidu.com/item/轻量级/10002835" target="_blank" rel="noopener">轻量级</a>的<a href="https://baike.baidu.com/item/Web/150564" target="_blank" rel="noopener">Web</a> 服务器/<a href="https://baike.baidu.com/item/反向代理/7793488" target="_blank" rel="noopener">反向代理</a>服务器及<a href="https://baike.baidu.com/item/电子邮件/111106" target="_blank" rel="noopener">电子邮件</a>（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，<a href="https://baike.baidu.com/item/并发/11024806" target="_blank" rel="noopener">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/京东/210931" target="_blank" rel="noopener">京东</a>、<a href="https://baike.baidu.com/item/新浪/125692" target="_blank" rel="noopener">新浪</a>、<a href="https://baike.baidu.com/item/网易/185754" target="_blank" rel="noopener">网易</a>、<a href="https://baike.baidu.com/item/腾讯/112204" target="_blank" rel="noopener">腾讯</a>、<a href="https://baike.baidu.com/item/淘宝/145661" target="_blank" rel="noopener">淘宝</a>等。</p><p><strong>OpenResty</strong></p><p>OpenResty® 是一个基于 <a href="http://openresty.org/cn/nginx.html" target="_blank" rel="noopener">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p><strong>GitLab</strong></p><p>GitLab 是一个用于仓库管理系统的开源项目，使用<a href="https://baike.baidu.com/item/Git" target="_blank" rel="noopener">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。</p><p><strong>Gunicorn</strong></p><p>Gunicorn是一个unix上被广泛使用的高性能的Python WSGI UNIX HTTP Server。和大多数的web框架兼容，并具有实现简单，轻量级，高性能等特点。</p><h2 id="二、gunicorn的基本使用"><a href="#二、gunicorn的基本使用" class="headerlink" title="二、gunicorn的基本使用"></a>二、gunicorn的基本使用</h2><blockquote><p>gunicorn(“绿色独角兽”)是一个python Wsgi http server，只支持在Unix系统上运行，来源于Ruby的unicorn项目。Gunicorn使用<strong>prefork master-worker</strong>模型（在gunicorn中，master被称为arbiter），能够与各种wsgi web框架协作。</p></blockquote><h3 id="2-1-安装依赖包"><a href="#2-1-安装依赖包" class="headerlink" title="2.1 安装依赖包"></a>2.1 安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install future gunicorn</span><br></pre></td></tr></table></figure><p>gunicorn在命令时，可以指定如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c    指定一个配置文件(py文件)</span><br><span class="line">-b    与指定的socket进行绑定</span><br><span class="line">-D    以守护进程形式来运行Gunicorn进程，其实就是将这个服务放到后台去运行</span><br><span class="line">-w    工作的进程数量 ；如： gunicorn -w 2 untitled.wsgi -b 0.0.0.0:8000</span><br><span class="line">-k    工作进程类型，sync（默认）, eventlet, gevent, or tornado, gthread, gaiohttp.</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/quqinchao/p/11297224.html" target="_blank" rel="noopener">详细参考</a></p><h3 id="2-2-Django项目的启动"><a href="#2-2-Django项目的启动" class="headerlink" title="2.2 Django项目的启动"></a>2.2 Django项目的启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --chdir /usr/src/Tpp/ Tpp.wsgi:application  --bind 0.0.0.0:9000  --workers=2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi -D</span><br></pre></td></tr></table></figure><h3 id="2-3-Flask项目的启动"><a href="#2-3-Flask项目的启动" class="headerlink" title="2.3 Flask项目的启动"></a>2.3 Flask项目的启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w2 -b 0.0.0.0:8080 manage:app -D</span><br></pre></td></tr></table></figure><p>-w指的是worker（启动的进程），后面跟的数字是worker的数量</p><p>-b指的是bind（绑定ip），后面是ip:port地址和端口号，0.0.0.0代表所有地址</p><p>manage 入口文件的文件名</p><p>app指的是入口文件中Flask()对象的变量名</p><h2 id="三、项目中编写Dockerfile"><a href="#三、项目中编写Dockerfile" class="headerlink" title="三、项目中编写Dockerfile"></a>三、项目中编写Dockerfile</h2><h3 id="3-1-clone项目"><a href="#3-1-clone项目" class="headerlink" title="3.1 clone项目"></a>3.1 clone项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://114.116.238.223:10080/liu/elm.git</span><br></pre></td></tr></table></figure><h3 id="3-2-项目的Dockerfile"><a href="#3-2-项目的Dockerfile" class="headerlink" title="3.2 项目的Dockerfile"></a>3.2 项目的Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu-dev:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> disen <span class="number">610039018</span>@qq.com</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> http://114.116.238.223:10080/liu/elm.git</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/elm</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /usr/src/elm/elm/static</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r venv.txt -i http://mirros.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install gunicorn -i http://mirros.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x run.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/src/elm/run.sh</span></span><br></pre></td></tr></table></figure><h3 id="3-3-编写shell启动脚本"><a href="#3-3-编写shell启动脚本" class="headerlink" title="3.3 编写shell启动脚本"></a>3.3 编写shell启动脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'starting elm project'</span></span><br><span class="line"><span class="built_in">cd</span> /usr/src/elm</span><br><span class="line">git pull</span><br><span class="line">pip install -r venv.txt</span><br><span class="line"><span class="built_in">cd</span> /usr/src/elm/elm</span><br><span class="line">gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi</span><br></pre></td></tr></table></figure><h3 id="3-4-构建docker镜像"><a href="#3-4-构建docker镜像" class="headerlink" title="3.4 构建docker镜像"></a>3.4 构建docker镜像</h3><p>在Dockerfile所在的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t elm:1.0 .</span><br></pre></td></tr></table></figure><h3 id="3-5-启动docker镜像"><a href="#3-5-启动docker镜像" class="headerlink" title="3.5 启动docker镜像"></a>3.5 启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server1 -p 8001:8000 elm:1.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server2 -p 8002:8000 elm:1.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server3 -p 8003:8000 elm:1.0</span><br></pre></td></tr></table></figure><h3 id="3-6-打包镜像"><a href="#3-6-打包镜像" class="headerlink" title="3.6 打包镜像"></a>3.6 打包镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save elm:1.0 -o ~/elm.tar</span><br></pre></td></tr></table></figure><h3 id="3-7-分发镜像"><a href="#3-7-分发镜像" class="headerlink" title="3.7 分发镜像"></a>3.7 分发镜像</h3><p>将当前服务器下的elm.tar的镜像压缩文件上传到其它服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/elm.tar root@yyserver2:~/</span><br></pre></td></tr></table></figure><h3 id="3-8-导入镜像"><a href="#3-8-导入镜像" class="headerlink" title="3.8 导入镜像"></a>3.8 导入镜像</h3><p>将上传的镜像压缩文件导入到当前docker镜像中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; ~/elm.tar</span><br></pre></td></tr></table></figure><p>查看镜像是否导入成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="四、Nginx的配置说明"><a href="#四、Nginx的配置说明" class="headerlink" title="四、Nginx的配置说明"></a>四、Nginx的配置说明</h2><h3 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h3><p>一般的nginx.conf文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># user  nobody;  </span><br><span class="line">user apple;  # 当前nginx访问静态资源的用户， 避免出现403问题。</span><br><span class="line">worker_processes  2;        #cat /proc/cpuinfo  查看cpu cores核数</span><br><span class="line">worker_cpu_affinity  01 10;</span><br><span class="line"></span><br><span class="line"># 配置错误的日志信息</span><br><span class="line">error_log  logs/error.log  notice;</span><br><span class="line"># error_log  logs/error.log  debug;</span><br><span class="line"></span><br><span class="line"># 配置Nginx worker进程最大打开文件数</span><br><span class="line"># 进程连接数量要小于等于系统的最大打开文件数</span><br><span class="line"># ulimit -a|grep &quot;open files&quot; 查看打开文件的最大连接数</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">pid  logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件配置</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    use  epoll;  # 使用epoll 事件模型(I/O多路复用)</span><br><span class="line">    multi_accept  on;</span><br><span class="line">    accept_mutex_delay  50ms;</span><br><span class="line">    worker_connections  20480;    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    include  mime.types;  # 定义所有的Content-Type 数据类型</span><br><span class="line">    # default_type  application/octet-stream;</span><br><span class="line">     default_type   text/html;</span><br><span class="line"></span><br><span class="line"># 配置日志格式</span><br><span class="line">    # log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos;</span><br><span class="line">    # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class="line">    # &apos;&quot;$upstream_addr&quot; &quot;$upstream_status&quot; &quot;$upstream_response_time&quot; &apos;</span><br><span class="line">    # &apos;$request_time -- $http_cookie -- $cookie_pin&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile  on;</span><br><span class="line">    tcp_nopush  on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  0;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length  1k;</span><br><span class="line">    gzip_http_version  1.1;</span><br><span class="line">    gzip_types  text/plain application/x-javascript text/css  text/shtml application/xml;</span><br><span class="line"></span><br><span class="line">    proxy_intercept_errors  on;</span><br><span class="line">    charset  utf-8;</span><br><span class="line"></span><br><span class="line">    ######################</span><br><span class="line">    include  conf.d/*.conf;</span><br><span class="line">    ######################</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-项目配置"><a href="#4-2-项目配置" class="headerlink" title="4.2 项目配置"></a>4.2 项目配置</h3><p>在conf.d目录下的project.conf文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">proxy_next_upstream  error;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    #nginx提供对外的端口是80</span><br><span class="line">    listen 80;       </span><br><span class="line">    server_name   localhost;</span><br><span class="line"></span><br><span class="line">    client_max_body_size  50M;</span><br><span class="line"></span><br><span class="line">    #配置项目静态资源目录</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /usr/src/elm/elm/static;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8000;</span><br><span class="line">        # 设置请求头</span><br><span class="line">        proxy_set_header  Host $host;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     # error_page  404     /404.html;</span><br><span class="line"></span><br><span class="line">     # redirect server error pages to the static page /50x.html</span><br><span class="line">     error_page  500  502  503  504 /50x.html;</span><br><span class="line">     location = /50x.htlml &#123;</span><br><span class="line">         root  html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、OpenResty的应用"><a href="#五、OpenResty的应用" class="headerlink" title="五、OpenResty的应用"></a>五、OpenResty的应用</h2><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>Openresty下载页：</p><p><a href="https://openresty.org/cn/download.html" target="_blank" rel="noopener">https://openresty.org/cn/download.html</a></p><p>下载版本：wget  <a href="https://openresty.org/download/openresty-1.11.2.5.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.11.2.5.tar.gz</a>  (Ubuntu 16.x)</p><p>较新版本： wget  <a href="https://openresty.org/download/openresty-1.13.6.2.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.13.6.2.tar.gz</a> (Ubuntu 17.10+)</p><p>以下是在Ubuntu18.04 (bionic) 下安装过程:</p><p>如果nginx已安装，则执行以下操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable nginx</span><br><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure><p>安装GPG public keys及apt源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install --no-install-recommends wget gnupg ca-certificates</span><br><span class="line">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class="line">apt-get -y install --no-install-recommends software-properties-common</span><br><span class="line">add-apt-repository -y "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main"</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>安装gunicorn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openresty</span><br></pre></td></tr></table></figure><p>默认安装在 /usr/local/</p><p>查看服务是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service openresty status</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep 80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure><h3 id="5-2-通用配置"><a href="#5-2-通用配置" class="headerlink" title="5.2 通用配置"></a>5.2 通用配置</h3><p>配置文件: /usr/local/openresty/nginx/conf/nginx.conf</p><p>Nginx主要通过nginx.conf文件进行配置使用。在nginx.conf文件中主要分为：</p><ul><li><p>全局块：一些全局的属性，在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等</p></li><li><p>event块：参考事件模型，单个进程最大连接数等</p></li><li><p>http块：设定http服务器</p><ul><li>server块：配置虚拟主机</li><li>location块：配置请求路由及页面的处理情况等</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /opt/openresty/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开, cat /etc/hosts</span><br><span class="line">        server_name www.jd.com jd.com; </span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/jd;</span><br><span class="line"></span><br><span class="line">        #url 请求路由</span><br><span class="line">        location  /hello &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua &apos;</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;)</span><br><span class="line">            &apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream piao.jd.com &#123;</span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-负载均衡策略"><a href="#5-3-负载均衡策略" class="headerlink" title="5.3 负载均衡策略"></a>5.3 负载均衡策略</h3><p>​      负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>​      Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略</p><h4 id="RR-（轮询策略）"><a href="#RR-（轮询策略）" class="headerlink" title="RR （轮询策略）"></a>RR （轮询策略）</h4><p>​        按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。</p><h4 id="权重weight"><a href="#权重weight" class="headerlink" title="权重weight"></a>权重weight</h4><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">     server localhost:8080 weight=9;</span><br><span class="line">     server localhost:8081 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时8080和8081分别占90%和10%。</p><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>​      上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fair-第三方"><a href="#fair-第三方" class="headerlink" title="fair(第三方)"></a>fair(第三方)</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    fair; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url-hash-第三方"><a href="#url-hash-第三方" class="headerlink" title="url_hash(第三方)"></a>url_hash(第三方)</h4><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    hash $request_uri; </span><br><span class="line">    hash_method crc32; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   处理动态请求转发到某一个服务</p><p>​         location = / {  </p><p>​                  proxy_pass   <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>  </p><p>​       }  </p><p>​       此处的proxy_pass 对应的服务，会导到上述upstream入口</p><h3 id="5-4-静态资源服务器"><a href="#5-4-静态资源服务器" class="headerlink" title="5.4 静态资源服务器"></a>5.4 静态资源服务器</h3><p>​       Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作（CDN），这就是网站静态化处理的核心思路。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 静态文件，nginx自己处理</span><br><span class="line">location  ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">   root   /home/apple/artproject/art;</span><br><span class="line">   # 过期1天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">   expires  1d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-URL路由规则"><a href="#5-5-URL路由规则" class="headerlink" title="5.5 URL路由规则"></a>5.5 URL路由规则</h3><p>语法规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>= 开头表示精确匹配<br>^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。</p><p>~ 开头表示区分大小写的正则匹配<br><del>*  开头表示不区分大小写的正则匹配<br>!</del>和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则<br>/ 通用匹配，任何请求都会匹配到。<br>多个location配置的情况下匹配顺序为：</p><p>首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p><p>例子，有如下匹配规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">   #规则A</span><br><span class="line">&#125;</span><br><span class="line">location = /login &#123;</span><br><span class="line">   #规则B</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">   #规则C</span><br><span class="line">&#125;</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">   #规则D</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line">   #规则E</span><br><span class="line">&#125;</span><br><span class="line">location !~ \.xhtml$ &#123;</span><br><span class="line">   #规则F</span><br><span class="line">&#125;</span><br><span class="line">location !~* \.xhtml$ &#123;</span><br><span class="line">   #规则G</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">   #规则H</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么产生的效果如下:</p><p>访问根目录/， 比如<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 将匹配规则A<br>访问 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a> 将匹配规则B，<a href="http://localhost/register" target="_blank" rel="noopener">http://localhost/register</a> 则匹配规则H<br>访问 <a href="http://localhost/static/a.html" target="_blank" rel="noopener">http://localhost/static/a.html</a> 将匹配规则C<br>访问 <a href="http://localhost/a.gif" target="_blank" rel="noopener">http://localhost/a.gif</a>, <a href="http://localhost/b.jpg" target="_blank" rel="noopener">http://localhost/b.jpg</a> 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而 <a href="http://localhost/static/c.png" target="_blank" rel="noopener">http://localhost/static/c.png</a> 则优先匹配到规则C<br>访问 <a href="http://localhost/a.PNG" target="_blank" rel="noopener">http://localhost/a.PNG</a> 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。</p><p>访问 <a href="http://localhost/a.xhtml" target="_blank" rel="noopener">http://localhost/a.xhtml</a> 不会匹配规则F和规则G，<a href="http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。" target="_blank" rel="noopener">http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</a></p><p>访问 <a href="http://localhost/category/id/1111" target="_blank" rel="noopener">http://localhost/category/id/1111</a> 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。</p><h3 id="5-6-ELM项目配置"><a href="#5-6-ELM项目配置" class="headerlink" title="5.6 ELM项目配置"></a>5.6 ELM项目配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">2</span>;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">20480</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="attribute">upstream</span> www.elm.com &#123;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8001</span>;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8002</span>;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8003</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> /static &#123;</span><br><span class="line">            <span class="attribute">alias</span> /usr/src/elm/elm/static;</span><br><span class="line">        &#125;       </span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www.elm.com;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完conf配置文件之后，需要重新装载配置文件。</p><p>在/usr/local/openresty/nginx的目录下执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="六、自搭Docker私有仓库"><a href="#六、自搭Docker私有仓库" class="headerlink" title="六、自搭Docker私有仓库"></a>六、自搭Docker私有仓库</h2><h3 id="6-1-下载仓库镜像"><a href="#6-1-下载仓库镜像" class="headerlink" title="6.1 下载仓库镜像"></a>6.1 下载仓库镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><h3 id="6-2-启动本地仓库"><a href="#6-2-启动本地仓库" class="headerlink" title="6.2 启动本地仓库"></a>6.2 启动本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name registry_server -p 5000:5000  registry</span><br></pre></td></tr></table></figure><h3 id="6-3-配置本地仓库"><a href="#6-3-配置本地仓库" class="headerlink" title="6.3 配置本地仓库"></a>6.3 配置本地仓库</h3><p>配置文件的位置：  /etc/docker/daemon.json </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="6-4-向本地仓库推送镜像"><a href="#6-4-向本地仓库推送镜像" class="headerlink" title="6.4 向本地仓库推送镜像"></a>6.4 向本地仓库推送镜像</h3><p>将已有的镜像重新按地地仓库的格式打标签 tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu-dev 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure><h3 id="6-5-从私有仓库拉镜像"><a href="#6-5-从私有仓库拉镜像" class="headerlink" title="6.5 从私有仓库拉镜像"></a>6.5 从私有仓库拉镜像</h3><p>当前系统OS 需要配置本地仓库信息，参考/etc/docker/daemon.json </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前系统的OS重新装载daemon的配置及重启docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systecmctl restart docker</span><br></pre></td></tr></table></figure><p>下拉镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、技术描述&quot;&gt;&lt;a href=&quot;#一、技术描述&quot; class=&quot;headerlink&quot; title=&quot;一、技术描述&quot;&gt;&lt;/a&gt;一、技术描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python2和Python3的区别</title>
    <link href="http://yoursite.com/2018/08/05/Python2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/05/Python2和Python3的区别/</id>
    <published>2018-08-05T12:27:00.000Z</published>
    <updated>2019-11-12T09:00:54.818Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="https://api.uixsj.cn/bing/bing.php" width="80%px" height="300px"><a id="more"></a> <h4 id="1-性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态"><a href="#1-性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态" class="headerlink" title="1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态"></a>1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态</h4><h4 id="2-编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】"><a href="#2-编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】" class="headerlink" title="2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】"></a>2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】</h4><h4 id="3-语法："><a href="#3-语法：" class="headerlink" title="3. 语法："></a>3. 语法：</h4><ul><li>​    去除了不等于号&lt;&gt;，py3使用的是 !=</li><li>​    加入了with…as关键字，新增了None，True，False</li><li>​    加入了nonlocal语句</li><li>​    去除了print操作符，新增了print()函数</li><li>​    去除了raw_input操作符，加入了input()函数</li><li>​    新的super()函数，可以不用传参</li><li>​    新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制</li></ul><h4 id="4-字符和字符串"><a href="#4-字符和字符串" class="headerlink" title="4. 字符和字符串"></a>4. 字符和字符串</h4><p>​    py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储</p><p>​    py3中不管时一个字符，还是多个字符，都是字符串表示</p><h4 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5. 数据类型"></a>5. 数据类型</h4><p>​    py2中数字类型分为int和long(长整型)</p><p>​    py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】</p><h4 id="6-异常"><a href="#6-异常" class="headerlink" title="6. 异常"></a>6. 异常</h4><p>​    py2中：try…except 错误表示码,变量</p><p>​    py3中：try…except 错误表示码 as 变量：</p><h4 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h4><p>​    1. py2中求变量使用xrange()，py3中使用range()</p><p>​    2. 打开文件：</p><p>​          py2中打开文件需要两步：1.file(path)  2.poen(path)</p><p>​          py3中打开文件只需要一步：open(path)</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://api.uixsj.cn/bing/bing.php&quot; width=&quot;80%px&quot; height=&quot;300px&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>结构化查询语言</title>
    <link href="http://yoursite.com/2018/08/04/2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/08/04/2019-08-04结构化查询语言/</id>
    <published>2018-08-04T09:49:27.000Z</published>
    <updated>2019-11-13T11:37:55.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/huagang.jpg?x-oss-process=style/hexo "><a id="more"></a><h4 id="一：数据查询语言（DQL-Data-Query-Language）："><a href="#一：数据查询语言（DQL-Data-Query-Language）：" class="headerlink" title="一：数据查询语言（DQL:Data Query Language）："></a><strong>一：数据查询语言（DQL:Data Query Language）：</strong></h4><p>​    其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p><h4 id="二：数据操作语言（DML：Data-Manipulation-Language）："><a href="#二：数据操作语言（DML：Data-Manipulation-Language）：" class="headerlink" title="二：数据操作语言（DML：Data Manipulation Language）："></a><strong>二：数据操作语言（DML：Data Manipulation Language）：</strong></h4><p>​    其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p><h4 id="三：事务处理语言（TPL）："><a href="#三：事务处理语言（TPL）：" class="headerlink" title="三：事务处理语言（TPL）："></a><strong>三：事务处理语言（TPL）：</strong></h4><p>​    它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</p><h4 id="四：数据控制语言（DCL）："><a href="#四：数据控制语言（DCL）：" class="headerlink" title="四：数据控制语言（DCL）："></a><strong>四：数据控制语言（DCL）：</strong></h4><p>​    它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。</p><h4 id="五：数据定义语言（DDL）："><a href="#五：数据定义语言（DDL）：" class="headerlink" title="五：数据定义语言（DDL）："></a><strong>五：数据定义语言（DDL）：</strong></h4><p>​    其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。</p><h4 id="六：指针控制语言（CCL）："><a href="#六：指针控制语言（CCL）：" class="headerlink" title="六：指针控制语言（CCL）："></a><strong>六：指针控制语言（CCL）：</strong></h4><p>​    它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/huagang.jpg?x-oss-process=style/hexo &quot;&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>创建单例</title>
    <link href="http://yoursite.com/2017/08/10/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/08/10/创建单例/</id>
    <published>2017-08-10T07:37:05.000Z</published>
    <updated>2019-11-13T11:38:33.401Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用装饰器："><a href="#使用装饰器：" class="headerlink" title="使用装饰器："></a><strong>使用装饰器：</strong></h1><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B.jpg" class="full-image" width="50%" height="200px"><a id="more"></a><p><strong>装饰器不但可以装饰函数，也可以装饰类</strong></p><p><strong>如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等</strong></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h3><p>​    在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInstance</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span>  instance  <span class="comment">#局部变量和全局变量重名，扩大作用域</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            instance = cls(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    <span class="keyword">return</span> getInstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">c1 = Check(<span class="string">"jack"</span>,<span class="number">10</span>)</span><br><span class="line">print(c1)</span><br><span class="line"></span><br><span class="line">c2 = Check(<span class="string">"abc"</span>,<span class="number">45</span>)</span><br><span class="line">print(c2)</span><br></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line"> <span class="comment">#定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125;</span></span><br><span class="line">    instanceDict  = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInstance</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instanceDict:</span><br><span class="line">            instanceDict[cls] = cls(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> instanceDict[cls]</span><br><span class="line">    <span class="keyword">return</span> getInstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="comment">#成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(cls)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">print(p1)</span><br><span class="line">p2 = Person()</span><br><span class="line">print(p2)</span><br><span class="line"></span><br><span class="line">p1.show()</span><br><span class="line">p1.func()</span><br></pre></td></tr></table></figure><h3 id="单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同"><a href="#单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同" class="headerlink" title="单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同"></a><strong>单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用装饰器：&quot;&gt;&lt;a href=&quot;#使用装饰器：&quot; class=&quot;headerlink&quot; title=&quot;使用装饰器：&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用装饰器：&lt;/strong&gt;&lt;/h1&gt;&lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B.jpg&quot; class=&quot;full-image&quot; width=&quot;50%&quot; height=&quot;200px&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串功能</title>
    <link href="http://yoursite.com/2017/08/06/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/08/06/Python字符串功能/</id>
    <published>2017-08-06T07:37:05.000Z</published>
    <updated>2019-11-12T10:51:39.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="https://source.unsplash.com/random/1200x500?wallpapers" class="full-image"><a id="more"></a><h3 id="字符串功能"><a href="#字符串功能" class="headerlink" title="字符串功能"></a>字符串功能</h3><h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p><strong>.center(width,fillchar)：</strong>被填充字符长度只能为  1 </p><p><strong>.ljust(width,fillchar)：</strong>原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充</p><p><strong>.rjust(width,fillchar)：</strong>居右</p><p><strong>.zfill(width)</strong>：返回一个长度为width的字符串，<strong>原字符串右对齐，前面补0</strong></p><p><strong>.count((str)[,start],[,end])</strong>：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a><strong>查找</strong></h4><p><strong>.find((str)[,start],[,end])</strong>：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，<strong>没有找到则返回 -1</strong></p><p><strong>.rfind</strong>：从右到左</p><p><strong>.index()</strong>：从列表中获取第一个匹配元素的位置，前提时该元素存在</p><p><strong>.rindex()</strong>：从右往左</p><h4 id="字母转换"><a href="#字母转换" class="headerlink" title="字母转换"></a><strong>字母转换</strong></h4><p><strong>eval()：可以进行内部数字运算</strong></p><p><strong>.lower()：</strong>字母全部小写</p><p><strong>.upper()：</strong>字母全部大写</p><p><strong>.swapcase()：字母大转小，小转大</strong></p><p><strong>.title()</strong>：每个首字母大写</p><p><strong>.capitalize()</strong>：第一个单词首字母大写</p><p><strong>chr(xx)</strong> ：char actor  ， 字符， 将整数转化为在ASCii码中对应的字符</p><p><strong>ord(xx)</strong> ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字</p><h4 id="提取"><a href="#提取" class="headerlink" title="提取"></a><strong>提取</strong></h4><p><strong>.strip</strong>：截掉左，右两侧指定字符串，默认为空格</p><p><strong>.lstrip</strong>：截掉左侧指定字符串，默认为空格</p><p><strong>.strip</strong>：截掉右侧指定字符串，默认为空格</p><h4 id="数字进制转换"><a href="#数字进制转换" class="headerlink" title="数字进制转换"></a><strong>数字进制转换</strong></h4><p><strong>int(“  “)：将x转化为十进制</strong></p><p><strong>int 中的  base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制</strong></p><h5 id="bin-：将x转化为二进制"><a href="#bin-：将x转化为二进制" class="headerlink" title="bin(     )：将x转化为二进制"></a><strong>bin(     )：将x转化为二进制</strong></h5><p><strong>hex(     )：</strong>将x转化为十六进制</p><p><strong>cot(      )：</strong>将x转化为八进制</p><h4 id="字符串的分割，列表的合并"><a href="#字符串的分割，列表的合并" class="headerlink" title="字符串的分割，列表的合并"></a>字符串的分割，列表的合并</h4><p>list = str.<strong>split(substr,num)</strong>：substr表示分隔符，num表示分割的最大次数</p><p><strong>“ substr “.join(列表)：将一个列表中的元素转化为字符串</strong> </p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a><strong>替换</strong></h4><h5 id="1-普通替换"><a href="#1-普通替换" class="headerlink" title="1. 普通替换"></a><strong>1. 普通替换</strong></h5><p><strong>.replace(old,new,(max))：</strong>使用new替换old，可以指定替换最大次数</p><h5 id="2-映射替换（可以进行简单加密）"><a href="#2-映射替换（可以进行简单加密）" class="headerlink" title="2. 映射替换（可以进行简单加密）"></a><strong>2. 映射替换（可以进行简单加密）</strong></h5><p><strong>.maketrans(“原始数据”,”需要替换的数据”)</strong>：生成一个映射表（ASCII）</p><p>！！！生成映射表的时候，两个字符串的长度必须相等，否则报错</p><p><strong>.translate()</strong>：翻译，通过映射表将指定的字符串中的字符替换</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://source.unsplash.com/random/1200x500?wallpapers&quot; class=&quot;full-image&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/05/hello-world/"/>
    <id>http://yoursite.com/2017/07/05/hello-world/</id>
    <published>2017-07-05T12:27:00.000Z</published>
    <updated>2019-11-12T06:40:39.606Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码，查看文章！( 。＿ 。) ✎ ＿">    <label for="pass">请输入密码，查看文章！( 。＿ 。) ✎ ＿</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，(ノへ￣、) 如果您确实想看，请在右下角与我联系！！！
    
    </summary>
    
    
  </entry>
  
</feed>
