<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Passage</title>
  
  <subtitle>&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-19T12:50:15.325Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>随遇而安</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《吊打面试官》系列-Redis常见面试题</title>
    <link href="http://yoursite.com/2019/11/15/%E3%80%8A%E5%90%8A%E6%89%93%E9%9D%A2%E8%AF%95%E5%AE%98%E3%80%8B%E7%B3%BB%E5%88%97-Redis%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/15/《吊打面试官》系列-Redis常见面试题/</id>
    <published>2019-11-15T12:27:12.000Z</published>
    <updated>2019-11-19T12:50:15.325Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a id="more"></a><p>​        <strong>Redis</strong>在互联网技术存储方面使用如此广泛，几乎所有的后端技术面试官都要在<strong>Redis</strong>的使用和原理方面对小伙伴们进行360°的刁难。</p><p>​        作为一个在互联网公司面一次拿一次Offer的面霸，打败了无数竞争对手，每次都只能看到无数落寞的身影失望的离开，略感愧疚<strong>（请允许我使用一下夸张的修辞手法）</strong>。</p><p>​        于是在一个寂寞难耐的夜晚，我痛定思痛，决定开始写《吊打面试官》系列，希望能帮助各位读者以后面试势如破竹，对面试官进行360°的反击，吊打问你的面试官，让一同面试的同僚瞠目结舌，疯狂收割大厂Offer！</p><h2 id="絮叨"><a href="#絮叨" class="headerlink" title="絮叨"></a>絮叨</h2><p>​        上一期因为是在双十一一直在熬夜的大环境下完成的，所以我自己觉得质量明显没之前的好，我这不一睡好就加班加点准备补偿大家，来点干货。（熬夜太容易感冒了，这次点个赞别白嫖了！）</p><p>​        顺带提一嘴，我把我准备写啥画了一个思维导图，以后总不能每篇都放个贼大的图吧，就开源到了我的GitHub，大家有兴趣可以去完善和Star。</p><p>这篇我就先放出来大家看看，感觉还是差点意思，等大家完善了。</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8vdvnnqz4j30u029349w.jpg?x-oss-process=style/yuanhua"><h2 id="回望过去"><a href="#回望过去" class="headerlink" title="回望过去"></a>回望过去</h2><p>上一期吊打系列我们提到了Redis相关的一些知识，还没看的小伙伴可以回顾一下</p><p><a src=" https://blog.csdn.net/qq_35190492/article/details/102841400 ">《吊打面试官》系列-Redis基础</a><br><a src=" https://blog.csdn.net/qq_35190492/article/details/102889333 ">《吊打面试官》系列-缓存雪崩、击穿、穿透</a><br><a src=" https://blog.csdn.net/qq_35190492/article/details/102958250 ">《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU</a><br><a src=" https://blog.csdn.net/qq_35190492/article/details/103004235 ">《吊打面试官》系列-Redis终章-凛冬将至、FPX-新王登基</a><br>这期我就从缓存到一些常见的问题讲一下，有一些我是之前提到过的，不过可能大部分仔是第一次看，我就重复发一下。</p><h1 id="缓存知识点"><a href="#缓存知识点" class="headerlink" title="缓存知识点"></a>缓存知识点</h1><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/CgoB5l14rXSAWVk7AAFdi6Ly8iM148.png?x-oss-process=style/yuanhua"><h2 id="缓存有哪些类型？"><a href="#缓存有哪些类型？" class="headerlink" title="缓存有哪些类型？"></a>缓存有哪些类型？</h2><p>缓存是高并发场景下提高热点数据访问性能的一个有效手段，在开发项目时会经常使用到。</p><p>缓存的类型分为：<strong>本地缓存、分布式缓存和多级缓存。</strong></p><h3 id="本地缓存："><a href="#本地缓存：" class="headerlink" title="本地缓存："></a>本地缓存：</h3><p>本地缓存就是在进程的内存中进行缓存，比如我们的 JVM 堆中，可以用 LRUMap 来实现，也可以使用 Ehcache 这样的工具来实现。</p><p>本地缓存是内存访问，没有远程交互开销，性能最好，但是受限于单机容量，一般缓存较小且无法扩展。</p><h3 id="分布式缓存："><a href="#分布式缓存：" class="headerlink" title="分布式缓存："></a>分布式缓存：</h3><p>分布式缓存可以很好得解决这个问题。</p><p>分布式缓存一般都具有良好的水平扩展能力，对较大数据量的场景也能应付自如。缺点就是需要进行远程请求，性能不如本地缓存。</p><h3 id="多级缓存："><a href="#多级缓存：" class="headerlink" title="多级缓存："></a>多级缓存：</h3><p>为了平衡这种情况，实际业务中一般采用多级缓存，本地缓存只保存访问频率最高的部分热点数据，其他的热点数据放在分布式缓存中。</p><p>在目前的一线大厂中，这也是最常用的缓存方案，单考单一的缓存方案往往难以撑住很多高并发的场景。</p><h3 id="淘汰策略"><a href="#淘汰策略" class="headerlink" title="淘汰策略"></a>淘汰策略</h3><p>不管是本地缓存还是分布式缓存，为了保证较高性能，都是使用内存来保存数据，由于成本和内存限制，当存储的数据超过缓存容量时，需要对缓存的数据进行剔除。</p><p>一般的剔除策略有 FIFO 淘汰最早数据、LRU 剔除最近最少使用、和 LFU 剔除最近使用频率最低的数据几种策略。</p><p><strong>noeviction</strong>:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）</p><p><strong>allkeys-lru</strong>: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</p><p><strong>volatile-lru</strong>: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</p><p><strong>allkeys-random</strong>: 回收随机的键使得新添加的数据有空间存放。</p><p><strong>volatile-random</strong>: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</p><p><strong>volatile-ttl</strong>: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</p><p>如果没有键满足回收的前提条件的话，策略<strong>volatile-lru, volatile-random</strong>以及<strong>volatile-ttl</strong>就和noeviction 差不多了。</p><p>其实在大家熟悉的<strong>LinkedHashMap</strong>中也实现了Lru算法的，实现如下：</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8p9gl0t7nj30qw08p3z4.jpg?x-oss-process=style/yuanhua"><p>当容量超过100时，开始执行<strong>LRU</strong>策略：将最近最少未使用的 <strong>TimeoutInfoHolder</strong> 对象 evict 掉。</p><p>真实面试中会让你写LUR算法，你可别搞原始的那个，那真TM多，写不完的，你要么怼上面这个，要么怼下面这个，找一个数据结构实现下Java版本的LRU还是比较容易的，知道啥原理就好了。</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8orgm8oj0j30p10f7wfq.jpg?x-oss-process=style/yuanhua"><h2 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h2><p>注意后面会把 <strong>Memcache</strong> 简称为 MC。</p><p>先来看看 MC 的特点：</p><p>MC 处理请求时使用多线程异步 IO 的方式，可以合理利用 CPU 多核的优势，性能非常优秀；<br>MC 功能简单，使用内存存储数据；<br>MC 的内存结构以及钙化问题我就不细说了，大家可以查看<a src=" http://www.memcached.org/about ">官网</a>了解下；<br>MC 对缓存的数据可以设置失效期，过期后的数据会被清除；<br>失效的策略采用延迟失效，就是当再次使用数据时检查是否失效；<br>当容量存满时，会对缓存中的数据进行剔除，剔除时除了会对过期 key 进行清理，还会按 LRU 策略对数据进行剔除。<br>另外，使用 MC 有一些限制，这些限制在现在的互联网场景下很致命，成为大家选择<strong>Redis、MongoDB</strong>的重要原因：</p><p>key 不能超过 250 个字节；<br>value 不能超过 1M 字节；<br>key 的最大失效时间是 30 天；<br>只支持 K-V 结构，不提供持久化和主从同步功能。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>先简单说一下 Redis 的特点，方便和 MC 比较。</p><p>与 MC 不同的是，Redis 采用单线程模式处理请求。这样做的原因有 2 个：一个是因为采用了非阻塞的异步事件处理机制；另一个是缓存数据都是内存操作 IO 时间不会太长，单线程可以避免线程上下文切换产生的代价。<br>Redis 支持持久化，所以 Redis 不仅仅可以用作缓存，也可以用作 NoSQL 数据库。<br>相比 MC，Redis 还有一个非常大的优势，就是除了 K-V 之外，还支持多种数据格式，例如 list、set、sorted set、hash 等。<br>Redis 提供主从同步机制，以及 Cluster 集群部署能力，能够提供高可用服务。</p><h1 id="详解-Redis"><a href="#详解-Redis" class="headerlink" title="详解 Redis"></a>详解 Redis</h1><p>Redis 的知识点结构如下图所示。</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/CgoB5l14rXSAHFMcAAFKedIz0a0877.png?x-oss-process=style/yuanhua"><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>来看 Redis 提供的功能有哪些吧！</p><h2 id="我们先看基础类型："><a href="#我们先看基础类型：" class="headerlink" title="我们先看基础类型："></a>我们先看基础类型：</h2><h3 id="String："><a href="#String：" class="headerlink" title="String："></a>String：</h3><p>String 类型是 Redis 中最常使用的类型，内部的实现是通过 SDS（Simple Dynamic String ）来存储的。SDS 类似于 Java 中的 ArrayList，可以通过预分配冗余空间的方式来减少内存的频繁分配。</p><p>这是最简单的类型，就是普通的 set 和 get，做简单的 KV 缓存。</p><p>但是真实的开发环境中，很多仔可能会把很多比较复杂的结构也统一转成String去存储使用，比如有的仔他就喜欢把对象或者List转换为JSONString进行存储，拿出来再反序列话啥的。</p><p>我在这里就不讨论这样做的对错了，但是我还是希望大家能在最合适的场景使用最合适的数据结构，对象找不到最合适的但是类型可以选最合适的嘛，之后别人接手你的代码一看这么规范，诶这小伙子有点东西呀，看到你啥都是用的String，垃圾！</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/u%3D454498675%2C4139436609%26fm%3D26%26gp%3D0.jpg?x-oss-process=style/yuanhua"><p>好了这些都是题外话了，道理还是希望大家记在心里，习惯成自然嘛，小习惯成就你。</p><p><strong>String</strong>的实际应用场景比较广泛的有：</p><p><strong>缓存功能：</strong>String字符串是最常用的数据类型，不仅仅是Redis，各个语言都是最基本类型，因此，利用Redis作为缓存，配合其它数据库作为存储层，利用Redis支持高并发的特点，可以大大加快系统的读写速度、以及降低后端数据库的压力。</p><p><strong>计数器：</strong>许多系统都会使用Redis作为系统的实时计数器，可以快速实现计数和查询的功能。而且最终的数据结果可以按照特定的时间落地到数据库或者其它存储介质当中进行永久保存。</p><p><strong>共享用户Session：</strong>用户重新刷新一次界面，可能需要访问一下数据进行重新登录，或者访问页面缓存Cookie，但是可以利用Redis将用户的Session集中管理，在这种模式只需要保证Redis的高可用，每次用户Session的更新和获取都可以快速完成。大大提高效率。</p><h3 id="Hash："><a href="#Hash：" class="headerlink" title="Hash："></a>Hash：</h3><p>这个是类似 <strong>Map</strong> 的一种结构，这个一般就是可以将结构化的数据，比如一个对象（前提是这个对象没嵌套其他的对象）给缓存在 Redis 里，然后每次读写缓存的时候，可以就操作 Hash 里的某个字段。</p><p>但是这个的场景其实还是多少单一了一些，因为现在很多对象都是比较复杂的，比如你的商品对象可能里面就包含了很多属性，其中也有对象。我自己使用的场景用得不是那么多。</p><h3 id="List："><a href="#List：" class="headerlink" title="List："></a>List：</h3><p><strong>List</strong> 是有序列表，这个还是可以玩儿出很多花样的。</p><p>比如可以通过 <strong>List</strong> 存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的东西。</p><p>比如可以通过 <strong>lrange</strong> 命令，读取某个闭区间内的元素，可以基于 List 实现分页查询，这个是很棒的一个功能，基于 <strong>Redis</strong> 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。</p><p>比如可以搞个简单的消息队列，从 List 头怼进去，从 List 屁股那里弄出来。</p><p>List本身就是我们在开发过程中比较常用的数据结构了，热点数据更不用说了。</p><ul><li><p><strong>消息队列：Redis</strong>的链表结构，可以轻松实现阻塞队列，可以使用左进右出的命令组成来完成队列的设计。比如：数据的生产者可以通过<strong>Lpush</strong>命令从左边插入数据，多个数据消费者，可以使用<strong>BRpop</strong>命令阻塞的“抢”列表尾部的数据。</p></li><li><p>文章列表或者数据分页展示的应用。</p><p>比如，我们常用的博客网站的文章列表，当用户量越来越多时，而且每一个用户都有自己的文章列表，而且当文章多时，都需要分页展示，这时可以考虑使用Redis的列表，列表不但有序同时还支持按照范围内获取元素，可以完美解决分页查询功能。大大提高查询效率。</p></li></ul><h3 id="Set："><a href="#Set：" class="headerlink" title="Set："></a>Set：</h3><p><strong>Set</strong> 是无序集合，会自动去重的那种。</p><p>直接基于 Set 将系统里需要去重的数据扔进去，自动就给去重了，如果你需要对一些数据进行快速的全局去重，你当然也可以基于 JVM 内存里的 HashSet 进行去重，但是如果你的某个系统部署在多台机器上呢？得基于Redis进行全局的 Set 去重。</p><p>可以基于 Set 玩儿交集、并集、差集的操作，比如交集吧，我们可以把两个人的好友列表整一个交集，看看俩人的共同好友是谁？对吧。</p><p>反正这些场景比较多，因为对比很快，操作也简单，两个查询一个Set搞定。</p><h3 id="Sorted-Set："><a href="#Sorted-Set：" class="headerlink" title="Sorted Set："></a>Sorted Set：</h3><p><strong>Sorted set</strong> 是排序的 Set，去重但可以排序，写进去的时候给一个分数，自动根据分数排序。</p><p>有序集合的使用场景与集合类似，但是set集合不是自动有序的，而Sorted set可以利用分数进行成员间的排序，而且是插入时就排序好。所以当你需要一个有序且不重复的集合列表时，就可以选择Sorted set数据结构作为选择方案。</p><ul><li><p>排行榜：有序集合经典使用场景。例如视频网站需要对用户上传的视频做排行榜，榜单维护可能是多方面：按照时间、按照播放量、按照获得的赞数等。</p></li><li><p>用Sorted Sets来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p><p>微博热搜榜，就是有个后面的热度值，前面就是名称</p></li></ul><h2 id="高级用法："><a href="#高级用法：" class="headerlink" title="高级用法："></a>高级用法：</h2><h3 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap :"></a>Bitmap :</h3><p>位图是支持按 bit 位来存储信息，可以用来实现 布隆过滤器（BloomFilter）；</p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog:"></a>HyperLogLog:</h3><p>供不精确的去重计数功能，比较适合用来做大规模数据的去重统计，例如统计 UV；</p><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial:"></a>Geospatial:</h3><p>可以用来保存地理位置，并作位置距离计算或者根据半径计算位置等。有没有想过用Redis来实现附近的人？或者计算最优地图路径？</p><p>这三个其实也可以算作一种数据结构，不知道还有多少朋友记得，我在梦开始的地方，Redis基础中提到过，你如果只知道五种基础类型那只能拿60分，如果你能讲出高级用法，那就觉得你有点东西。</p><h3 id="pub-sub："><a href="#pub-sub：" class="headerlink" title="pub/sub："></a>pub/sub：</h3><p>功能是订阅发布功能，可以用作简单的消息队列。</p><h3 id="Pipeline："><a href="#Pipeline：" class="headerlink" title="Pipeline："></a>Pipeline：</h3><p>可以批量执行一组指令，一次性返回全部结果，可以减少频繁的请求应答。</p><h3 id="Lua："><a href="#Lua：" class="headerlink" title="Lua："></a>Lua：</h3><p>Redis 支持提交 Lua 脚本来执行一系列的功能。</p><p>我在前电商老东家的时候，秒杀场景经常使用这个东西，讲道理有点香，利用他的原子性。</p><p>话说你们想看秒杀的设计么？我记得我面试好像每次都问啊，想看的直接点赞后评论秒杀吧。</p><h3 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h3><p>最后一个功能是事务，但 Redis 提供的不是严格的事务，Redis 只保证串行执行命令，并且能保证全部执行，但是执行命令失败时并不会回滚，而是会继续执行下去。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>Redis 提供了 RDB 和 AOF 两种持久化方式，RDB 是把内存中的数据集以快照形式写入磁盘，实际操作是通过 fork 子进程执行，采用二进制压缩存储；AOF 是以文本日志的形式记录 Redis 处理的每一个写入或删除操作。</p><p>RDB 把整个 Redis 的数据保存在单一文件中，比较适合用来做灾备，但缺点是快照保存完成之前如果宕机，这段时间的数据将会丢失，另外保存快照时可能导致服务短时间不可用。</p><p>AOF 对日志文件的写入操作使用的追加模式，有灵活的同步策略，支持每秒同步、每次修改同步和不同步，缺点就是相同规模的数据集，AOF 要大于 RDB，AOF 在运行效率上往往会慢于 RDB。</p><p>细节的点大家去高可用这章看，特别是两者的优缺点，以及怎么抉择。</p><p><a src=" https://blog.csdn.net/qq_35190492/article/details/102958250 ">《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU</a></p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>来看 Redis 的高可用。Redis 支持主从同步，提供 Cluster 集群部署模式，通过 Sentine l哨兵来监控 Redis 主服务器的状态。当主挂掉时，在从节点中根据一定策略选出新主，并调整其他从 slaveof 到新主。</p><p>选主的策略简单来说有三个：</p><ul><li>slave 的 priority 设置的越低，优先级越高；</li><li>同等情况下，slave 复制的数据越多优先级越高；</li><li>相同的条件下 runid 越小越容易被选中。</li></ul><p>在 Redis 集群中，sentinel 也会进行多实例部署，sentinel 之间通过 Raft 协议来保证自身的高可用。</p><p><strong>Redis Cluster</strong> 使用分片机制，在内部分为 16384 个 slot 插槽，分布在所有 master 节点上，每个 master 节点负责一部分 slot。数据操作时按 key 做 CRC16 来计算在哪个 slot，由哪个 master 进行处理。数据的冗余是通过 slave 节点来保障。</p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><p>哨兵必须用三个实例去保证自己的健壮性的，哨兵+主从并不能保证数据不丢失，但是可以保证集群的高可用。</p><p>为啥必须要三个实例呢？我们先看看两个哨兵会咋样。</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8p9ghsrztj30930773yg.jpg?x-oss-process=style/yuanhua"><p>master宕机了 s1和s2两个哨兵只要有一个认为你宕机了就切换了，并且会选举出一个哨兵去执行故障，但是这个时候也需要大多数哨兵都是运行的。</p><p>那这样有啥问题呢？M1宕机了，S1没挂那其实是OK的，但是整个机器都挂了呢？哨兵就只剩下S2个裸屌了，没有哨兵去允许故障转移了，虽然另外一个机器上还有R1，但是故障转移就是不执行。</p><p>经典的哨兵集群是这样的：</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8p9gj3qyaj309309pwei.jpg?x-oss-process=style/yuanhua"><p>M1所在的机器挂了，哨兵还有两个，两个人一看他不是挂了嘛，那我们就选举一个出来执行故障转移不就好了。</p><p>暖男我，小的总结下哨兵组件的主要功能：</p><ul><li>集群监控：负责监控 Redis master 和 slave 进程是否正常工作。</li><li>消息通知：如果某个 Redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li><li>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。</li><li>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。</li></ul><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><p>提到这个，就跟我前面提到的数据持久化的RDB和AOF有着比密切的关系了。</p><p>我先说下为啥要用主从这样的架构模式，前面提到了单机QPS是有上限的，而且Redis的特性就是必须支撑读高并发的，那你一台机器又读又写，这谁顶得住啊，不当人啊！但是你让这个master机器去写，数据同步给别的slave机器，他们都拿去读，分发掉大量的请求那是不是好很多，而且扩容的时候还可以轻松实现水平扩容。</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/006y8mN6ly1g8p9gedwerj312y0hodhm.jpg?x-oss-process=style/yuanhua"><p>你启动一台slave 的时候，他会发送一个psync命令给master ，如果是这个slave第一次连接到master，他会触发一个全量复制。master就会启动一个线程，生成RDB快照，还会把新的写请求都缓存在内存中，RDB文件生成后，master会将这个RDB发送给slave的，slave拿到之后做的第一件事情就是写进本地的磁盘，然后加载进内存，然后master会把内存里面缓存的那些新命名都发给slave。</p><p>我发出来之后来自CSDN的网友：Jian_Shen_Zer 问了个问题：</p><p>主从同步的时候，新的slaver进来的时候用RDB，那之后的数据呢？有新的数据进入master怎么同步到slaver啊</p><p>敖丙答：笨，AOF嘛，增量的就像MySQL的Binlog一样，把日志增量同步给从服务就好了</p><h3 id="key-失效机制"><a href="#key-失效机制" class="headerlink" title="key 失效机制"></a>key 失效机制</h3><p><strong>Redis</strong> 的 key 可以设置过期时间，过期后 Redis 采用主动和被动结合的失效机制，一个是和 MC 一样在访问时触发被动删除，另一种是定期的主动删除。</p><p>定期+惰性+内存淘汰</p><h1 id="缓存常见问题"><a href="#缓存常见问题" class="headerlink" title="缓存常见问题"></a>缓存常见问题</h1><h2 id="缓存更新方式"><a href="#缓存更新方式" class="headerlink" title="缓存更新方式"></a>缓存更新方式</h2><p>这是决定在使用缓存时就该考虑的问题。</p><p>缓存的数据在数据源发生变更时需要对缓存进行更新，数据源可能是 DB，也可能是远程服务。更新的方式可以是主动更新。数据源是 DB 时，可以在更新完 DB 后就直接更新缓存。</p><p>当数据源不是 DB 而是其他远程服务，可能无法及时主动感知数据变更，这种情况下一般会选择对缓存数据设置失效期，也就是数据不一致的最大容忍时间。</p><p>这种场景下，可以选择失效更新，key 不存在或失效时先请求数据源获取最新数据，然后再次缓存，并更新失效期。</p><p>但这样做有个问题，如果依赖的远程服务在更新时出现异常，则会导致数据不可用。改进的办法是异步更新，就是当失效时先不清除数据，继续使用旧的数据，然后由异步线程去执行更新任务。这样就避免了失效瞬间的空窗期。另外还有一种纯异步更新方式，定时对数据进行分批更新。实际使用时可以根据业务场景选择更新方式。</p><h2 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h2><p>第二个问题是数据不一致的问题，可以说只要使用缓存，就要考虑如何面对这个问题。缓存不一致产生的原因一般是主动更新失败，例如更新 DB 后，更新 Redis 因为网络原因请求超时；或者是异步更新失败导致。</p><p>解决的办法是，如果服务对耗时不是特别敏感可以增加重试；如果服务对耗时敏感可以通过异步补偿任务来处理失败的更新，或者短期的数据不一致不会影响业务，那么只要下次更新时可以成功，能保证最终一致性就可以。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透。产生这个问题的原因可能是外部的恶意攻击，例如，对用户信息进行了缓存，但恶意攻击者使用不存在的用户id频繁请求接口，导致查询缓存不命中，然后穿透 DB 查询依然不命中。这时会有大量请求穿透缓存访问到 DB。</p><p>解决的办法如下。</p><p>对不存在的用户，在缓存中保存一个空对象进行标记，防止相同 ID 再次访问 DB。不过有时这个方法并不能很好解决问题，可能导致缓存中存储大量无用数据。<br>使用 BloomFilter 过滤器，BloomFilter 的特点是存在性检测，如果 BloomFilter 中不存在，那么数据一定不存在；如果 BloomFilter 中存在，实际数据也有可能会不存在。非常适合解决这类的问题。</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿，就是某个热点数据失效时，大量针对这个数据的请求会穿透到数据源。</p><p>解决这个问题有如下办法。</p><ol><li>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</li><li>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</li><li>针对多个热点 key 同时失效的问题，可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩，产生的原因是缓存挂掉，这时所有的请求都会穿透到 DB。</p><p>解决方法：</p><ol><li>使用快速失败的熔断策略，减少 DB 瞬间压力；</li><li>使用主从模式和集群模式来尽量保证缓存服务的高可用。</li></ol><p>实际场景中，这两种方法会结合使用。</p><p>老朋友都知道为啥我没有大篇幅介绍这个几个点了吧，我在之前的文章实在是写得太详细了，忍不住点赞那种，我这里就不做重复拷贝了。</p><p><a src=" https://blog.csdn.net/qq_35190492/article/details/102841400 ">《吊打面试官》系列-Redis基础</a><br><a src="https://blog.csdn.net/qq_35190492/article/details/102889333">《吊打面试官》系列-缓存雪崩、击穿、穿透</a><br><a src="https://blog.csdn.net/qq_35190492/article/details/102958250">《吊打面试官》系列-Redis哨兵、持久化、主从、手撕LRU</a><br><a src="https://blog.csdn.net/qq_35190492/article/details/103004235">《吊打面试官》系列-Redis终章-凛冬将至、FPX-新王登基</a></p><h2 id="考点与加分项"><a href="#考点与加分项" class="headerlink" title="考点与加分项"></a>考点与加分项</h2><p>拿笔记一下！</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/redis%E9%9D%A2%E8%AF%95%E9%A2%98/timg.jpg?x-oss-process=style/yuanhua"><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p>面试的时候问你缓存，主要是考察缓存特性的理解，对 <strong>MC、Redis</strong> 的特点和使用方式的掌握。</p><ul><li><p>要知道缓存的使用场景，不同类型缓存的使用方式，例如：</p><ol><li>对 DB 热点数据进行缓存减少 DB 压力；对依赖的服务进行缓存，提高并发性能；</li><li>单纯 K-V 缓存的场景可以使用 MC，而需要缓存 list、set 等特殊数据格式，可以使用 Redis；</li><li>需要缓存一个用户最近播放视频的列表可以使用 Redis 的 list 来保存、需要计算排行榜数据时，可以使用 Redis 的 zset 结构来保存。</li></ol></li><li><p>要了解 MC 和 Redis 的常用命令，例如原子增减、对不同数据结构进行操作的命令等。</p></li><li><p>了解 MC 和 Redis 在内存中的存储结构，这对评估使用容量会很有帮助。</p></li><li><p>了解 MC 和 Redis 的数据失效方式和剔除策略，比如主动触发的定期剔除和被动触发延期剔除</p></li><li><p>要理解 Redis 的持久化、主从同步与 Cluster 部署的原理，比如 RDB 和 AOF 的实现方式与区别。</p></li><li><p>要知道缓存穿透、击穿、雪崩分别的异同点以及解决方案。</p></li><li><p>不管你有没有电商经验我觉得你都应该知道秒杀的具体实现，以及细节点。</p></li><li><p>……..</p></li></ul><p>欢迎去<a src="https://github.com/AobingJava/JavaFamily">GitHub</a>补充</p><h2 id="加分项"><a href="#加分项" class="headerlink" title="加分项"></a>加分项</h2><p>如果想要在面试中获得更好的表现，还应了解下面这些加分项。</p><ul><li>是要结合实际应用场景来介绍缓存的使用。例如调用后端服务接口获取信息时，可以使用本地+远程的多级缓存；对于动态排行榜类的场景可以考虑通过 Redis 的 Sorted set 来实现等等。</li><li>最好你有过分布式缓存设计和使用经验，例如项目中在什么场景使用过 Redis，使用了什么数据结构，解决哪类的问题；使用 MC 时根据预估值大小调整 McSlab 分配参数等等。</li><li>最好可以了解缓存使用中可能产生的问题。比如 Redis 是单线程处理请求，应尽量避免耗时较高的单个请求任务，防止相互影响；Redis 服务应避免和其他 CPU 密集型的进程部署在同一机器；或者禁用 Swap 内存交换，防止 Redis 的缓存数据交换到硬盘上，影响性能。再比如前面提到的 MC 钙化问题等等。</li><li>要了解 Redis 的典型应用场景，例如，使用 Redis 来实现分布式锁；使用 Bitmap 来实现 BloomFilter，使用 HyperLogLog 来进行 UV 统计等等。</li><li>知道 Redis4.0、5.0 中的新特性，例如支持多播的可持久化消息队列 Stream；通过 Module 系统来进行定制功能扩展等等。</li><li>……..</li></ul><p>还是那句话欢迎去<a src="https://github.com/AobingJava/JavaFamily">GitHub</a>补充。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次是对我Redis系列的总结，这应该是Redis相关的最后一篇文章了，其实四篇看下来的小伙伴很多都从一知半解到了一脸懵逼，哈哈开个玩笑。</p><p>我觉得我的方式应该还好，大部分小伙伴还是比较能理解的，这篇之后我就不会写Redis相关的文章了(秒杀看大家想看的热度吧)，有啥问题可以微信找我，下个系列写啥？</p><p>大家不用急，下个系列前我会发个有意思的文章，是我在公司代码创意大赛拿奖的文章，我觉得还是有点东西，我忍不住分享一下，顺便就在那期发起投票吧哈哈。</p><p>我看到很多小伙伴都有评论说想看别的，大概搜集了一下，还没留言的这期赶紧哟：</p><h2 id="掘金"><a href="#掘金" class="headerlink" title="掘金"></a>掘金</h2><p><strong>愚辛</strong> ：想看计算机基础，网络和操作系统那些（FPX牛脾）</p><p><strong>cherish君</strong>：讲讲dubbo经常遇到的面试题目，太多人喜欢问dubbo😃</p><p><strong>Java架构养成记</strong>：真的很香啊，下一期讲Dubbbo（重点SPI）然后讲MQ好吗</p><h2 id="CSDN"><a href="#CSDN" class="headerlink" title="CSDN"></a>CSDN</h2><p><strong>小殿下</strong>：看完了所有的redis篇 希望可以出ssm</p><h2 id="博客园"><a href="#博客园" class="headerlink" title="博客园"></a>博客园</h2><p><strong>程然：</strong>Dubbo Dubbo</p><h2 id="开源中国"><a href="#开源中国" class="headerlink" title="开源中国"></a>开源中国</h2><p><strong>linshi2019</strong>：这期明显是赶工之作啊</p><p>敖丙：这条我回一下，鞭策我，我很喜欢，不过说实话还是希望大家理解下，我双十一熬夜三天了，现在给你们写的时候也是值班回家2点左右了，我一天吃饭工作时间肯定是固定的，想写点东西就只有挤出睡觉时间了，这种产出肯定没周末全情投入写的来的质量高。</p><p>其实第一期看过来的小伙伴应该也知道，我在排版，还有很多文案，配图其实我一直都有在改进的，光是名词高亮我都要弄很久，因为怕大家看单一的黑白色调枯燥。</p><p>我是真的用心在搞，还是希望大家支持下理解下。</p><p>知乎、简书、思否、慕课手记没人看不知道为啥，懂行的老铁可以跟我说一下。</p><p>我只想说你们想看的肯定都在我开头和GITHub那个图里吧，问题不大，后面都会写的。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>最后感谢下，新浪微博的技术专家张雷。</p><p>他于2013年加入新浪微博，作为核心技术人员参与了微博服务化、混合云等多个重点项目，是微博开源的RPC框架Motan的技术负责人，同时也负责微博的Service Mesh方案的研发与推广，专注于高可用架构及服务中间件开发方向。</p><p>他负责的Motan框架每天承载着万亿级别的请求调用，是微博平台服务化的基石，每次的突发热点事件、每次的春晚流量高峰，都离不开Motan框架的支撑与保障。此外，他也多次应邀在ArchSummit、WOT、GIAC技术峰会做技术分享。</p><p>感谢他对文章部分文案提供的支持和思路。</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p><strong>原文链接：</strong><a href="https://blog.csdn.net/qq_35190492/article/details/103041932" target="_blank" rel="noopener">https://blog.csdn.net/qq_35190492/article/details/103041932</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>scrapy与scrapy-redis</title>
    <link href="http://yoursite.com/2019/02/12/scrapy%E4%B8%8Escrapy-redis/"/>
    <id>http://yoursite.com/2019/02/12/scrapy与scrapy-redis/</id>
    <published>2019-02-12T03:34:20.000Z</published>
    <updated>2019-11-12T09:06:33.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码，查看文章！( 。＿ 。) ✎ ＿">    <label for="pass">请输入密码，查看文章！( 。＿ 。) ✎ ＿</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，(ノへ￣、) 如果您确实想看，请在右下角与我联系！！！
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>数据库的三大范式</title>
    <link href="http://yoursite.com/2018/12/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/12/25/数据库的三大范式/</id>
    <published>2018-12-25T04:23:21.000Z</published>
    <updated>2019-11-19T09:04:46.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​        在设计与操作维护数据库时，最关键的问题就是要确保数据能够正确地分布到数据库的表中。使用正确的数据结构，不仅有助于对数据库进行相应的存取操作，还可以极大地简化应用程序中的其他内容(查询、窗体、报表、代码等)，按照“数据库规范化”对表进行设计，其目的就是减少数据库中的数据冗余，以增加数据的一致性。</p><a id="more"></a><p>​        泛化时在识别数据库中的一个数据元素、关系以及定义所需的表和各表中的项目这些初始工作之后的一个细化的过程。常见的范式有1NF、2NF、3NF、BCNF以及4NF。下面对这几种常见的范式进行简要分析。</p><h1 id="1、1NF-第一范式"><a href="#1、1NF-第一范式" class="headerlink" title="1、1NF(第一范式)"></a>1、1NF(第一范式)</h1><p>​        第一范式是指数据库表中的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。</p><p>​        如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。第一范式的模式要求属性值不可再分裂成更小部分，即属性项不能是属性组合或是由一组属性构成。</p><p>​        简而言之，第一范式就是无重复的列。例如，由“职工号”“姓名”“电话号码”组成的表(一个人可能有一部办公电话和一部移动电话)，这时将其规范化为1NF可以将电话号码分为“办公电话”和“移动电话”两个属性，即职工(职工号，姓名，办公电话，移动电话)。</p><h1 id="2、2NF-第二范式"><a href="#2、2NF-第二范式" class="headerlink" title="2、2NF(第二范式)"></a>2、2NF(第二范式)</h1><p>​        第二范式(2NF)是在第一范式(1NF)的基础上建立起来的，即满足第二范式(2NF)必须先满足第一范式(1NF)。第二范式(2NF)要求数据库表中的每个实例或行必须可以被唯一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。</p><p>​        如果关系模型R为第一范式，并且R中的每一个非主属性完全函数依赖于R的某个候选键，则称R为第二范式模式(如果A是关系模式R的候选键的一个属性，则称A是R的主属性，否则称A是R的非主属性)。</p><p>​        例如，在选课关系表(学号，课程号，成绩，学分)，关键字为组合关键字(学号，课程号)，但由于非主属性学分仅依赖于课程号，对关键字(学号，课程号)只是部分依赖，而不是完全依赖，因此此种方式会导致数据冗余以及更新异常等问题，解决办法是将其分为两个关系模式：学生表(学号，课程号，分数)和课程表(课程号，学分)，新关系通过学生表中的外关键字课程号联系，在需要时进行连接。</p><h1 id="3、3NF-第三范式"><a href="#3、3NF-第三范式" class="headerlink" title="3、3NF(第三范式)"></a>3、3NF(第三范式)</h1><p>​        如果关系模型R是第二范式，且每个非主属性都不传递依赖于R的候选键，则称R是第三范式的模式。</p><p>​        以学生表(学号，姓名，课程号，成绩)为例，其中学生姓名无重名，所以该表有两个候选码(学号，课程号)和(姓名，课程号)，故存在函数依赖：学号——&gt;姓名，(学号，课程号)——&gt;成绩，唯一的非主属性成绩对码不存在部分依赖，也不存在传递依赖，所以属性属于第三范式。</p><h1 id="4、BCNF-BC范式"><a href="#4、BCNF-BC范式" class="headerlink" title="4、BCNF(BC范式)"></a>4、BCNF(BC范式)</h1><p>​        它构建在第三范式的基础上，如果关系模型R是第一范式，且每个属性都不传递依赖于R的候选键，那么称R为BCNF的模式。</p><p>​        假设仓库管理关系表(仓库号，存储物品号，管理员号，数量)，满足一个管理员只在一个仓库工作；一个仓库可以存储多种物品，则存在如下关系：</p><p>(仓库号，存储物品号)——&gt;(管理员号，数量)</p><p>(管理员号，存储物品号)——&gt;(仓库号，数量)</p><p>​        所以，(仓库号，存储物品号)和(管理员号，存储物品号)都是仓库管理关系表的候选码，表中唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：</p><p>(仓库号)——&gt;(管理员号)</p><p>(管理员号)——&gt;(仓库号)</p><p>​        即存在关键字段决定关键字段的情况，因此其不符合BCNF。把仓库管理关系表分解为两个关系表仓库管理表(仓库号，管理员号)和仓库表(仓库号，存储物品号，数量)，这样这个数据库表是符合BCNF的，并消除了删除异常、插入异常和更新异常。</p><h1 id="5、4NF-第四范式"><a href="#5、4NF-第四范式" class="headerlink" title="5、4NF(第四范式)"></a>5、4NF(第四范式)</h1><p>​        设R是一个关系模型，D是R上的多值依赖集合。如果D中存在凡多值依赖X-&gt;Y时，X必是R的超键，那么称R是第四范式的模式。</p><p>​        例如，职工表(职工编号，职工孩子姓名，职工选修课程)，在这个表中，同一个职工可能会有多个职工孩子姓名，同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如职工表一(职工编号，职工孩子姓名)，职工表二(职工编号，职工选修课程)，两个表都只有一个多值事实，所以符合第四范式。</p><p> <img src="/images/timg.gif" data-original="https://img-blog.csdn.net/20170508213333607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRG92ZV9Lbm93bGVkZ2U=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        在设计与操作维护数据库时，最关键的问题就是要确保数据能够正确地分布到数据库的表中。使用正确的数据结构，不仅有助于对数据库进行相应的存取操作，还可以极大地简化应用程序中的其他内容(查询、窗体、报表、代码等)，按照“数据库规范化”对表进行设计，其目的就是减少数据库中的数据冗余，以增加数据的一致性。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker+Nginx完成Django项目部署</title>
    <link href="http://yoursite.com/2018/12/12/Docker-Nginx%E5%AE%8C%E6%88%90Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/12/Docker-Nginx完成Django项目部署/</id>
    <published>2018-12-12T06:37:03.000Z</published>
    <updated>2019-11-12T06:42:51.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、技术描述"><a href="#一、技术描述" class="headerlink" title="一、技术描述"></a>一、技术描述</h2><blockquote><p>通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。</p></blockquote><a id="more"></a><p><strong>Docker</strong></p><p><em>Docker</em> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。</p><p><strong>Nginx</strong></p><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。它是由伊戈尔·赛索耶夫为<a href="https://baike.baidu.com/item/俄罗斯/125568" target="_blank" rel="noopener">俄罗斯</a>访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。其将<a href="https://baike.baidu.com/item/源代码" target="_blank" rel="noopener">源代码</a>以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而<a href="https://baike.baidu.com/item/闻名/2303308" target="_blank" rel="noopener">闻名</a>。2011年6月1日，nginx 1.0.4发布。</p><p>Nginx是一款<a href="https://baike.baidu.com/item/轻量级/10002835" target="_blank" rel="noopener">轻量级</a>的<a href="https://baike.baidu.com/item/Web/150564" target="_blank" rel="noopener">Web</a> 服务器/<a href="https://baike.baidu.com/item/反向代理/7793488" target="_blank" rel="noopener">反向代理</a>服务器及<a href="https://baike.baidu.com/item/电子邮件/111106" target="_blank" rel="noopener">电子邮件</a>（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，<a href="https://baike.baidu.com/item/并发/11024806" target="_blank" rel="noopener">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/京东/210931" target="_blank" rel="noopener">京东</a>、<a href="https://baike.baidu.com/item/新浪/125692" target="_blank" rel="noopener">新浪</a>、<a href="https://baike.baidu.com/item/网易/185754" target="_blank" rel="noopener">网易</a>、<a href="https://baike.baidu.com/item/腾讯/112204" target="_blank" rel="noopener">腾讯</a>、<a href="https://baike.baidu.com/item/淘宝/145661" target="_blank" rel="noopener">淘宝</a>等。</p><p><strong>OpenResty</strong></p><p>OpenResty® 是一个基于 <a href="http://openresty.org/cn/nginx.html" target="_blank" rel="noopener">Nginx</a> 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p><strong>GitLab</strong></p><p>GitLab 是一个用于仓库管理系统的开源项目，使用<a href="https://baike.baidu.com/item/Git" target="_blank" rel="noopener">Git</a>作为代码管理工具，并在此基础上搭建起来的web服务。安装方法是参考GitLab在GitHub上的Wiki页面。</p><p><strong>Gunicorn</strong></p><p>Gunicorn是一个unix上被广泛使用的高性能的Python WSGI UNIX HTTP Server。和大多数的web框架兼容，并具有实现简单，轻量级，高性能等特点。</p><h2 id="二、gunicorn的基本使用"><a href="#二、gunicorn的基本使用" class="headerlink" title="二、gunicorn的基本使用"></a>二、gunicorn的基本使用</h2><blockquote><p>gunicorn(“绿色独角兽”)是一个python Wsgi http server，只支持在Unix系统上运行，来源于Ruby的unicorn项目。Gunicorn使用<strong>prefork master-worker</strong>模型（在gunicorn中，master被称为arbiter），能够与各种wsgi web框架协作。</p></blockquote><h3 id="2-1-安装依赖包"><a href="#2-1-安装依赖包" class="headerlink" title="2.1 安装依赖包"></a>2.1 安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install future gunicorn</span><br></pre></td></tr></table></figure><p>gunicorn在命令时，可以指定如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c    指定一个配置文件(py文件)</span><br><span class="line">-b    与指定的socket进行绑定</span><br><span class="line">-D    以守护进程形式来运行Gunicorn进程，其实就是将这个服务放到后台去运行</span><br><span class="line">-w    工作的进程数量 ；如： gunicorn -w 2 untitled.wsgi -b 0.0.0.0:8000</span><br><span class="line">-k    工作进程类型，sync（默认）, eventlet, gevent, or tornado, gthread, gaiohttp.</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/quqinchao/p/11297224.html" target="_blank" rel="noopener">详细参考</a></p><h3 id="2-2-Django项目的启动"><a href="#2-2-Django项目的启动" class="headerlink" title="2.2 Django项目的启动"></a>2.2 Django项目的启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --chdir /usr/src/Tpp/ Tpp.wsgi:application  --bind 0.0.0.0:9000  --workers=2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi -D</span><br></pre></td></tr></table></figure><h3 id="2-3-Flask项目的启动"><a href="#2-3-Flask项目的启动" class="headerlink" title="2.3 Flask项目的启动"></a>2.3 Flask项目的启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -w2 -b 0.0.0.0:8080 manage:app -D</span><br></pre></td></tr></table></figure><p>-w指的是worker（启动的进程），后面跟的数字是worker的数量</p><p>-b指的是bind（绑定ip），后面是ip:port地址和端口号，0.0.0.0代表所有地址</p><p>manage 入口文件的文件名</p><p>app指的是入口文件中Flask()对象的变量名</p><h2 id="三、项目中编写Dockerfile"><a href="#三、项目中编写Dockerfile" class="headerlink" title="三、项目中编写Dockerfile"></a>三、项目中编写Dockerfile</h2><h3 id="3-1-clone项目"><a href="#3-1-clone项目" class="headerlink" title="3.1 clone项目"></a>3.1 clone项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://114.116.238.223:10080/liu/elm.git</span><br></pre></td></tr></table></figure><h3 id="3-2-项目的Dockerfile"><a href="#3-2-项目的Dockerfile" class="headerlink" title="3.2 项目的Dockerfile"></a>3.2 项目的Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu-dev:latest</span><br><span class="line"><span class="keyword">MAINTAINER</span> disen <span class="number">610039018</span>@qq.com</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> http://114.116.238.223:10080/liu/elm.git</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/elm</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /usr/src/elm/elm/static</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r venv.txt -i http://mirros.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install gunicorn -i http://mirros.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x run.sh</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/src/elm/run.sh</span></span><br></pre></td></tr></table></figure><h3 id="3-3-编写shell启动脚本"><a href="#3-3-编写shell启动脚本" class="headerlink" title="3.3 编写shell启动脚本"></a>3.3 编写shell启动脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'starting elm project'</span></span><br><span class="line"><span class="built_in">cd</span> /usr/src/elm</span><br><span class="line">git pull</span><br><span class="line">pip install -r venv.txt</span><br><span class="line"><span class="built_in">cd</span> /usr/src/elm/elm</span><br><span class="line">gunicorn -w 1 -b 0.0.0.0:8000 elm.wsgi</span><br></pre></td></tr></table></figure><h3 id="3-4-构建docker镜像"><a href="#3-4-构建docker镜像" class="headerlink" title="3.4 构建docker镜像"></a>3.4 构建docker镜像</h3><p>在Dockerfile所在的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t elm:1.0 .</span><br></pre></td></tr></table></figure><h3 id="3-5-启动docker镜像"><a href="#3-5-启动docker镜像" class="headerlink" title="3.5 启动docker镜像"></a>3.5 启动docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server1 -p 8001:8000 elm:1.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server2 -p 8002:8000 elm:1.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name el_oa_server3 -p 8003:8000 elm:1.0</span><br></pre></td></tr></table></figure><h3 id="3-6-打包镜像"><a href="#3-6-打包镜像" class="headerlink" title="3.6 打包镜像"></a>3.6 打包镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save elm:1.0 -o ~/elm.tar</span><br></pre></td></tr></table></figure><h3 id="3-7-分发镜像"><a href="#3-7-分发镜像" class="headerlink" title="3.7 分发镜像"></a>3.7 分发镜像</h3><p>将当前服务器下的elm.tar的镜像压缩文件上传到其它服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/elm.tar root@yyserver2:~/</span><br></pre></td></tr></table></figure><h3 id="3-8-导入镜像"><a href="#3-8-导入镜像" class="headerlink" title="3.8 导入镜像"></a>3.8 导入镜像</h3><p>将上传的镜像压缩文件导入到当前docker镜像中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; ~/elm.tar</span><br></pre></td></tr></table></figure><p>查看镜像是否导入成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="四、Nginx的配置说明"><a href="#四、Nginx的配置说明" class="headerlink" title="四、Nginx的配置说明"></a>四、Nginx的配置说明</h2><h3 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h3><p>一般的nginx.conf文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># user  nobody;  </span><br><span class="line">user apple;  # 当前nginx访问静态资源的用户， 避免出现403问题。</span><br><span class="line">worker_processes  2;        #cat /proc/cpuinfo  查看cpu cores核数</span><br><span class="line">worker_cpu_affinity  01 10;</span><br><span class="line"></span><br><span class="line"># 配置错误的日志信息</span><br><span class="line">error_log  logs/error.log  notice;</span><br><span class="line"># error_log  logs/error.log  debug;</span><br><span class="line"></span><br><span class="line"># 配置Nginx worker进程最大打开文件数</span><br><span class="line"># 进程连接数量要小于等于系统的最大打开文件数</span><br><span class="line"># ulimit -a|grep &quot;open files&quot; 查看打开文件的最大连接数</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">pid  logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 事件配置</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    use  epoll;  # 使用epoll 事件模型(I/O多路复用)</span><br><span class="line">    multi_accept  on;</span><br><span class="line">    accept_mutex_delay  50ms;</span><br><span class="line">    worker_connections  20480;    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    include  mime.types;  # 定义所有的Content-Type 数据类型</span><br><span class="line">    # default_type  application/octet-stream;</span><br><span class="line">     default_type   text/html;</span><br><span class="line"></span><br><span class="line"># 配置日志格式</span><br><span class="line">    # log_format  main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot;&apos;</span><br><span class="line">    # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;</span><br><span class="line">    # &apos;&quot;$upstream_addr&quot; &quot;$upstream_status&quot; &quot;$upstream_response_time&quot; &apos;</span><br><span class="line">    # &apos;$request_time -- $http_cookie -- $cookie_pin&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile  on;</span><br><span class="line">    tcp_nopush  on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  0;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_min_length  1k;</span><br><span class="line">    gzip_http_version  1.1;</span><br><span class="line">    gzip_types  text/plain application/x-javascript text/css  text/shtml application/xml;</span><br><span class="line"></span><br><span class="line">    proxy_intercept_errors  on;</span><br><span class="line">    charset  utf-8;</span><br><span class="line"></span><br><span class="line">    ######################</span><br><span class="line">    include  conf.d/*.conf;</span><br><span class="line">    ######################</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-项目配置"><a href="#4-2-项目配置" class="headerlink" title="4.2 项目配置"></a>4.2 项目配置</h3><p>在conf.d目录下的project.conf文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">proxy_next_upstream  error;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    #nginx提供对外的端口是80</span><br><span class="line">    listen 80;       </span><br><span class="line">    server_name   localhost;</span><br><span class="line"></span><br><span class="line">    client_max_body_size  50M;</span><br><span class="line"></span><br><span class="line">    #配置项目静态资源目录</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /usr/src/elm/elm/static;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://127.0.0.1:8000;</span><br><span class="line">        # 设置请求头</span><br><span class="line">        proxy_set_header  Host $host;</span><br><span class="line">        proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     # error_page  404     /404.html;</span><br><span class="line"></span><br><span class="line">     # redirect server error pages to the static page /50x.html</span><br><span class="line">     error_page  500  502  503  504 /50x.html;</span><br><span class="line">     location = /50x.htlml &#123;</span><br><span class="line">         root  html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、OpenResty的应用"><a href="#五、OpenResty的应用" class="headerlink" title="五、OpenResty的应用"></a>五、OpenResty的应用</h2><h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>Openresty下载页：</p><p><a href="https://openresty.org/cn/download.html" target="_blank" rel="noopener">https://openresty.org/cn/download.html</a></p><p>下载版本：wget  <a href="https://openresty.org/download/openresty-1.11.2.5.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.11.2.5.tar.gz</a>  (Ubuntu 16.x)</p><p>较新版本： wget  <a href="https://openresty.org/download/openresty-1.13.6.2.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.13.6.2.tar.gz</a> (Ubuntu 17.10+)</p><p>以下是在Ubuntu18.04 (bionic) 下安装过程:</p><p>如果nginx已安装，则执行以下操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable nginx</span><br><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure><p>安装GPG public keys及apt源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get -y install --no-install-recommends wget gnupg ca-certificates</span><br><span class="line">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class="line">apt-get -y install --no-install-recommends software-properties-common</span><br><span class="line">add-apt-repository -y "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main"</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>安装gunicorn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openresty</span><br></pre></td></tr></table></figure><p>默认安装在 /usr/local/</p><p>查看服务是否启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service openresty status</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep 80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure><h3 id="5-2-通用配置"><a href="#5-2-通用配置" class="headerlink" title="5.2 通用配置"></a>5.2 通用配置</h3><p>配置文件: /usr/local/openresty/nginx/conf/nginx.conf</p><p>Nginx主要通过nginx.conf文件进行配置使用。在nginx.conf文件中主要分为：</p><ul><li><p>全局块：一些全局的属性，在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等</p></li><li><p>event块：参考事件模型，单个进程最大连接数等</p></li><li><p>http块：设定http服务器</p><ul><li>server块：配置虚拟主机</li><li>location块：配置请求路由及页面的处理情况等</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /opt/openresty/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开, cat /etc/hosts</span><br><span class="line">        server_name www.jd.com jd.com; </span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/jd;</span><br><span class="line"></span><br><span class="line">        #url 请求路由</span><br><span class="line">        location  /hello &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua &apos;</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;)</span><br><span class="line">            &apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream piao.jd.com &#123;</span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-负载均衡策略"><a href="#5-3-负载均衡策略" class="headerlink" title="5.3 负载均衡策略"></a>5.3 负载均衡策略</h3><p>​      负载均衡也是Nginx常用的一个功能，负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>​      Nginx目前支持自带3种负载均衡策略，还有2种常用的第三方策略</p><h4 id="RR-（轮询策略）"><a href="#RR-（轮询策略）" class="headerlink" title="RR （轮询策略）"></a>RR （轮询策略）</h4><p>​        按照轮询（默认）方式进行负载，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。虽然这种方式简便、成本低廉。但缺点是：可靠性低和负载分配不均衡。</p><h4 id="权重weight"><a href="#权重weight" class="headerlink" title="权重weight"></a>权重weight</h4><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">     server localhost:8080 weight=9;</span><br><span class="line">     server localhost:8081 weight=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时8080和8081分别占90%和10%。</p><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>​      上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了session保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了session中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用iphash了，iphash的每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fair-第三方"><a href="#fair-第三方" class="headerlink" title="fair(第三方)"></a>fair(第三方)</h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    fair; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="url-hash-第三方"><a href="#url-hash-第三方" class="headerlink" title="url_hash(第三方)"></a>url_hash(第三方)</h4><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123; </span><br><span class="line">    hash $request_uri; </span><br><span class="line">    hash_method crc32; </span><br><span class="line">    server localhost:8080;</span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   处理动态请求转发到某一个服务</p><p>​         location = / {  </p><p>​                  proxy_pass   <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>  </p><p>​       }  </p><p>​       此处的proxy_pass 对应的服务，会导到上述upstream入口</p><h3 id="5-4-静态资源服务器"><a href="#5-4-静态资源服务器" class="headerlink" title="5.4 静态资源服务器"></a>5.4 静态资源服务器</h3><p>​       Nginx本身也是一个静态资源的服务器，当只有静态资源的时候，就可以使用Nginx来做服务器，同时现在也很流行动静分离，就可以通过Nginx来实现，动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作（CDN），这就是网站静态化处理的核心思路。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 静态文件，nginx自己处理</span><br><span class="line">location  ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">   root   /home/apple/artproject/art;</span><br><span class="line">   # 过期1天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">   expires  1d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-URL路由规则"><a href="#5-5-URL路由规则" class="headerlink" title="5.5 URL路由规则"></a>5.5 URL路由规则</h3><p>语法规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>= 开头表示精确匹配<br>^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。</p><p>~ 开头表示区分大小写的正则匹配<br><del>*  开头表示不区分大小写的正则匹配<br>!</del>和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则<br>/ 通用匹配，任何请求都会匹配到。<br>多个location配置的情况下匹配顺序为：</p><p>首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p><p>例子，有如下匹配规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">   #规则A</span><br><span class="line">&#125;</span><br><span class="line">location = /login &#123;</span><br><span class="line">   #规则B</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">   #规则C</span><br><span class="line">&#125;</span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">   #规则D</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line">   #规则E</span><br><span class="line">&#125;</span><br><span class="line">location !~ \.xhtml$ &#123;</span><br><span class="line">   #规则F</span><br><span class="line">&#125;</span><br><span class="line">location !~* \.xhtml$ &#123;</span><br><span class="line">   #规则G</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">   #规则H</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么产生的效果如下:</p><p>访问根目录/， 比如<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 将匹配规则A<br>访问 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a> 将匹配规则B，<a href="http://localhost/register" target="_blank" rel="noopener">http://localhost/register</a> 则匹配规则H<br>访问 <a href="http://localhost/static/a.html" target="_blank" rel="noopener">http://localhost/static/a.html</a> 将匹配规则C<br>访问 <a href="http://localhost/a.gif" target="_blank" rel="noopener">http://localhost/a.gif</a>, <a href="http://localhost/b.jpg" target="_blank" rel="noopener">http://localhost/b.jpg</a> 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而 <a href="http://localhost/static/c.png" target="_blank" rel="noopener">http://localhost/static/c.png</a> 则优先匹配到规则C<br>访问 <a href="http://localhost/a.PNG" target="_blank" rel="noopener">http://localhost/a.PNG</a> 则匹配规则E，而不会匹配规则D，因为规则E不区分大小写。</p><p>访问 <a href="http://localhost/a.xhtml" target="_blank" rel="noopener">http://localhost/a.xhtml</a> 不会匹配规则F和规则G，<a href="http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。" target="_blank" rel="noopener">http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</a></p><p>访问 <a href="http://localhost/category/id/1111" target="_blank" rel="noopener">http://localhost/category/id/1111</a> 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。</p><h3 id="5-6-ELM项目配置"><a href="#5-6-ELM项目配置" class="headerlink" title="5.6 ELM项目配置"></a>5.6 ELM项目配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">2</span>;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">20480</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="attribute">upstream</span> www.elm.com &#123;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8001</span>;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8002</span>;</span><br><span class="line">         <span class="attribute">server</span> localhost:<span class="number">8003</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> /static &#123;</span><br><span class="line">            <span class="attribute">alias</span> /usr/src/elm/elm/static;</span><br><span class="line">        &#125;       </span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://www.elm.com;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完conf配置文件之后，需要重新装载配置文件。</p><p>在/usr/local/openresty/nginx的目录下执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="六、自搭Docker私有仓库"><a href="#六、自搭Docker私有仓库" class="headerlink" title="六、自搭Docker私有仓库"></a>六、自搭Docker私有仓库</h2><h3 id="6-1-下载仓库镜像"><a href="#6-1-下载仓库镜像" class="headerlink" title="6.1 下载仓库镜像"></a>6.1 下载仓库镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><h3 id="6-2-启动本地仓库"><a href="#6-2-启动本地仓库" class="headerlink" title="6.2 启动本地仓库"></a>6.2 启动本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name registry_server -p 5000:5000  registry</span><br></pre></td></tr></table></figure><h3 id="6-3-配置本地仓库"><a href="#6-3-配置本地仓库" class="headerlink" title="6.3 配置本地仓库"></a>6.3 配置本地仓库</h3><p>配置文件的位置：  /etc/docker/daemon.json </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="6-4-向本地仓库推送镜像"><a href="#6-4-向本地仓库推送镜像" class="headerlink" title="6.4 向本地仓库推送镜像"></a>6.4 向本地仓库推送镜像</h3><p>将已有的镜像重新按地地仓库的格式打标签 tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag ubuntu-dev 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure><p>推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure><h3 id="6-5-从私有仓库拉镜像"><a href="#6-5-从私有仓库拉镜像" class="headerlink" title="6.5 从私有仓库拉镜像"></a>6.5 从私有仓库拉镜像</h3><p>当前系统OS 需要配置本地仓库信息，参考/etc/docker/daemon.json </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://y4tay211.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;119.3.182.128:5000&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前系统的OS重新装载daemon的配置及重启docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systecmctl restart docker</span><br></pre></td></tr></table></figure><p>下拉镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 119.3.182.128:5000/ubuntu-dev</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、技术描述&quot;&gt;&lt;a href=&quot;#一、技术描述&quot; class=&quot;headerlink&quot; title=&quot;一、技术描述&quot;&gt;&lt;/a&gt;一、技术描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过Docker容器技术构造Python 项目运行环境，在容器内从gitlab中下拉项目且安装依赖包，通过Gunicorn启动Python的wsgi项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python学习目录</title>
    <link href="http://yoursite.com/2018/10/21/Python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2018/10/21/Python学习目录/</id>
    <published>2018-10-21T12:14:45.000Z</published>
    <updated>2019-11-19T12:25:29.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一、Python入门、环境搭建、变量、数据类型</p><a id="more"></a><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191117201857686.png?x-oss-process=style/yuanhua"><p>二、Python运算符、条件结构、循环结构</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191107190952536.png?x-oss-process=style/yuanhua"><p>三、Python函数</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191107191017236.png?x-oss-process=style/yuanhua"><p>四、做一次综合练习,做一个控制台的员工管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求：员工管理系统</span></span><br><span class="line"><span class="string">功能:</span></span><br><span class="line"><span class="string">1.添加员工信息</span></span><br><span class="line"><span class="string">2.删除员工信息</span></span><br><span class="line"><span class="string">3.修改员工信息</span></span><br><span class="line"><span class="string">4.查看单个员工信息</span></span><br><span class="line"><span class="string">5.查看所有员工信息</span></span><br><span class="line"><span class="string">6.退出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">技术：函数、数据类型(字典列表)、循环、条件语句</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">emps = []   <span class="comment"># [&#123;&#125;,&#123;&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chocieFunc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""选择功能列表"""</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">30</span>)</span><br><span class="line">    print(<span class="string">"1.添加员工信息"</span>)</span><br><span class="line">    print(<span class="string">"2.删除员工信息"</span>)</span><br><span class="line">    print(<span class="string">"3.修改员工信息"</span>)</span><br><span class="line">    print(<span class="string">"4.查看单个员工信息"</span>)</span><br><span class="line">    print(<span class="string">"5.查看所有员工信息"</span>)</span><br><span class="line">    print(<span class="string">"6.退出"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addEmp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""添加员工信息"""</span></span><br><span class="line">    id = input(<span class="string">"请输入要添加的员工编号："</span>)</span><br><span class="line">    name = input(<span class="string">"请输入要添加的员工姓名："</span>)</span><br><span class="line">    gender = input(<span class="string">"请输入要添加的员工性别："</span>)</span><br><span class="line">    age = input(<span class="string">"请输入要添加的员工年龄："</span>)</span><br><span class="line">    emp = &#123;<span class="string">"id"</span>: id, <span class="string">"name"</span>: name, <span class="string">"gender"</span>: gender, <span class="string">"age"</span>: age&#125;</span><br><span class="line">    emps.append(emp)</span><br><span class="line">    print(<span class="string">"添加OK！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delEmp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""删除员工信息"""</span></span><br><span class="line">    id = input(<span class="string">"请输入要删除的员工编号："</span>)</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="keyword">if</span> emp.get(<span class="string">"id"</span>) == id:</span><br><span class="line">            <span class="comment"># 将emp删除,从emps</span></span><br><span class="line">            emps.remove(emp)</span><br><span class="line">            print(<span class="string">"删除OK！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"请输入正确的员工编号"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateEmp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""修改员工信息"""</span></span><br><span class="line">    id = input(<span class="string">"请输入要修改的员工编号："</span>)</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="keyword">if</span> emp[<span class="string">"id"</span>] == id:</span><br><span class="line">            <span class="comment"># 特别注意</span></span><br><span class="line">            emp[<span class="string">"name"</span>] = input(<span class="string">"请输入要修改后的员工姓名："</span>)</span><br><span class="line">            emp[<span class="string">"gender"</span>] = input(<span class="string">"请输入要修改后的员工性别："</span>)</span><br><span class="line">            emp[<span class="string">"age"</span>] = input(<span class="string">"请输入要修改后的员工年龄："</span>)</span><br><span class="line">            <span class="comment"># emp = &#123;"id": id, "name": name, "gender": gender, "age": age&#125;</span></span><br><span class="line">            <span class="comment"># 先删除原有的emp,在追加新的emp【不推荐】</span></span><br><span class="line">            print(<span class="string">"修改成功！！！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"查无此人！！！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getEmpById</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""查看单个员工信息"""</span></span><br><span class="line">    id = input(<span class="string">"请输入要查询的员工编号："</span>)</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        <span class="keyword">if</span> emp[<span class="string">"id"</span>] == id:</span><br><span class="line">            print(<span class="string">"编号\t姓名\t性别\t年龄"</span>)</span><br><span class="line">            print(<span class="string">f"<span class="subst">&#123;emp[<span class="string">'id'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'name'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'gender'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'age'</span>]&#125;</span>"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"查无此人！！！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllEmps</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""查看所有员工信息"""</span></span><br><span class="line">    print(<span class="string">"编号\t姓名\t性别\t年龄"</span>)</span><br><span class="line">    <span class="keyword">for</span> emp <span class="keyword">in</span> emps:</span><br><span class="line">        print(<span class="string">f"<span class="subst">&#123;emp[<span class="string">'id'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'name'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'gender'</span>]&#125;</span>\t<span class="subst">&#123;emp[<span class="string">'age'</span>]&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f"共查询到<span class="subst">&#123;len(emps)&#125;</span>条数据"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"******欢迎使用员工管理系统******"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    chocieFunc()</span><br><span class="line">    num = int(input(<span class="string">"请输入指令:"</span>))</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        addEmp()</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">        delEmp()</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">3</span>:</span><br><span class="line">        updateEmp()</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">4</span>:</span><br><span class="line">        getEmpById()</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">5</span>:</span><br><span class="line">        getAllEmps()</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">6</span>:</span><br><span class="line">        print(<span class="string">"欢迎下次再来！！！"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"请输入正确的指令"</span>)</span><br></pre></td></tr></table></figure><p>五、面向对象(封装、继承、多态)</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/2019110719115117.png?x-oss-process=style/yuanhua"><p>六、模块、包、文件、异常、高阶函数</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191107191413154.png?x-oss-process=style/yuanhua"><p>七、Python标准库之字符串处理库、文件及目录操作、时间日期</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191107191654202.png?x-oss-process=style/yuanhua"><p>八、Python数据库编程</p><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87/python%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/20191107191814122.png?x-oss-process=style/yuanhua"><p>之后就开始学习爬虫,Django了<br>end…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、Python入门、环境搭建、变量、数据类型&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GET和POST的区别</title>
    <link href="http://yoursite.com/2018/10/19/GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/10/19/GET和POST的区别/</id>
    <published>2018-10-19T08:45:41.000Z</published>
    <updated>2019-11-19T09:05:45.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​         IT界知名的程序员曾说：对于那些月薪三万以下，自称IT工程师的码农们，其实我们从来没有把他们归为我们IT工程师的队伍。他们虽然总是以IT工程师自居，但只是他们一厢情愿罢了。</p><a id="more"></a><p>此话一出，不知激起了多少(码农)程序员的愤怒，却又无可奈何，于是码农问程序员。</p><p>码农：你知道get和post请求到底有什么区别？</p><p>程序员：你看这篇就知道了。</p><p>码农：你月薪三万了？</p><p>程序员：嗯。</p><p>码农：你是怎么做到的？</p><p>程序员：我做梦做到的</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        这个问题几乎面试的时候都会问到，是一个老生常谈的话题，然而随着不断的学习，对于以前的认识有很多误区，所以还是需要不断地总结的，学而时习之，不亦说乎。</p><p>​        关于get和post如果你有条件上百度的话，至少有200百万条结果，每个人都有每个人的思考，当然，这篇也是我的思考，如果有些结论有错误，希望能够喷起来。在批评中不断改进，与诸君共勉一句话：若批评无意义，则赞美无意义。</p><h2 id="01-特点"><a href="#01-特点" class="headerlink" title="01 特点"></a>01 特点</h2><h3 id="1-1-http的特点"><a href="#1-1-http的特点" class="headerlink" title="1.1 http的特点"></a>1.1 http的特点</h3><p>基于tcp/ip、一种网络应用层协议、超文本传输协议HyperText Transfer Protocol<br>工作方式：客户端请求服务端应答的模式<br><strong>快速：</strong>无状态连接<br><strong>灵活：</strong>可以传输任意对象，对象类型由Content-Type标记<br>客户端请求request消息包括以下格式：请求行（request line）、请求头部（header）、空行、请求数据</p><p> <img src="/images/timg.gif" data-original="https://img-blog.csdnimg.cn/20191113235832155.png" alt="在这里插入图片描述"> </p><p>服务端响应response也由四个部分组成，分别是：状态行、消息报头、空行、响应正文</p><p> <img src="/images/timg.gif" data-original="https://img-blog.csdnimg.cn/20191113235837317.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly96aGFuZ2xpbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><h3 id="1-2-请求方法"><a href="#1-2-请求方法" class="headerlink" title="1.2 请求方法"></a>1.2 请求方法</h3><p>http请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。<br>        HTTP2.0 新的二进制格式（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p><p>​        多路复用（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p><p>​        header压缩，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p><p>服务端推送（server push），同SPDY一样，HTTP2.0也具有server push功能。<br>参考链接：<a href="https://baike.baidu.com/item/HTTP%202.0/12520156?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/HTTP%202.0/12520156?fr=aladdin</a></p><p>1 GET 请求指定的页面信息，并返回实体主体。<br>2 HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>5 DELETE 请求服务器删除指定的页面。<br>6 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>7 OPTIONS 允许客户端查看服务器的性能。<br>8 TRACE 回显服务器收到的请求，主要用于测试或诊断。</p><h3 id="1-3-我们耳熟能详的的区别"><a href="#1-3-我们耳熟能详的的区别" class="headerlink" title="1.3 我们耳熟能详的的区别"></a>1.3 我们耳熟能详的的区别</h3><p>http协议最常见的两种方法GET和POST，这几点答案其实有几点并不准确</p><p>请求缓存：GET 会被缓存，而post不会</p><p>收藏书签：GET可以，而POST不能</p><p>保留浏览器历史记录：GET可以，而POST不能</p><p>用处：get常用于取回数据，post用于提交数据</p><p>安全性：post比get安全</p><p>请求参数：querystring 是url的一部分get、post都可以带上。 get的querystring（仅支持urlencode编码），post的参数是放在body（支持多种编码）</p><p>请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制</p><h2 id="02-常见的误区"><a href="#02-常见的误区" class="headerlink" title="02 常见的误区"></a>02 常见的误区</h2><p> <img src="/images/timg.gif" data-original="https://img-blog.csdnimg.cn/20191113235855356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly96aGFuZ2xpbi5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><strong>get和post误区</strong><br>        针对上面常见的区别，如果面试的时候这么说，肯定是有很大的毛病，刚在学校面试的时候也曾经囫囵吞枣地这样说过，现在回过头再想以前的错误认知，又有许多新的认识。</p><h3 id="2-1-误区一"><a href="#2-1-误区一" class="headerlink" title="2.1 误区一"></a>2.1 误区一</h3><p><strong>“用处：get常用于取回数据，post用于提交数据”</strong></p><p>​        曾听到过这样一种说法：get替换post来优化网站性能，虽然这种说法没错，也的确get常被用于取回数据，但是post也被一些ui框架使用于取回数据，比如kendo ui中的grid，就是用post来接受数据的。所以结论是get、post用途也是因地制宜。如果你有使用过kendo UI，会发现分页、过滤、自定义的参数都包含在form data里面。</p><p><strong>请求参数</strong><br>        get是querystring（仅支持urlencode编码），post是放在body（支持多种编码）<br>        query参数是URL的一部分，而GET、POST等是请求方法的一种，不管是哪种请求方法，都必须有URL，而URL的query是可选的，可有可无。</p><h3 id="2-2-误区二"><a href="#2-2-误区二" class="headerlink" title="2.2 误区二"></a>2.2 误区二</h3><p><strong>“请求参数长度限制：get请求长度最多1024kb，post对请求数据没有限制”</strong></p><p>​        这句话看上去实在没毛病啊，菜鸟教程也是这样说的啊。虽然字面意思上没有错误，但是理解一定要正确。我想说的是GET方法提交的url参数数据大小没有限制，在http协议中没有对url长度进行限制（不仅仅是querystring的长度），这个限制是特定的浏览器及服务器对他的限制</p><p><strong>下面就是对各种浏览器和服务器的最大处理能力做一些说明：</strong></p><p>IE浏览器对URL的最大限制为2083个字符<br>Firefox (Browser)：对于Firefox浏览器URL的长度限制为65,536个字符。<br>Safari (Browser)：URL最大长度限制为 80,000个字符。<br>Opera (Browser)：URL最大长度限制为190,000个字符。<br>Google (chrome)：URL最大长度限制为8182个字符。<br>Apache (Server)：能接受最大url长度为8,192个字符。<br>Microsoft Internet Information Server(IIS)：能接受最大url的长度为16,384个字符。<br>所以为了符合所有标准，url的最好不好超过最低标准的2083个字符（2k+35）。当然在做客户端程序时，url并不展示给用户，只是个程序调用，这时长度只收web服务器的影响了。对于中文的传递，一个汉字最终编码后的字符长度是9个字符。</p><p>​        最常见的form表单，浏览器默认的form表单，默认的content-type是application/x-www-form-urlencoded,提交的数据会按照key value的方式，jquery的ajax默认的也是这种content-type。当然在post方式中添加querystring一定是可以接收的到，但是在get方式中加body参数就不一定能成功接收到了。</p><h3 id="2-3-误区三"><a href="#2-3-误区三" class="headerlink" title="2.3 误区三"></a>2.3 误区三</h3><p><strong>“post比get安全性要高”</strong></p><p>​        这里的安全是相对性，并不是真正意义上的安全，通过get提交的数据都将显示到url上，页面会被浏览器缓存，其他人查看历史记录会看到提交的数据，而post不会。另外get提交数据还可能会造成CSRF攻击。</p><h3 id="2-4-误区四："><a href="#2-4-误区四：" class="headerlink" title="2.4 误区四："></a>2.4 误区四：</h3><p><strong>“GET产生一个TCP数据包；POST产生两个TCP数据包。”</strong></p><p>​        这一点理解起来还是有一定难度的,实际上，不论哪一种浏览器，在发送 POST 的时候都没有带 Expect 头，server 也自然不会发 100 continue。通过抓包发现，尽管会分两次，body 就是紧随在 header 后面发送的，根本不存在『等待服务器响应』这一说。<br>​        从另一个角度说，TCP 是传输层协议。别人问你应用层协议里的 GET 和 POST 有啥区别，你回答说这俩在传输层上发送数据的时候不一样，确定别人不抽你？<br>参考资料：<a href="https://zhuanlan.zhihu.com/p/25028045" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25028045</a></p><h2 id="3-http状态码附录"><a href="#3-http状态码附录" class="headerlink" title="3 http状态码附录"></a>3 http状态码附录</h2><h3 id="3-1-状态码1xx"><a href="#3-1-状态码1xx" class="headerlink" title="3.1 状态码1xx"></a>3.1 状态码1xx</h3><p>100 Continue：服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。<br>101 Switching Protocols：服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。<br>102: 由WebDAV（RFC 2518）：扩展的状态码，代表处理将被继续执行</p><h3 id="3-2-状态码2xx-成功"><a href="#3-2-状态码2xx-成功" class="headerlink" title="3.2 状态码2xx:成功"></a>3.2 状态码2xx:成功</h3><p>200 OK：请求成功（其后是对GET和POST请求的应答文档。）<br>201 Created：请求被创建完成，同时新的资源被创建。<br>202 Accepted：供处理的请求已被接受，但是处理未完成。<br>203 Non-authoritative Information：文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。<br>204 No Content：没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。<br>205 Reset Content：没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。<br>206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它。</p><h3 id="3-3-状态码3xx-重定向"><a href="#3-3-状态码3xx-重定向" class="headerlink" title="3.3 状态码3xx:重定向"></a>3.3 状态码3xx:重定向</h3><p>300 Multiple Choices：多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。<br>301 Moved Permanently：所请求的页面已经转移至新的url<br>302 Found：所请求的页面已经临时转移至新的url。<br>303 See Other：所请求的页面可在别的url下被找到。<br>304 Not Modified：未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。<br>305 Use Proxy：客户请求的文档应该通过Location头所指明的代理服务器提取。<br>306 Unused：此代码被用于前一版本。目前已不再使用，但是代码依然被保留。<br>307 Temporary Redirect：被请求的页面已经临时移至新的url。</p><h3 id="3-4-状态码4xx-客户端错误"><a href="#3-4-状态码4xx-客户端错误" class="headerlink" title="3.4 状态码4xx:客户端错误"></a>3.4 状态码4xx:客户端错误</h3><p>400 Bad Request：服务器未能理解请求。<br>401 Unauthorized：被请求的页面需要用户名和密码。<br>401.1：登录失败。<br>401.2：服务器配置导致登录失败。<br>401.3：由于 ACL 对资源的限制而未获得授权。<br>401.4：筛选器授权失败。<br>401.5：ISAPI/CGI 应用程序授权失败。<br>401.7：访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。<br>402 Payment Required：此代码尚无法使用。<br>403 Forbidden：对被请求页面的访问被禁止。<br>404 Not Found:  服务器无法找到被请求的页面。<br>405 Method Not Allowed:  请求中指定的方法不被允许。<br>406 Not Acceptable: 服务器生成的响应无法被客户端所接受。<br>407 Proxy Authentication Required:  用户必须首先使用代理服务器进行验证，这样请求才会被处理。<br>408 Request Timeout:  请求超出了服务器的等待时间。<br>409 Conflict:  由于冲突，请求无法被完成。<br>410 Gone: 被请求的页面不可用。<br>411 Length Required:  “Content-Length” 未被定义。如果无此内容，服务器不会接受请求。<br>412 Precondition Failed:  请求中的前提条件被服务器评估为失败。<br>413 Request Entity Too Large:  由于所请求的实体的太大，服务器不会接受请求。<br>414 Request-url Too Long:  由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。<br>415 Unsupported Media Type:  由于媒介类型不被支持，服务器不会接受请求。<br>416 Requested Range Not Satisfiable:  服务器不能满足客户在请求中指定的Range头。<br>417 Expectation Failed:  执行失败。<br>423:  锁定的错误。</p><h3 id="3-5-状态码5-服务端错误"><a href="#3-5-状态码5-服务端错误" class="headerlink" title="3.5 状态码5** 服务端错误"></a>3.5 状态码5** 服务端错误</h3><p>500 Internal Server Error：请求未完成。服务器遇到不可预知的情况。<br>501 Not Implemented：请求未完成。服务器不支持所请求的功能。<br>502 Bad Gateway：请求未完成。服务器从上游服务器收到一个无效的响应。<br>503 Service Unavailable：请求未完成。服务器临时过载或宕机。<br>504 Gateway Timeout：网关超时。<br>505 HTTP Version Not Supported：服务器不支持请求中指明的HTTP协议版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​         IT界知名的程序员曾说：对于那些月薪三万以下，自称IT工程师的码农们，其实我们从来没有把他们归为我们IT工程师的队伍。他们虽然总是以IT工程师自居，但只是他们一厢情愿罢了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python2和Python3的区别</title>
    <link href="http://yoursite.com/2018/08/05/Python2%E5%92%8CPython3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/05/Python2和Python3的区别/</id>
    <published>2018-08-05T12:27:00.000Z</published>
    <updated>2019-11-12T09:00:54.818Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="https://api.uixsj.cn/bing/bing.php" width="80%px" height="300px"><a id="more"></a> <h4 id="1-性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态"><a href="#1-性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态" class="headerlink" title="1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态"></a>1. 性能：py3其实比py2的效率低，py3有极大地优化了空间，效率处于追赶状态</h4><h4 id="2-编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】"><a href="#2-编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】" class="headerlink" title="2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】"></a>2. 编码：py3使用utf-8编码，使得变量名更加广阔【可以使用中文作为变量】</h4><h4 id="3-语法："><a href="#3-语法：" class="headerlink" title="3. 语法："></a>3. 语法：</h4><ul><li>​    去除了不等于号&lt;&gt;，py3使用的是 !=</li><li>​    加入了with…as关键字，新增了None，True，False</li><li>​    加入了nonlocal语句</li><li>​    去除了print操作符，新增了print()函数</li><li>​    去除了raw_input操作符，加入了input()函数</li><li>​    新的super()函数，可以不用传参</li><li>​    新的八进制的字面量：py2中使用数字0表示八进制，py3中使用0o表示八进制</li></ul><h4 id="4-字符和字符串"><a href="#4-字符和字符串" class="headerlink" title="4. 字符和字符串"></a>4. 字符和字符串</h4><p>​    py2中采用8-bit字符串存储，py3中采用16-bit，Unicode字符串存储</p><p>​    py3中不管时一个字符，还是多个字符，都是字符串表示</p><h4 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5. 数据类型"></a>5. 数据类型</h4><p>​    py2中数字类型分为int和long(长整型)</p><p>​    py3中数字类型只有一种int，新增了一种bytes【实现了字符串的编码encode和解码decode】</p><h4 id="6-异常"><a href="#6-异常" class="headerlink" title="6. 异常"></a>6. 异常</h4><p>​    py2中：try…except 错误表示码,变量</p><p>​    py3中：try…except 错误表示码 as 变量：</p><h4 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h4><p>​    1. py2中求变量使用xrange()，py3中使用range()</p><p>​    2. 打开文件：</p><p>​          py2中打开文件需要两步：1.file(path)  2.poen(path)</p><p>​          py3中打开文件只需要一步：open(path)</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://api.uixsj.cn/bing/bing.php&quot; width=&quot;80%px&quot; height=&quot;300px&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>结构化查询语言</title>
    <link href="http://yoursite.com/2018/08/04/2019-08-04%E7%BB%93%E6%9E%84%E5%8C%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/08/04/2019-08-04结构化查询语言/</id>
    <published>2018-08-04T09:49:27.000Z</published>
    <updated>2019-11-13T14:16:01.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="http://hexo-myblog.oss-cn-qingdao.aliyuncs.com/photo/wallhaven-nmxqwy.jpg?x-oss-process=style/yuanhua" height="350" width="100%"><a id="more"></a><h4 id="一：数据查询语言（DQL-Data-Query-Language）："><a href="#一：数据查询语言（DQL-Data-Query-Language）：" class="headerlink" title="一：数据查询语言（DQL:Data Query Language）："></a><strong>一：数据查询语言（DQL:Data Query Language）：</strong></h4><p>​    其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p><h4 id="二：数据操作语言（DML：Data-Manipulation-Language）："><a href="#二：数据操作语言（DML：Data-Manipulation-Language）：" class="headerlink" title="二：数据操作语言（DML：Data Manipulation Language）："></a><strong>二：数据操作语言（DML：Data Manipulation Language）：</strong></h4><p>​    其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p><h4 id="三：事务处理语言（TPL）："><a href="#三：事务处理语言（TPL）：" class="headerlink" title="三：事务处理语言（TPL）："></a><strong>三：事务处理语言（TPL）：</strong></h4><p>​    它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。</p><h4 id="四：数据控制语言（DCL）："><a href="#四：数据控制语言（DCL）：" class="headerlink" title="四：数据控制语言（DCL）："></a><strong>四：数据控制语言（DCL）：</strong></h4><p>​    它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。</p><h4 id="五：数据定义语言（DDL）："><a href="#五：数据定义语言（DDL）：" class="headerlink" title="五：数据定义语言（DDL）："></a><strong>五：数据定义语言（DDL）：</strong></h4><p>​    其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。</p><h4 id="六：指针控制语言（CCL）："><a href="#六：指针控制语言（CCL）：" class="headerlink" title="六：指针控制语言（CCL）："></a><strong>六：指针控制语言（CCL）：</strong></h4><p>​    它的语句，像DECLARE CURSOR，FETCH INTO和UPDATE WHERE CURRENT用于对一个或多个表单独行的操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;http://hexo-myblog.oss-cn-qingdao.aliyuncs.com/photo/wallhaven-nmxqwy.jpg?x-oss-process=style/yuanhua&quot; height=&quot;350&quot; width=&quot;100%&quot;&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Django中使用Celery+Redis解决高并发抢购问题</title>
    <link href="http://yoursite.com/2018/07/30/Django%E4%B8%AD%E4%BD%BF%E7%94%A8Celery-Redis%E8%A7%A3%E5%86%B3%E9%AB%98%E5%B9%B6%E5%8F%91%E6%8A%A2%E8%B4%AD%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/30/Django中使用Celery-Redis解决高并发抢购问题/</id>
    <published>2018-07-30T07:43:17.000Z</published>
    <updated>2019-11-19T09:56:45.629Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="高并发解决方案-Celery-Redis-队列"><a href="#高并发解决方案-Celery-Redis-队列" class="headerlink" title="高并发解决方案 Celery+Redis 队列"></a><strong>高并发解决方案 Celery+Redis 队列</strong></h1><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h2><p><strong>Celery 解决的 C10K 问题，通过消息中间键和后台的任务执行单元解决高并发问题</strong></p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h2><ol><li><p>简单</p></li><li><p>高可用：当任务执行失败或者执行过程中发生中断，Celery会自动尝试重新执行任务</p></li><li><p>快速：一个单进程的celery每分钟可处理上百万个任务</p></li><li><p>灵活：几乎celery的每个组件都可以被扩展和自定制</p></li></ol><h2 id="Celery-的组成部分："><a href="#Celery-的组成部分：" class="headerlink" title="Celery 的组成部分："></a><strong>Celery 的组成部分：</strong></h2><ol><li><p>消息中间键 Broker，Celery 本身没有实现功能，只是一种接口或规范，在celery中，必须指定消息中间键实现方案（Redis 发布/订阅，RabbitMQ）</p></li><li><p>任务执行单元 Worker（后台进程）</p></li><li><p>任务执行单元结果存储 Result</p></li></ol><p><img src="/images/timg.gif" data-original="D:%5C%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%5CqqD5F2EA86E9CA81AE0CA3D4849D5CD7B3%5Cd17d677798d74f3bb082a9e0d89fc37b.png" alt="img"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p>文档： <a href="http://docs.celeryproject.org/en/latest/django/index.html" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/django/index.html</a></p><p>注意： Window 在Celery4.0之后，不支持多进程方式，更换成协程方式(eventlet,   gevent)</p><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a><strong>安装库</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery==<span class="number">4.4</span><span class="number">.0</span>rc3 eventlet</span><br></pre></td></tr></table></figure><p>在主项目的目录下，创建<strong>celery.py</strong>, 内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __feture__ <span class="keyword">import</span> absolute_path, unicode_literals </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery  </span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'advanceDjango.settings'</span>)</span><br><span class="line">app = Celery(<span class="string">'advanceDjango'</span>, broker=<span class="string">'redis://127.0.0.1:6379/8'</span>) app.config_from_object(<span class="string">'django.conf:settings'</span>)  <span class="comment"># 配置Celery， 加载settings.py </span></span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks()  <span class="comment"># 自动发现task任务</span></span><br></pre></td></tr></table></figure><p>在项目的 <strong>init.py</strong> 脚本中，增加<strong>all</strong>属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals  </span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 向项目模块中增加celery_app对象 </span></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></table></figure><p>在app应用模块中，创建<strong>tasks.py</strong>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task  </span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qbuy</span><span class="params">(goods_id, user_id)</span>:</span> </span><br><span class="line">    print(<span class="string">'goods_id: %s -&gt; user_id: %s'</span> % (goods_id, user_id)) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'goods_id: %s -&gt; user_id: %s'</span> % (goods_id, user_id)</span><br></pre></td></tr></table></figure><p>在主项目的<strong>settings.py</strong>文件， 配置Celery的选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CELERY_IMPORTS = (<span class="string">'stockapp.tasks'</span>,)</span><br></pre></td></tr></table></figure><h3 id="启动Celery"><a href="#启动Celery" class="headerlink" title="启动Celery**"></a>启动Celery**</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; celery -A advanceDjango worker -P eventlet -l info</span><br></pre></td></tr></table></figure><p>-P 指定执行单元的实现方式， 指定eventlet 表示以协程方式实现后台执行单元的异步操作。</p><p>调用异步任务, @shared_task修改的任务函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbuy.delay(<span class="string">'10009'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>如果Celery服务接收任务，并执行，可以看到执行的结果，但是结果发出的警告。因为没有处理执行单元完成任务的结果。</p><h2 id="存储任务结果"><a href="#存储任务结果" class="headerlink" title="存储任务结果"></a><strong>存储任务结果</strong></h2><ul><li><h3 id="存储到redis"><a href="#存储到redis" class="headerlink" title="存储到redis"></a><strong>存储到redis</strong></h3></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Celery(<span class="string">'advanceDjango'</span>, </span><br><span class="line">             broker=<span class="string">'redis://127.0.0.1:6379/8'</span>,</span><br><span class="line">             backend=<span class="string">'redis://127.0.0.1:6379/7'</span>)</span><br></pre></td></tr></table></figure><p>在创建时，指定Celery()的backend参数，指定results存储到redis中.</p><ul><li><h3 id="django-celery-results"><a href="#django-celery-results" class="headerlink" title="django-celery-results"></a><strong>django-celery-results</strong></h3></li></ul><h2 id="安装-存储任务执行结果库"><a href="#安装-存储任务执行结果库" class="headerlink" title="安装 存储任务执行结果库"></a><strong>安装 存储任务执行结果库</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-results</span><br></pre></td></tr></table></figure><p>在 <strong>settings.py</strong> 文件中，配置 <strong>result存储方案</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [   </span><br><span class="line">    <span class="string">'...'</span>,    </span><br><span class="line">    <span class="string">'django_celery_results'</span> ]  </span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'django-db'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># CELERY_CACHE_BACKEND = 'django-cache' # 缓存信息</span></span><br></pre></td></tr></table></figure><p>迁移Celery结果相关的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; python manage.py migrate django_celery_results</span><br></pre></td></tr></table></figure><p>迁移成功之后，重新启动Celery。</p><h3 id="调试任务"><a href="#调试任务" class="headerlink" title="调试任务"></a><strong>调试任务</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">async_result = qbuy.delay(<span class="string">'10009'</span>, <span class="number">2</span>) </span><br><span class="line">async_result.ready()  <span class="comment"># 返回False或True, True表示结果已就绪 </span></span><br><span class="line">async_result.result  <span class="comment"># 查看任务结果</span></span><br></pre></td></tr></table></figure><h2 id="抢购的实现"><a href="#抢购的实现" class="headerlink" title="抢购的实现"></a><strong>抢购的实现</strong></h2><p><strong>涉及的技术点： ajax请求， redis的hash， cache使用</strong></p><h1 id="Celery其它配置"><a href="#Celery其它配置" class="headerlink" title="Celery其它配置**"></a>Celery其它配置**</h1><h2 id="scheduler-计划任务"><a href="#scheduler-计划任务" class="headerlink" title="scheduler 计划任务"></a><strong>scheduler 计划任务</strong></h2><p><strong>文档：</strong> <a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-celery-beat</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [  ...  <span class="string">'django_celery_results'</span>,  <span class="string">'django_celery_beat'</span>, ]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; python manage.py migrate django_celery_beat</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CELERY_TIMEZONE = TIME_ZONE  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置计划任务调度类</span></span><br><span class="line">CELERY_BEAT_SCHEDULER = <span class="string">'django_celery_beat.schedulers.DatabaseScheduler'</span> CELERY_BEAT_SCHEDULE = &#123;   </span><br><span class="line">    <span class="string">u'定时同步数据2'</span>: &#123;     </span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'stockapp.tasks.con_data'</span>,     </span><br><span class="line">        <span class="string">'schedule'</span>: <span class="number">1</span>,     </span><br><span class="line">        <span class="string">'args'</span>: (<span class="string">'同步oracle'</span>, )  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_data</span><span class="params">(content)</span>:</span>   </span><br><span class="line">    print(<span class="string">'开始同步数据: %s'</span> % content)   </span><br><span class="line">    logging.getLogger(<span class="string">''</span>).info(<span class="string">'开始同步数据: %s'</span> % content)   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'同步完成'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; celery -A advanceDjango worker -B -l info -f celery.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高并发解决方案-Celery-Redis-队列&quot;&gt;&lt;a href=&quot;#高并发解决方案-Celery-Redis-队列&quot; class=&quot;headerlink&quot; title=&quot;高并发解决方案 Celery+Redis 队列&quot;&gt;&lt;/a&gt;&lt;strong&gt;高并发解决方案 Celery+Redis 队列&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django中三种SQL语句的方法</title>
    <link href="http://yoursite.com/2018/05/05/Django%E4%B8%AD%E4%B8%89%E7%A7%8DSQL%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/05/05/Django中三种SQL语句的方法/</id>
    <published>2018-05-05T13:29:20.000Z</published>
    <updated>2019-11-19T09:18:22.667Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="原生的SQL语句查询"><a href="#原生的SQL语句查询" class="headerlink" title="原生的SQL语句查询"></a><strong>原生的SQL语句查询</strong></h1><a id="more"></a><p><strong>针对复杂的查询来说，通过 QuerySet 查询不是特别方便，则使用原生的 SQL 查询</strong></p><h2 id="QuerySet-提供两种原生-SQL-查询："><a href="#QuerySet-提供两种原生-SQL-查询：" class="headerlink" title="QuerySet 提供两种原生 SQL 查询："></a><strong>QuerySet 提供两种原生 SQL 查询：</strong></h2><h3 id="QuerySet-raw"><a href="#QuerySet-raw" class="headerlink" title="QuerySet.raw()"></a><strong>QuerySet.raw()</strong></h3><p><strong>查询的字段必须是模型类中声明的字段，且必须存在主键列，查询的结果是RawQuerySet 类对象，可以迭代，元素类型是模型类对象</strong></p><p><strong>查询的 SQL 语句中可以使用 “ %S “占位符，可以使用元组或者字典参数传值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mainapp.models <span class="keyword">import</span> FruitEntity </span><br><span class="line">FruitEntity.objects.filter(price__gt=<span class="number">10</span>).values() </span><br><span class="line">r_queryset = FruitEntity.objects.raw(<span class="string">'select id,name,price from t_fruit \ </span></span><br><span class="line"><span class="string">                       where price &gt; %s order by price desc limit %s, 10'</span>, (<span class="number">10</span>,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> r_queryset:    </span><br><span class="line">print(fruit)</span><br></pre></td></tr></table></figure><h3 id="QuerySet-extra"><a href="#QuerySet-extra" class="headerlink" title="QuerySet.extra()"></a><strong>QuerySet.extra()</strong></h3><p>​        extra() 扩展查询，针对 QuerySet 查询结果集中，额外增加查询条件或排序等相关操作，返回结果还是 <strong>SuerySet</strong> 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extra</span><span class="params">(self, select=None, where=None, params=None, tables=None,          order_by=None, select_params=None)</span>:</span> </span><br><span class="line"></span><br><span class="line">qs1 = FruitEntity.objects.extra(where=[<span class="string">'price &lt; %s or name like %s'</span>],                                         params=[<span class="string">'50'</span>,<span class="string">'果'</span>]) </span><br><span class="line">qs2 = FruitEntity.objects.extra(where=[<span class="string">'price &lt; %s or name like %s'</span>,<span class="string">'source=%s'</span>],                                        params=[<span class="string">'50'</span>,<span class="string">'果'</span>,<span class="string">'海南'</span>]) </span><br><span class="line">e_fruit.all() </span><br><span class="line">&lt;QuerySet [&lt;FruitEntity: 椰子-海南<span class="number">-34.3</span>&gt;, &lt;FruitEntity: 车厘子-海南<span class="number">-34.3</span>&gt;]&gt; </span><br><span class="line">e_fruit.values() &lt;QuerySet [&#123;<span class="string">'id'</span>: <span class="number">17</span>, <span class="string">'name'</span>: <span class="string">'椰子'</span>, <span class="string">'price'</span>: <span class="number">34.3</span>, <span class="string">'source'</span>: <span class="string">'海南'</span>, <span class="string">'f_image'</span>: <span class="string">''</span>, <span class="string">'f_width'</span>: <span class="literal">None</span>, <span class="string">'f_height'</span>: <span class="literal">None</span>, <span class="string">'category_id'</span>: <span class="number">1</span>&#125;,  &#123;<span class="string">'id'</span>: <span class="number">21</span>, <span class="string">'name'</span>: <span class="string">'车厘子'</span>, <span class="string">'price'</span>: <span class="number">34.3</span>, <span class="string">'source'</span>: <span class="string">'海南'</span>, <span class="string">'f_image'</span>: <span class="string">''</span>, <span class="string">'f_width'</span>: <span class="literal">None</span>, <span class="string">'f_height'</span>: <span class="literal">None</span>, <span class="string">'category_id'</span>: <span class="number">1</span>&#125;]&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-django-db-connection-数据库连接对象进行原生-SQL-查询"><a href="#使用-django-db-connection-数据库连接对象进行原生-SQL-查询" class="headerlink" title="使用 django.db.connection 数据库连接对象进行原生 SQL 查询"></a><strong>使用 django.db.connection 数据库连接对象进行原生 SQL 查询</strong></h2><p><strong>connection 对象表示与数据库连接的对象，可以通过 connection 连接对象，再通过cursor的execute()/fetchall()/rowcount相关方法或函数来执行原生的SQL和执行的结果。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection </span><br><span class="line"><span class="comment">#  connection.close()不可被关闭 </span></span><br><span class="line">cursor = connection.cursor() </span><br><span class="line">cursor.execute(<span class="string">'select * from t_fruit'</span>)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">'update t_fruit set price=5.5 where name="苹果"'</span>) </span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line">cursor.rowcount </span><br><span class="line">connection.commit() <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原生的SQL语句查询&quot;&gt;&lt;a href=&quot;#原生的SQL语句查询&quot; class=&quot;headerlink&quot; title=&quot;原生的SQL语句查询&quot;&gt;&lt;/a&gt;&lt;strong&gt;原生的SQL语句查询&lt;/strong&gt;&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/Python/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>创建单例</title>
    <link href="http://yoursite.com/2017/08/10/%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/08/10/创建单例/</id>
    <published>2017-08-10T07:37:05.000Z</published>
    <updated>2019-11-13T14:16:53.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用装饰器："><a href="#使用装饰器：" class="headerlink" title="使用装饰器："></a><strong>使用装饰器：</strong></h1><img src="/images/timg.gif" data-original="http://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/huagang.jpg?x-oss-process=style/yuanhua" class="full-image"><a id="more"></a><p><strong>装饰器不但可以装饰函数，也可以装饰类</strong></p><p><strong>如果要书写单例，命名为：defaultInstance，currentInstance，getInstance等</strong></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h3><p>​    在外部函数中定义一个变量，在内部函数中进行单例的设置，最终将设置的结果返回</p><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInstance</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span>  instance  <span class="comment">#局部变量和全局变量重名，扩大作用域</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            instance = cls(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    <span class="keyword">return</span> getInstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">c1 = Check(<span class="string">"jack"</span>,<span class="number">10</span>)</span><br><span class="line">print(c1)</span><br><span class="line"></span><br><span class="line">c2 = Check(<span class="string">"abc"</span>,<span class="number">45</span>)</span><br><span class="line">print(c2)</span><br></pre></td></tr></table></figure><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line"> <span class="comment">#定义一个字典，字典用来保存被装饰的类和对应的唯一的对象,&#123;类:对象&#125;</span></span><br><span class="line">    instanceDict  = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInstance</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instanceDict:</span><br><span class="line">            instanceDict[cls] = cls(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> instanceDict[cls]</span><br><span class="line">    <span class="keyword">return</span> getInstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#实例属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="comment">#成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(cls)</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">print(p1)</span><br><span class="line">p2 = Person()</span><br><span class="line">print(p2)</span><br><span class="line"></span><br><span class="line">p1.show()</span><br><span class="line">p1.func()</span><br></pre></td></tr></table></figure><h3 id="单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同"><a href="#单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同" class="headerlink" title="单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同"></a><strong>单例类和普通类的区别仅仅是单例类只能创建一个对象，其余的用法和普通类完全相同</strong></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用装饰器：&quot;&gt;&lt;a href=&quot;#使用装饰器：&quot; class=&quot;headerlink&quot; title=&quot;使用装饰器：&quot;&gt;&lt;/a&gt;&lt;strong&gt;使用装饰器：&lt;/strong&gt;&lt;/h1&gt;&lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;http://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/huagang.jpg?x-oss-process=style/yuanhua&quot; class=&quot;full-image&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串功能</title>
    <link href="http://yoursite.com/2017/08/06/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/08/06/Python字符串功能/</id>
    <published>2017-08-06T07:37:05.000Z</published>
    <updated>2019-11-13T14:20:45.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><img src="/images/timg.gif" data-original="https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/wallhaven-k91l57.png?x-oss-process=style/yuanhua" class="full-image"><a id="more"></a><h3 id="字符串功能"><a href="#字符串功能" class="headerlink" title="字符串功能"></a>字符串功能</h3><h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p><strong>.center(width,fillchar)：</strong>被填充字符长度只能为  1 </p><p><strong>.ljust(width,fillchar)：</strong>原字符串被居左，其他剩余的字符串使用指定的字符填充，默认使用空格填充</p><p><strong>.rjust(width,fillchar)：</strong>居右</p><p><strong>.zfill(width)</strong>：返回一个长度为width的字符串，<strong>原字符串右对齐，前面补0</strong></p><p><strong>.count((str)[,start],[,end])</strong>：返回字符串中str出现的次数，可以指定一个范围，默认从头到尾</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a><strong>查找</strong></h4><p><strong>.find((str)[,start],[,end])</strong>：检测str字符串中是否包含在字符串中，可以指定范围，默认从头到尾，得到的是第一次出现的下标，<strong>没有找到则返回 -1</strong></p><p><strong>.rfind</strong>：从右到左</p><p><strong>.index()</strong>：从列表中获取第一个匹配元素的位置，前提时该元素存在</p><p><strong>.rindex()</strong>：从右往左</p><h4 id="字母转换"><a href="#字母转换" class="headerlink" title="字母转换"></a><strong>字母转换</strong></h4><p><strong>eval()：可以进行内部数字运算</strong></p><p><strong>.lower()：</strong>字母全部小写</p><p><strong>.upper()：</strong>字母全部大写</p><p><strong>.swapcase()：字母大转小，小转大</strong></p><p><strong>.title()</strong>：每个首字母大写</p><p><strong>.capitalize()</strong>：第一个单词首字母大写</p><p><strong>chr(xx)</strong> ：char actor  ， 字符， 将整数转化为在ASCii码中对应的字符</p><p><strong>ord(xx)</strong> ：ordinary ，原始的，将资格字符转化为ASCII码中对应的数字</p><h4 id="提取"><a href="#提取" class="headerlink" title="提取"></a><strong>提取</strong></h4><p><strong>.strip</strong>：截掉左，右两侧指定字符串，默认为空格</p><p><strong>.lstrip</strong>：截掉左侧指定字符串，默认为空格</p><p><strong>.strip</strong>：截掉右侧指定字符串，默认为空格</p><h4 id="数字进制转换"><a href="#数字进制转换" class="headerlink" title="数字进制转换"></a><strong>数字进制转换</strong></h4><p><strong>int(“  “)：将x转化为十进制</strong></p><p><strong>int 中的  base 关键字表示按当前需要被转换的数据的形式【什么进制 】，最终通过int返回的是十进制</strong></p><h5 id="bin-：将x转化为二进制"><a href="#bin-：将x转化为二进制" class="headerlink" title="bin(     )：将x转化为二进制"></a><strong>bin(     )：将x转化为二进制</strong></h5><p><strong>hex(     )：</strong>将x转化为十六进制</p><p><strong>cot(      )：</strong>将x转化为八进制</p><h4 id="字符串的分割，列表的合并"><a href="#字符串的分割，列表的合并" class="headerlink" title="字符串的分割，列表的合并"></a>字符串的分割，列表的合并</h4><p>list = str.<strong>split(substr,num)</strong>：substr表示分隔符，num表示分割的最大次数</p><p><strong>“ substr “.join(列表)：将一个列表中的元素转化为字符串</strong> </p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a><strong>替换</strong></h4><h5 id="1-普通替换"><a href="#1-普通替换" class="headerlink" title="1. 普通替换"></a><strong>1. 普通替换</strong></h5><p><strong>.replace(old,new,(max))：</strong>使用new替换old，可以指定替换最大次数</p><h5 id="2-映射替换（可以进行简单加密）"><a href="#2-映射替换（可以进行简单加密）" class="headerlink" title="2. 映射替换（可以进行简单加密）"></a><strong>2. 映射替换（可以进行简单加密）</strong></h5><p><strong>.maketrans(“原始数据”,”需要替换的数据”)</strong>：生成一个映射表（ASCII）</p><p>！！！生成映射表的时候，两个字符串的长度必须相等，否则报错</p><p><strong>.translate()</strong>：翻译，通过映射表将指定的字符串中的字符替换</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/timg.gif&quot; data-original=&quot;https://hexo-myblog.oss-cn-qingdao.aliyuncs.com/hexo/wallhaven-k91l57.png?x-oss-process=style/yuanhua&quot; class=&quot;full-image&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>本山大叔-念诗之王</title>
    <link href="http://yoursite.com/2017/07/16/%E6%9C%AC%E5%B1%B1%E5%A4%A7%E5%8F%94-%E5%BF%B5%E8%AF%97%E4%B9%8B%E7%8E%8B/"/>
    <id>http://yoursite.com/2017/07/16/本山大叔-念诗之王/</id>
    <published>2017-07-16T10:27:43.000Z</published>
    <updated>2019-11-19T09:57:52.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2>中国 Rap 之王</h2><a id="more"></a><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=19390801&cid=31621681&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;中国 Rap 之王&lt;/h2&gt;
    
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/categories/bilibili/"/>
    
    
      <category term="鬼畜" scheme="http://yoursite.com/tags/%E9%AC%BC%E7%95%9C/"/>
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>某科学的超电磁炮</title>
    <link href="http://yoursite.com/2017/07/10/%E8%B6%85%E7%94%B5%E7%A3%81%E7%82%AE/"/>
    <id>http://yoursite.com/2017/07/10/超电磁炮/</id>
    <published>2017-07-10T07:45:47.000Z</published>
    <updated>2019-11-19T09:57:44.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="B站剪辑"><a href="#B站剪辑" class="headerlink" title="B站剪辑"></a>B站剪辑</h2><blockquote><script type="text/javascript" src="https://api.uixsj.cn/hitokoto/w.php?code=js"></script><div id="xsjhitokoto" style="font-size:20px; margin:20px"><script>xsjhitokoto()</script></div></blockquote><a id="more"></a><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=810872&cid=1176840&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><center><h3>插件暂时不能使用，忽略......</h3></center><video width="400%" height="400px" controls="controls">    <source src="超电磁炮/kuiba.mp4" type="video/mp4"></video>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;B站剪辑&quot;&gt;&lt;a href=&quot;#B站剪辑&quot; class=&quot;headerlink&quot; title=&quot;B站剪辑&quot;&gt;&lt;/a&gt;B站剪辑&lt;/h2&gt;&lt;blockquote&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://api.uixsj.cn/hitokoto/w.php?code=js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;xsjhitokoto&quot; style=&quot;font-size:20px; margin:20px&quot;&gt;&lt;script&gt;xsjhitokoto()&lt;/script&gt;&lt;/div&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="bilibili" scheme="http://yoursite.com/categories/bilibili/"/>
    
    
      <category term="bilibili" scheme="http://yoursite.com/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/05/hello-world/"/>
    <id>http://yoursite.com/2017/07/05/hello-world/</id>
    <published>2017-07-05T12:27:00.000Z</published>
    <updated>2019-11-12T06:40:39.606Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码，查看文章！( 。＿ 。) ✎ ＿">    <label for="pass">请输入密码，查看文章！( 。＿ 。) ✎ ＿</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，(ノへ￣、) 如果您确实想看，请在右下角与我联系！！！
    
    </summary>
    
    
  </entry>
  
</feed>
